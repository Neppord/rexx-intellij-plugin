// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/Parse.flex

package com.github.neppord.rexxintellijplugin.gen;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.neppord.rexxintellijplugin.gen.RexxTokens.*;


public class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\10\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\42\1\0\1\61"+
    "\1\0\1\62\1\63\1\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\42\1\0\1\64\1\0"+
    "\1\65\261\0\2\66\115\0\1\67\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\1\1\17\1\20\1\21\23\22\2\1\1\23"+
    "\1\24\2\1\1\0\1\25\1\26\1\27\1\0\1\30"+
    "\1\31\1\32\5\0\1\33\1\34\1\35\1\36\1\37"+
    "\2\22\1\40\6\22\1\41\22\22\1\0\3\22\1\0"+
    "\2\22\1\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\41\7\0\1\50\1\51\3\0\1\52\1\53\1\54"+
    "\3\22\1\0\1\55\1\22\1\0\6\22\1\56\6\22"+
    "\1\0\2\22\1\0\1\22\1\57\3\22\1\0\2\22"+
    "\2\60\1\22\1\61\1\22\1\0\1\62\2\0\1\57"+
    "\3\0\1\63\1\64\3\0\1\65\1\66\1\67\2\70"+
    "\2\71\5\22\1\72\2\22\1\0\2\22\1\0\1\22"+
    "\2\73\2\22\1\0\4\22\1\0\1\74\2\22\2\75"+
    "\1\76\1\77\7\0\1\22\1\100\2\22\1\101\2\22"+
    "\1\0\1\22\2\102\1\22\1\103\2\104\1\105\3\22"+
    "\1\0\1\106\1\107\7\0\4\22\1\0\1\22\1\0"+
    "\2\22\1\110\1\111\1\112\1\111\2\0\1\110\1\112"+
    "\1\0\1\113\1\0\1\114\1\22\1\115\2\116\2\117"+
    "\1\22\1\0\1\22\1\0\1\115\1\0\1\120\2\22"+
    "\1\0\1\22\2\0\1\121\2\122\1\123\1\121\1\0"+
    "\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\70\0\70\0\u01c0\0\70\0\70\0\u01f8\0\u0230"+
    "\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\70\0\u08c0\0\u08f8"+
    "\0\340\0\70\0\u0930\0\70\0\u0188\0\70\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0230\0\u0a10\0\u0a48\0\u0a80\0\70\0\70\0\u0ab8"+
    "\0\70\0\70\0\u0af0\0\u0b28\0\u0428\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0428\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\70\0\u1260"+
    "\0\70\0\70\0\70\0\70\0\70\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u0a10\0\u0a48\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\70\0\u0428\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u0428\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u0428\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u0428\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u0428\0\70\0\u1b58\0\u0428"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d18\0\70\0\u1d50\0\u1d88\0\u1dc0\0\70\0\u0428"+
    "\0\u0428\0\u0428\0\70\0\u0428\0\70\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u1ed8\0\u0428\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u0428\0\70\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u0428\0\u2258\0\u2290\0\u0428"+
    "\0\70\0\70\0\70\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u0428\0\u2488\0\u24c0\0\u0428\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u0428\0\70\0\u25d8\0\u0428\0\u0428"+
    "\0\70\0\u0428\0\u2610\0\u2648\0\u2680\0\u26b8\0\u0428\0\u0428"+
    "\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u0428\0\u0428\0\u0428\0\70\0\u2a70\0\u2aa8\0\70\0\70"+
    "\0\u2ae0\0\70\0\u2b18\0\u0428\0\u2b50\0\u0428\0\u0428\0\70"+
    "\0\u0428\0\70\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\70\0\u2c68"+
    "\0\70\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u0428"+
    "\0\u0428\0\70\0\u0428\0\70\0\u2df0\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\23\1\24\1\4\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\31"+
    "\1\37\1\31\1\40\1\31\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\2\31\1\53"+
    "\1\54\1\2\1\55\1\56\1\57\1\60\71\0\1\3"+
    "\70\0\1\4\22\0\1\4\42\0\2\61\1\0\1\61"+
    "\1\62\63\61\3\0\1\63\73\0\1\64\60\0\2\65"+
    "\1\0\5\65\1\62\57\65\13\0\1\66\72\0\1\67"+
    "\72\0\3\70\57\0\1\71\73\0\1\72\1\0\3\23"+
    "\6\0\1\73\24\0\1\74\27\0\1\72\1\0\3\23"+
    "\70\0\1\75\73\0\1\76\65\0\1\77\1\100\66\0"+
    "\1\101\1\102\57\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\103\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\30\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\1\104\27\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\15\31\1\105\2\31\1\106\7\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\12\31\1\107"+
    "\1\31\1\110\11\31\1\111\1\31\2\0\1\31\23\0"+
    "\1\31\1\0\3\31\5\0\15\31\1\112\12\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\23\31\1\113"+
    "\4\31\2\0\1\31\23\0\1\31\1\0\3\31\5\0"+
    "\5\31\1\114\6\31\1\115\5\31\1\116\5\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\4\31\1\117"+
    "\10\31\1\120\12\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\15\31\1\121\5\31\1\122\4\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\16\31\1\123"+
    "\3\31\1\124\5\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\1\125\17\31\1\126\2\31\1\127\4\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\23\31"+
    "\1\130\4\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\1\131\3\31\1\132\23\31\2\0\1\31\23\0"+
    "\1\31\1\0\3\31\5\0\1\133\3\31\1\134\3\31"+
    "\1\135\4\31\1\136\12\31\2\0\1\31\2\0\1\137"+
    "\20\0\1\31\1\0\3\31\5\0\7\31\1\140\10\31"+
    "\1\141\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\21\31\1\142\6\31\2\0\1\31\3\0\1\143"+
    "\17\0\1\31\1\0\3\31\5\0\1\144\27\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\10\31\1\145"+
    "\17\31\2\0\1\31\2\0\1\146\27\0\1\147\1\150"+
    "\1\151\30\0\1\152\70\0\1\153\71\0\1\154\41\0"+
    "\1\155\6\0\1\156\5\0\1\157\45\0\1\160\3\0"+
    "\1\161\3\0\1\137\4\0\1\162\17\0\1\137\1\0"+
    "\2\63\1\0\65\63\2\67\1\0\65\67\21\0\3\70"+
    "\11\0\1\163\32\0\13\71\1\164\54\71\21\0\2\165"+
    "\66\0\3\166\5\0\6\166\62\0\1\167\1\0\1\170"+
    "\10\0\1\171\51\0\1\172\1\0\1\173\56\0\1\31"+
    "\1\0\3\31\5\0\6\31\1\174\21\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\12\31\1\175\15\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\15\31"+
    "\1\176\12\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\21\31\1\177\6\31\2\0\1\31\3\0\1\200"+
    "\17\0\1\31\1\0\3\31\5\0\3\31\1\201\24\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\10\31"+
    "\1\202\17\31\2\0\1\31\2\0\1\203\20\0\1\31"+
    "\1\0\3\31\5\0\20\31\1\204\7\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\1\205\27\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\22\31\1\206"+
    "\5\31\2\0\1\31\23\0\1\31\1\0\3\31\5\0"+
    "\4\31\1\207\23\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\1\210\27\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\15\31\1\211\12\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\16\31\1\212\11\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\13\31"+
    "\1\213\14\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\22\31\1\214\5\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\7\31\1\215\20\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\20\31\1\216\7\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\15\31"+
    "\1\217\12\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\21\31\1\220\6\31\2\0\1\31\3\0\1\221"+
    "\17\0\1\31\1\0\3\31\5\0\4\31\1\222\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\10\31"+
    "\1\223\17\31\2\0\1\31\2\0\1\224\20\0\1\31"+
    "\1\0\3\31\5\0\16\31\1\225\11\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\27\31\1\226\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\12\31\1\227"+
    "\15\31\2\0\1\31\23\0\1\31\1\0\3\31\5\0"+
    "\6\31\1\230\21\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\23\31\1\231\4\31\2\0\1\31\43\0"+
    "\1\232\47\0\1\31\1\0\3\31\5\0\4\31\1\233"+
    "\23\31\2\0\1\31\23\0\1\31\1\0\3\31\5\0"+
    "\1\234\27\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\4\31\1\235\23\31\2\0\1\31\41\0\1\236"+
    "\51\0\1\31\1\0\3\31\5\0\12\31\1\237\5\31"+
    "\1\240\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\22\31\1\241\5\31\2\0\1\31\57\0\1\242"+
    "\43\0\1\243\113\0\1\244\51\0\1\245\112\0\1\246"+
    "\52\0\1\247\100\0\1\250\27\0\1\251\1\0\1\251"+
    "\2\0\3\252\44\0\13\71\1\164\4\71\1\253\47\71"+
    "\53\0\1\254\57\0\1\255\61\0\1\256\61\0\1\257"+
    "\57\0\1\31\1\0\3\31\5\0\12\31\1\260\15\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\16\31"+
    "\1\261\11\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\4\31\1\262\23\31\2\0\1\31\41\0\1\263"+
    "\51\0\1\31\1\0\3\31\5\0\22\31\1\264\5\31"+
    "\2\0\1\31\57\0\1\265\33\0\1\31\1\0\3\31"+
    "\5\0\25\31\1\266\2\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\20\31\1\267\7\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\4\31\1\270\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\271\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\24\31\1\272\3\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\16\31\1\273\11\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\4\31\1\274\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\10\31"+
    "\1\275\17\31\2\0\1\31\2\0\1\276\20\0\1\31"+
    "\1\0\3\31\5\0\4\31\1\277\23\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\21\31\1\300\6\31"+
    "\2\0\1\31\3\0\1\301\17\0\1\31\1\0\3\31"+
    "\5\0\2\31\1\302\25\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\7\31\1\303\20\31\2\0\1\31"+
    "\44\0\1\304\46\0\1\31\1\0\3\31\5\0\23\31"+
    "\1\305\4\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\21\31\1\306\6\31\2\0\1\31\3\0\1\307"+
    "\52\0\1\307\14\0\1\307\17\0\1\31\1\0\3\31"+
    "\5\0\12\31\1\310\15\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\4\31\1\311\23\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\14\31\1\312\13\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\313\7\31\2\0\1\31\51\0\1\314\41\0\1\31"+
    "\1\0\3\31\5\0\14\31\1\315\13\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\2\31\1\316\25\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\23\31"+
    "\1\317\4\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\7\31\1\320\20\31\2\0\1\31\44\0\1\321"+
    "\55\0\1\322\1\0\1\323\74\0\1\324\103\0\1\325"+
    "\53\0\1\326\103\0\1\327\37\0\3\252\117\0\1\330"+
    "\45\0\1\331\111\0\1\332\33\0\1\31\1\0\3\31"+
    "\5\0\1\333\27\31\2\0\1\31\23\0\1\31\1\0"+
    "\3\31\5\0\3\31\1\334\24\31\2\0\1\31\23\0"+
    "\1\31\1\0\3\31\5\0\20\31\1\335\7\31\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\1\336\27\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\4\31"+
    "\1\337\23\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\20\31\1\340\7\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\15\31\1\341\12\31\2\0\1\31"+
    "\52\0\1\342\40\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\343\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\4\31\1\344\23\31\2\0\1\31\41\0\1\345"+
    "\51\0\1\31\1\0\3\31\5\0\4\31\1\346\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\4\31"+
    "\1\347\23\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\4\31\1\350\23\31\2\0\1\31\41\0\1\351"+
    "\51\0\1\31\1\0\3\31\5\0\27\31\1\352\2\0"+
    "\1\31\23\0\1\31\1\0\3\31\5\0\2\31\1\353"+
    "\25\31\2\0\1\31\23\0\1\31\1\0\3\31\5\0"+
    "\1\354\27\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\2\31\1\355\25\31\2\0\1\31\35\0\1\356"+
    "\55\0\1\31\1\0\3\31\5\0\4\31\1\357\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\4\31"+
    "\1\360\23\31\2\0\1\31\55\0\1\361\47\0\1\362"+
    "\71\0\1\363\67\0\1\364\105\0\1\365\70\0\1\366"+
    "\14\0\1\366\40\0\1\367\46\0\1\31\1\0\3\31"+
    "\5\0\20\31\1\370\7\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\16\31\1\371\11\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\22\31\1\372\5\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\10\31"+
    "\1\373\17\31\2\0\1\31\2\0\1\374\20\0\1\31"+
    "\1\0\3\31\5\0\14\31\1\375\13\31\2\0\1\31"+
    "\51\0\1\376\41\0\1\31\1\0\3\31\5\0\25\31"+
    "\1\377\2\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\3\31\1\u0100\24\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\22\31\1\u0101\5\31\2\0\1\31"+
    "\23\0\1\31\1\0\3\31\5\0\12\31\1\u0102\15\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\4\31"+
    "\1\u0103\23\31\2\0\1\31\47\0\1\u0104\73\0\1\u0105"+
    "\73\0\1\u0106\67\0\1\u0107\51\0\1\u0108\73\0\1\u0109"+
    "\24\0\1\u0109\53\0\1\u010a\14\0\1\u010a\46\0\1\u010b"+
    "\40\0\1\31\1\0\3\31\5\0\3\31\1\u010c\24\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\u010d\7\31\2\0\1\31\23\0\1\31\1\0\3\31"+
    "\5\0\4\31\1\u010e\23\31\2\0\1\31\23\0\1\31"+
    "\1\0\3\31\5\0\2\31\1\u010f\25\31\2\0\1\31"+
    "\37\0\1\u0110\53\0\1\31\1\0\3\31\5\0\21\31"+
    "\1\u0111\6\31\2\0\1\31\3\0\1\u0112\52\0\1\u0112"+
    "\14\0\1\u0112\17\0\1\31\1\0\3\31\5\0\10\31"+
    "\1\u0113\17\31\2\0\1\31\2\0\1\u0114\20\0\1\31"+
    "\1\0\3\31\5\0\23\31\1\u0115\4\31\2\0\1\31"+
    "\55\0\1\u0116\53\0\1\u0117\64\0\1\u0118\71\0\1\u0119"+
    "\52\0\1\31\1\0\3\31\5\0\4\31\1\u011a\23\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\21\31"+
    "\1\u011b\6\31\2\0\1\31\3\0\1\u011c\52\0\1\u011c"+
    "\14\0\1\u011c\17\0\1\31\1\0\3\31\5\0\20\31"+
    "\1\u011d\7\31\2\0\1\31\41\0\1\u011e\106\0\1\u011f"+
    "\32\0\1\31\1\0\3\31\5\0\22\31\1\u0120\5\31"+
    "\2\0\1\31\23\0\1\31\1\0\3\31\5\0\4\31"+
    "\1\u0121\23\31\2\0\1\31\41\0\1\u0122\51\0\1\31"+
    "\1\0\3\31\5\0\4\31\1\u0123\23\31\2\0\1\31"+
    "\57\0\1\u0124\67\0\1\u0125\51\0\1\u0126\32\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11816];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\2\11\1\1\2\11"+
    "\37\1\1\11\2\1\1\0\1\11\1\1\1\11\1\0"+
    "\1\11\2\1\5\0\2\11\1\1\2\11\34\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\11\1\1\5\11\7\0"+
    "\2\1\3\0\1\1\1\11\4\1\1\0\2\1\1\0"+
    "\15\1\1\0\2\1\1\0\5\1\1\0\3\1\1\11"+
    "\3\1\1\0\1\1\2\0\1\11\3\0\1\1\1\11"+
    "\3\0\1\11\3\1\1\11\1\1\1\11\10\1\1\0"+
    "\2\1\1\0\2\1\1\11\2\1\1\0\4\1\1\0"+
    "\4\1\3\11\7\0\7\1\1\0\2\1\1\11\3\1"+
    "\1\11\4\1\1\0\2\1\7\0\4\1\1\0\1\1"+
    "\1\0\5\1\1\11\2\0\2\11\1\0\1\11\1\0"+
    "\4\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\2\1\1\0\1\1\2\0\2\1"+
    "\1\11\1\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _RexxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 85: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 3:
            { return TERMINATOR;
            }
          // fall through
          case 87: break;
          case 4:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 88: break;
          case 5:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 89: break;
          case 6:
            { return TOKEN_LEFT;
            }
          // fall through
          case 90: break;
          case 7:
            { return TOKEN_RIGHT;
            }
          // fall through
          case 91: break;
          case 8:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 92: break;
          case 9:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 93: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 94: break;
          case 11:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 95: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 96: break;
          case 13:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 97: break;
          case 14:
            { return NUMBER_INT;
            }
          // fall through
          case 98: break;
          case 15:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 99: break;
          case 16:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 100: break;
          case 17:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 101: break;
          case 18:
            { return IDENTIFIER;
            }
          // fall through
          case 102: break;
          case 19:
            { return OPERATOR_OR;
            }
          // fall through
          case 103: break;
          case 20:
            { return TILDE;
            }
          // fall through
          case 104: break;
          case 21:
            { return STRING;
            }
          // fall through
          case 105: break;
          case 22:
            { return SHEBANG;
            }
          // fall through
          case 106: break;
          case 23:
            { return OPERATOR_AND;
            }
          // fall through
          case 107: break;
          case 24:
            { return OPERATOR_POWER;
            }
          // fall through
          case 108: break;
          case 25:
            { return LINE_COMMENT;
            }
          // fall through
          case 109: break;
          case 26:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 110: break;
          case 27:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 111: break;
          case 28:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 112: break;
          case 29:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 113: break;
          case 30:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 114: break;
          case 31:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 115: break;
          case 32:
            { return KEYWORD_DO;
            }
          // fall through
          case 116: break;
          case 33:
            { return KEYWORD_IF;
            }
          // fall through
          case 117: break;
          case 34:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 118: break;
          case 35:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 119: break;
          case 36:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 120: break;
          case 37:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 121: break;
          case 38:
            { return OPERATOR_XOR;
            }
          // fall through
          case 122: break;
          case 39:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 123: break;
          case 40:
            { return NUMBER_BINARY;
            }
          // fall through
          case 124: break;
          case 41:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 125: break;
          case 42:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 126: break;
          case 43:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 127: break;
          case 44:
            { return KEYWORD_ARG;
            }
          // fall through
          case 128: break;
          case 45:
            { return KEYWORD_END;
            }
          // fall through
          case 129: break;
          case 46:
            { return KEYWORD_NOP;
            }
          // fall through
          case 130: break;
          case 47:
            { return KEYWORD_SAY;
            }
          // fall through
          case 131: break;
          case 48:
            { return KEYWORD_USE;
            }
          // fall through
          case 132: break;
          case 49:
            { return KEYWORD_VAR;
            }
          // fall through
          case 133: break;
          case 50:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 134: break;
          case 51:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 135: break;
          case 52:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 136: break;
          case 53:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 137: break;
          case 54:
            { return KEYWORD_CALL;
            }
          // fall through
          case 138: break;
          case 55:
            { return KEYWORD_DROP;
            }
          // fall through
          case 139: break;
          case 56:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 140: break;
          case 57:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 141: break;
          case 58:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 142: break;
          case 59:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 143: break;
          case 60:
            { return KEYWORD_THEN;
            }
          // fall through
          case 144: break;
          case 61:
            { return KEYWORD_WITH;
            }
          // fall through
          case 145: break;
          case 62:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 146: break;
          case 63:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 147: break;
          case 64:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 148: break;
          case 65:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 149: break;
          case 66:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 150: break;
          case 67:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 151: break;
          case 68:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 152: break;
          case 69:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 153: break;
          case 70:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 154: break;
          case 71:
            { return KEYWORD_VALUE;
            }
          // fall through
          case 155: break;
          case 72:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 156: break;
          case 73:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 157: break;
          case 74:
            { return KEYWORD_SOURCE;
            }
          // fall through
          case 158: break;
          case 75:
            { return KEYWORD_CLASS;
            }
          // fall through
          case 159: break;
          case 76:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 160: break;
          case 77:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 161: break;
          case 78:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 162: break;
          case 79:
            { return KEYWORD_OPTIONS;
            }
          // fall through
          case 163: break;
          case 80:
            { return KEYWORD_METHOD;
            }
          // fall through
          case 164: break;
          case 81:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 165: break;
          case 82:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 166: break;
          case 83:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 167: break;
          case 84:
            { return KEYWORD_ATTRIBUTE;
            }
          // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
