// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/Parse.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;


public class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\1\1\3\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\7\23\1\24\1\0\1\25\1\26\1\27\2\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\0\1\61\1\0\1\62\1\63\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\0"+
    "\1\64\1\0\1\65\6\0\1\1\32\0\1\1\217\0"+
    "\2\66\115\0\1\67\u0200\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\1\1\14"+
    "\1\15\1\16\25\17\1\20\1\1\1\21\1\22\2\1"+
    "\1\0\1\23\1\24\1\25\1\0\1\26\1\27\1\30"+
    "\5\0\1\31\1\32\1\33\1\34\1\35\10\17\1\36"+
    "\1\0\12\17\1\37\1\17\1\0\10\17\1\40\6\17"+
    "\1\0\5\17\1\41\21\17\1\0\1\17\1\42\4\17"+
    "\1\0\4\17\1\0\1\43\1\44\1\45\1\20\1\46"+
    "\1\47\1\40\11\0\1\50\1\51\3\0\1\52\1\53"+
    "\1\17\2\54\3\17\1\55\2\17\1\56\1\17\1\0"+
    "\1\57\1\60\2\17\1\0\7\17\1\61\1\62\3\17"+
    "\1\0\2\17\1\0\1\17\1\0\1\63\4\17\1\0"+
    "\1\17\1\64\14\17\1\0\2\17\1\0\1\17\1\65"+
    "\2\17\1\66\10\17\1\0\2\17\1\0\4\17\1\0"+
    "\1\17\1\67\1\17\1\0\5\17\1\0\5\17\1\70"+
    "\1\17\1\0\1\70\1\17\1\71\3\17\1\0\1\17"+
    "\1\0\1\72\4\0\1\67\5\0\1\73\1\74\3\0"+
    "\1\75\3\17\1\0\10\17\3\0\1\76\2\77\4\17"+
    "\1\0\4\17\1\0\1\17\1\0\2\17\1\100\2\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\101\2\102\1\17"+
    "\1\0\1\17\1\103\1\17\1\103\1\17\1\0\1\17"+
    "\1\104\1\17\1\105\4\17\1\106\5\17\1\107\1\17"+
    "\1\0\1\17\1\0\1\17\1\110\3\17\1\0\2\17"+
    "\1\111\1\17\1\0\1\17\1\112\2\113\2\17\1\0"+
    "\4\17\1\0\2\17\1\0\3\17\1\114\2\17\2\0"+
    "\1\115\1\17\1\116\1\17\1\0\2\17\1\0\2\17"+
    "\1\0\1\117\1\17\1\0\2\120\1\121\1\122\3\0"+
    "\1\106\3\0\1\114\4\0\3\17\1\0\3\17\1\123"+
    "\1\17\1\0\1\17\1\124\1\17\1\0\1\124\1\0"+
    "\1\17\1\0\5\17\1\125\1\0\1\125\2\126\2\17"+
    "\1\0\2\17\2\0\1\17\1\0\4\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\127\1\17\1\0"+
    "\2\130\3\17\1\131\1\132\1\133\2\17\1\134\1\135"+
    "\1\17\1\0\1\136\1\137\1\17\1\0\4\17\1\0"+
    "\2\17\2\140\1\17\1\141\2\142\1\17\1\143\1\17"+
    "\1\0\2\17\1\0\1\17\1\0\1\17\1\0\5\17"+
    "\2\0\1\144\2\145\1\146\2\147\1\150\1\17\1\0"+
    "\2\151\1\132\1\133\10\0\1\152\1\17\1\0\1\17"+
    "\1\0\1\17\1\153\2\17\1\0\1\154\1\155\1\154"+
    "\1\155\1\17\1\0\1\156\1\157\1\17\1\160\1\17"+
    "\1\160\2\17\1\0\2\17\2\0\2\161\2\17\1\0"+
    "\1\17\1\162\1\17\1\162\1\17\1\0\2\163\1\17"+
    "\1\0\1\17\2\164\1\17\1\165\3\17\2\166\1\17"+
    "\1\0\1\167\1\170\1\17\1\0\1\17\1\0\1\17"+
    "\1\171\3\17\1\0\1\17\1\172\1\0\1\17\1\0"+
    "\1\17\1\0\1\173\1\174\1\175\1\176\2\177\1\174"+
    "\1\17\3\0\1\173\1\175\1\176\1\0\1\200\1\0"+
    "\1\17\1\0\2\201\3\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\202\1\203\1\17\1\0\2\17\2\0\1\204"+
    "\1\17\1\0\1\17\1\205\1\17\1\0\1\17\1\0"+
    "\1\17\1\206\1\207\1\17\1\210\2\211\2\212\2\213"+
    "\1\17\1\0\1\17\1\214\1\17\1\0\1\17\1\0"+
    "\2\215\1\17\1\0\2\216\1\0\1\210\1\0\1\217"+
    "\1\17\1\0\1\220\2\17\1\0\2\221\1\17\1\0"+
    "\1\17\1\0\1\222\2\223\1\222\2\224\1\225\1\17"+
    "\1\0\1\17\1\0\3\17\1\0\1\17\2\226\2\227"+
    "\1\17\3\0\1\17\1\0\2\230\2\231\2\232\2\233"+
    "\1\17\1\0\1\17\1\0\1\234\1\235\2\236\1\237"+
    "\1\17\1\0\1\235\1\0\2\240\1\17\1\0\1\17"+
    "\1\0\2\241\1\242\2\243\2\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\70\0\u0118\0\u0150"+
    "\0\70\0\70\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\70\0\u08f8\0\u0930\0\250"+
    "\0\70\0\u0968\0\70\0\u0150\0\70\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u01f8\0\u0a48\0\u0a80\0\u0ab8\0\70\0\70\0\u0af0\0\70"+
    "\0\70\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0540\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0540\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u0540\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u0540\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u0540\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\70\0\u1a78\0\70\0\u1ab0"+
    "\0\70\0\70\0\70\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u0a48\0\u0a80\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\70\0\u1dc0\0\u0540\0\70\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u0540\0\u1f48\0\u1f80\0\u0540"+
    "\0\u0540\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u0540\0\u0540\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u0540\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u0540"+
    "\0\u2920\0\u2958\0\u0540\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u0540\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u0540\0\u3058\0\u3090\0\70\0\u30c8"+
    "\0\u0540\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250"+
    "\0\u3288\0\u32c0\0\u32f8\0\u3330\0\70\0\u3368\0\u33a0\0\u33d8"+
    "\0\u3410\0\u3448\0\u3448\0\u0a10\0\u3480\0\u34b8\0\u34f0\0\70"+
    "\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0"+
    "\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u0540"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8"+
    "\0\u0540\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40"+
    "\0\u0540\0\u0540\0\70\0\u3d78\0\u3db0\0\u3de8\0\u0540\0\u3e20"+
    "\0\70\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u0540\0\u3f70"+
    "\0\u3fa8\0\u3fe0\0\u4018\0\u0540\0\u4050\0\u4088\0\u40c0\0\u40f8"+
    "\0\u4130\0\u0540\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u0540"+
    "\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398\0\u0540\0\u43d0"+
    "\0\u4408\0\u4440\0\u0540\0\u0540\0\70\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8"+
    "\0\u46e0\0\u4718\0\u4750\0\u0540\0\u4788\0\u47c0\0\u47f8\0\u4830"+
    "\0\u0540\0\u4868\0\u0540\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980"+
    "\0\u49b8\0\u49f0\0\u4a28\0\u0540\0\u4a60\0\u4a98\0\u0540\0\70"+
    "\0\70\0\70\0\u4ad0\0\u4b08\0\u4b40\0\70\0\u4b78\0\u4bb0"+
    "\0\u4be8\0\70\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38"+
    "\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u0540\0\u4e88\0\u4ec0"+
    "\0\u4ef8\0\u0540\0\u4f30\0\u4f68\0\70\0\u4fa0\0\u4fd8\0\u5010"+
    "\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u0540\0\u5160\0\70"+
    "\0\u0540\0\70\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0"+
    "\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470"+
    "\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630"+
    "\0\u5668\0\u0540\0\70\0\u56a0\0\u56d8\0\u5710\0\u0540\0\u0540"+
    "\0\u0540\0\u5748\0\u5780\0\u0540\0\u0540\0\u57b8\0\u57f0\0\u0540"+
    "\0\u0540\0\u5828\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978"+
    "\0\u59b0\0\u59e8\0\u0540\0\70\0\u5a20\0\u0540\0\u0540\0\70"+
    "\0\u5a58\0\u0540\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8"+
    "\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68"+
    "\0\u5da0\0\u5dd8\0\u0540\0\u0540\0\70\0\u0540\0\u0540\0\70"+
    "\0\u0540\0\u5e10\0\u5e48\0\u0540\0\70\0\70\0\70\0\u5e80"+
    "\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u0540"+
    "\0\u6040\0\u6078\0\u60b0\0\u60e8\0\u6120\0\u0540\0\u6158\0\u6190"+
    "\0\u61c8\0\u0540\0\u0540\0\70\0\70\0\u6200\0\u6238\0\u0540"+
    "\0\u0540\0\u6270\0\u0540\0\u62a8\0\70\0\u62e0\0\u6318\0\u6350"+
    "\0\u6388\0\u63c0\0\u63f8\0\u6430\0\u0540\0\70\0\u6468\0\u64a0"+
    "\0\u64d8\0\u6510\0\u0540\0\u6548\0\70\0\u6580\0\u65b8\0\u0540"+
    "\0\70\0\u65f0\0\u6628\0\u6660\0\u0540\0\70\0\u6698\0\u0540"+
    "\0\u66d0\0\u6708\0\u6740\0\u0540\0\70\0\u6778\0\u67b0\0\u0540"+
    "\0\u0540\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8\0\u0540\0\u6900"+
    "\0\u6938\0\u6970\0\u69a8\0\u69e0\0\u0540\0\u6a18\0\u6a50\0\u6a88"+
    "\0\u6ac0\0\u6af8\0\u0540\0\u0540\0\u0540\0\u0540\0\u0540\0\70"+
    "\0\70\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\70\0\70\0\70"+
    "\0\u6c10\0\70\0\u6c48\0\u6c80\0\u6cb8\0\u0540\0\70\0\u6cf0"+
    "\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08\0\u6e40\0\u6e78\0\u0540"+
    "\0\u0540\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8\0\u0540"+
    "\0\u7000\0\u7038\0\u7070\0\u0540\0\u70a8\0\u70e0\0\u7118\0\u7150"+
    "\0\u7188\0\u0540\0\u0540\0\u71c0\0\u0540\0\u0540\0\70\0\u0540"+
    "\0\70\0\u0540\0\70\0\u71f8\0\u7230\0\u7268\0\u0540\0\u72a0"+
    "\0\u72d8\0\u7310\0\u7348\0\u0540\0\70\0\u7380\0\u73b8\0\u0540"+
    "\0\70\0\u73f0\0\70\0\u7428\0\70\0\u7460\0\u7498\0\u0540"+
    "\0\u74d0\0\u7508\0\u7540\0\u0540\0\70\0\u7578\0\u75b0\0\u75e8"+
    "\0\u7620\0\u0540\0\u0540\0\70\0\70\0\u0540\0\70\0\u0540"+
    "\0\u7658\0\u7690\0\u76c8\0\u7700\0\u7738\0\u7770\0\u77a8\0\u77e0"+
    "\0\u7818\0\u0540\0\70\0\u0540\0\70\0\u7850\0\u7888\0\u78c0"+
    "\0\u78f8\0\u7930\0\u7968\0\u0540\0\70\0\u0540\0\70\0\u0540"+
    "\0\70\0\u0540\0\70\0\u79a0\0\u79d8\0\u7a10\0\u7a48\0\u0540"+
    "\0\u0540\0\u0540\0\70\0\u0540\0\u7a80\0\u7ab8\0\70\0\u7af0"+
    "\0\u0540\0\70\0\u7b28\0\u7b60\0\u7b98\0\u7bd0\0\u0540\0\70"+
    "\0\70\0\u0540\0\70\0\u0540\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\3\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\34\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\3\34\1\52\1\53\1\2\1\54"+
    "\1\55\1\56\1\57\71\0\2\3\65\0\2\60\1\0"+
    "\1\60\1\61\63\60\3\0\1\62\73\0\1\63\60\0"+
    "\2\64\1\0\5\64\1\61\57\64\13\0\1\65\71\0"+
    "\1\66\72\0\4\67\57\0\1\70\72\0\1\71\1\0"+
    "\4\20\5\0\1\72\24\0\1\73\27\0\1\71\1\0"+
    "\4\20\70\0\1\74\72\0\1\75\65\0\1\76\1\77"+
    "\66\0\1\100\1\101\57\0\1\34\1\0\4\34\4\0"+
    "\1\34\1\102\1\34\1\103\10\34\1\104\1\34\1\105"+
    "\1\34\1\106\1\34\1\107\6\34\2\0\1\34\22\0"+
    "\1\34\1\0\2\34\1\110\1\34\4\0\10\34\1\111"+
    "\16\34\1\112\1\34\2\0\1\34\2\0\1\113\17\0"+
    "\1\34\1\0\2\34\1\114\1\34\4\0\1\115\3\34"+
    "\1\116\2\34\1\117\2\34\1\120\2\34\1\121\13\34"+
    "\2\0\1\34\22\0\1\34\1\0\2\34\1\122\1\34"+
    "\4\0\1\123\3\34\1\124\3\34\1\125\4\34\1\126"+
    "\2\34\1\127\10\34\2\0\1\34\2\0\1\130\17\0"+
    "\1\34\1\0\4\34\4\0\12\34\1\131\1\34\1\132"+
    "\3\34\1\133\5\34\1\134\2\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\135\14\34\1\136\5\34"+
    "\1\137\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\140\5\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\31\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\5\34\1\141\6\34\1\142\5\34"+
    "\1\143\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\1\144\3\34\1\145\3\34\1\146\4\34\1\147"+
    "\13\34\2\0\1\34\2\0\1\150\17\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\151\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\152\14\34\1\153\5\34"+
    "\1\154\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\5\34\1\155\6\34\1\156\1\34\1\157\3\34"+
    "\1\160\1\161\1\162\4\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\1\163\17\34\1\164\2\34\1\165"+
    "\5\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\166\5\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\1\167\3\34\1\170\10\34\1\171\13\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\1\172"+
    "\1\34\1\173\1\34\1\174\3\34\1\175\4\34\1\176"+
    "\4\34\1\177\6\34\2\0\1\34\2\0\1\200\17\0"+
    "\1\34\1\0\4\34\4\0\7\34\1\201\5\34\1\202"+
    "\2\34\1\203\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\14\34\1\204\1\34\1\205\2\34\1\206"+
    "\7\34\2\0\1\34\3\0\1\207\16\0\1\34\1\0"+
    "\4\34\4\0\1\210\3\34\1\211\24\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\7\34\1\212\1\213"+
    "\20\34\2\0\1\34\2\0\1\214\26\0\1\215\1\216"+
    "\1\217\31\0\1\220\70\0\1\221\71\0\1\222\40\0"+
    "\1\223\6\0\1\224\5\0\1\225\45\0\1\226\1\0"+
    "\1\227\1\0\1\230\3\0\1\200\4\0\1\231\4\0"+
    "\1\232\13\0\1\200\1\0\2\62\1\0\65\62\2\66"+
    "\1\0\65\66\20\0\4\67\10\0\1\233\33\0\13\70"+
    "\1\234\54\70\20\0\2\235\66\0\4\236\4\0\6\236"+
    "\62\0\1\237\1\0\1\240\10\0\1\241\51\0\1\242"+
    "\1\0\1\243\56\0\1\34\1\0\4\34\4\0\1\34"+
    "\1\244\17\34\1\245\7\34\2\0\1\34\3\0\1\246"+
    "\16\0\1\34\1\0\4\34\4\0\3\34\1\247\25\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\250\14\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\16\34\1\251\12\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\6\34\1\252\11\34\1\253\10\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\254\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\26\34\1\255\2\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\256\6\34\2\0\1\34"+
    "\56\0\1\257\33\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\260\22\34\1\261\2\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\12\34\1\262\6\34\1\263\7\34"+
    "\2\0\1\34\3\0\1\264\16\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\265\14\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\1\266\30\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\267\30\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\13\34\1\270\1\271"+
    "\1\34\1\272\4\34\1\273\5\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\274\23\34\1\275"+
    "\2\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\276\6\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\12\34\1\277\6\34\1\300\7\34\2\0"+
    "\1\34\3\0\1\301\16\0\1\34\1\0\4\34\4\0"+
    "\6\34\1\302\22\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\15\34\1\303\13\34\2\0\1\34\42\0"+
    "\1\304\47\0\1\34\1\0\4\34\4\0\21\34\1\305"+
    "\7\34\2\0\1\34\3\0\1\306\16\0\1\34\1\0"+
    "\4\34\4\0\3\34\1\307\2\34\1\310\22\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\20\34\1\311"+
    "\10\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\312\5\34\1\313\12\34\2\0\1\34\2\0"+
    "\1\314\17\0\1\34\1\0\4\34\4\0\12\34\1\315"+
    "\16\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\20\34\1\316\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\30\34\1\317\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\1\320\30\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\3\34\1\321\12\34\1\322"+
    "\3\34\1\323\6\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\324\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\34\1\325\27\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\1\326\30\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\327\14\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\2\34\1\330\12\34\1\331\7\34\1\332\3\34"+
    "\2\0\1\34\50\0\1\333\41\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\334\1\335\6\34\2\0\1\34\3\0"+
    "\1\336\16\0\1\34\1\0\4\34\4\0\13\34\1\337"+
    "\15\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\16\34\1\340\1\34\1\341\10\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\342\15\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\5\34\1\343"+
    "\23\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\344\6\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\7\34\1\345\21\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\346\6\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\347"+
    "\24\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\20\34\1\350\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\15\34\1\351\13\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\12\34\1\352\6\34\1\353"+
    "\7\34\2\0\1\34\3\0\1\354\16\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\355\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\10\34\1\356\20\34\2\0"+
    "\1\34\2\0\1\357\17\0\1\34\1\0\4\34\4\0"+
    "\16\34\1\360\1\361\1\34\1\362\1\363\6\34\2\0"+
    "\1\34\3\0\1\364\16\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\365\5\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\27\34\1\366\1\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\10\34\1\367\20\34\2\0"+
    "\1\34\2\0\1\370\17\0\1\34\1\0\4\34\4\0"+
    "\12\34\1\371\16\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\6\34\1\372\22\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\373\5\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\374"+
    "\13\34\1\375\10\34\2\0\1\34\42\0\1\376\47\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\377\24\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\1\u0100\22\34"+
    "\1\u0101\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\22\34\1\u0102\6\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u0103\12\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u0104\3\34"+
    "\1\u0105\20\34\2\0\1\34\2\0\1\u0106\35\0\1\u0107"+
    "\3\0\1\u0106\25\0\1\u0106\17\0\1\34\1\0\4\34"+
    "\4\0\12\34\1\u0108\5\34\1\u0109\10\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\20\34\1\u010a\10\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u010b\3\34\1\u010c\20\34\2\0\1\34\2\0\1\u010d"+
    "\17\0\1\34\1\0\4\34\4\0\22\34\1\u010e\6\34"+
    "\2\0\1\34\56\0\1\u010f\43\0\1\u0110\122\0\1\220"+
    "\41\0\1\u0111\12\0\1\u0112\3\0\1\u0113\51\0\1\u0114"+
    "\112\0\1\u0115\50\0\1\370\25\0\1\370\43\0\1\u0116"+
    "\100\0\1\u0117\50\0\1\u0118\13\0\1\u0119\33\0\2\u011a"+
    "\2\0\4\u011b\57\0\1\234\3\0\1\u011c\122\0\1\u011d"+
    "\57\0\1\u011e\61\0\1\u011f\61\0\1\u0120\57\0\1\34"+
    "\1\0\4\34\4\0\20\34\1\u0121\10\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\10\34\1\u0122\7\34"+
    "\1\u0123\10\34\2\0\1\34\2\0\1\u0124\17\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u0125\13\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u0126\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u0127\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\1\u0128\30\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\20\34\1\u0129\10\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\u012a\14\34\1\u012b\10\34"+
    "\1\u012c\2\34\2\0\1\34\34\0\1\u012d\14\0\1\u012e"+
    "\10\0\1\u012f\27\0\1\34\1\0\4\34\4\0\12\34"+
    "\1\u0130\16\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0131\24\34\2\0\1\34\40\0\1\u0132"+
    "\51\0\1\34\1\0\4\34\4\0\22\34\1\u0133\6\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u0134\3\34\1\u0135\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0136\7\34\2\0\1\34"+
    "\3\0\1\u0137\16\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u0138\12\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\3\34\1\u0139\15\34\1\u013a\1\u013b\6\34\2\0"+
    "\1\34\3\0\1\u013c\16\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u013d\20\34\2\0\1\34\2\0\1\u013e\17\0"+
    "\1\34\1\0\4\34\4\0\14\34\1\u013f\14\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\1\u0140\3\34"+
    "\1\u0141\24\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0142\3\34\1\u0143\3\34\2\0\1\34"+
    "\3\0\1\u0144\16\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u0145\26\34\2\0\1\34\36\0\1\u0146\53\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u0147\20\34\2\0\1\34"+
    "\2\0\1\u0148\17\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u0149\12\34\2\0\1\34\44\0\1\u0148\25\0\1\u0148"+
    "\17\0\1\34\1\0\4\34\4\0\4\34\1\u014a\24\34"+
    "\2\0\1\34\40\0\1\u014b\51\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u014c\20\34\2\0\1\34\2\0\1\u014d"+
    "\17\0\1\34\1\0\4\34\4\0\15\34\1\u014e\13\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u014f\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u0150\13\34\2\0\1\34\56\0\1\u0151"+
    "\33\0\1\34\1\0\4\34\4\0\21\34\1\u0152\7\34"+
    "\2\0\1\34\3\0\1\u0153\16\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0154\6\34\1\u0155\11\34\1\u0156\3\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\30\34"+
    "\1\u0157\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\20\34\1\u0158\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0159\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u015a\5\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\u015b"+
    "\24\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\u015c\4\34\1\u015d\10\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u015e\24\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\24\34\1\u015f"+
    "\4\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u0160\24\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\1\u0161\30\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u0162\12\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u0163\24\34"+
    "\2\0\1\34\40\0\1\u0164\51\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0165\7\34\2\0\1\34\3\0\1\u0166"+
    "\16\0\1\34\1\0\4\34\4\0\7\34\1\u0167\21\34"+
    "\2\0\1\34\55\0\1\u0166\15\0\1\u0166\16\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u0168\24\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\13\34\1\u0169\15\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u016a\24\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u016b\20\34\2\0\1\34\2\0\1\u016c"+
    "\17\0\1\34\1\0\4\34\4\0\4\34\1\u016d\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u016e\12\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u016f\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0170\7\34\2\0\1\34"+
    "\3\0\1\u0171\16\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u0172\26\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\12\34\1\u0173\16\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\7\34\1\u0174\21\34\2\0\1\34"+
    "\43\0\1\u0175\46\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u0176\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0177\7\34\2\0\1\34\3\0\1\u0178"+
    "\51\0\1\u0178\15\0\1\u0178\16\0\1\34\1\0\4\34"+
    "\4\0\12\34\1\u0179\16\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u017a\5\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\15\34\1\u017b\13\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u017c\5\34\2\0\1\34\51\0\1\u017d\40\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u017e\6\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u017f\24\34"+
    "\2\0\1\34\40\0\1\u0180\51\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0181\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\14\34\1\u0182\14\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\20\34\1\u0183\10\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\13\34"+
    "\1\u0184\15\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0185\3\34\1\u0186\20\34\2\0\1\34"+
    "\2\0\1\u0187\45\0\1\u0188\41\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u0189\14\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\2\34\1\u018a\26\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u018b\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u018c\20\34\2\0\1\34\2\0\1\u018d\17\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u018e\24\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\14\34\1\u018f\14\34"+
    "\2\0\1\34\50\0\1\u0190\41\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u0191\5\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0192\7\34\2\0\1\34"+
    "\3\0\1\u0193\16\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u0194\14\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\12\34\1\u0195\16\34\2\0\1\34\46\0\1\u0196"+
    "\43\0\1\34\1\0\4\34\4\0\7\34\1\u0197\21\34"+
    "\2\0\1\34\43\0\1\u0198\55\0\1\u0199\1\0\1\u019a"+
    "\74\0\1\u019b\106\0\1\u019c\50\0\1\u019d\76\0\1\u019e"+
    "\4\0\1\u019f\53\0\1\u01a0\103\0\1\u01a1\62\0\1\u01a2"+
    "\60\0\1\u01a3\3\0\1\u0187\25\0\1\u0187\21\0\4\u011b"+
    "\116\0\1\u01a4\45\0\1\u01a5\111\0\1\u01a6\33\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u01a7\24\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\22\34\1\u01a8\6\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01a9\24\34\2\0\1\34\56\0\1\u01aa\33\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u01ab\6\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\14\34\1\u01ac\14\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\13\34"+
    "\1\u01ad\15\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\27\34\1\u01ae\1\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u01af\20\34\2\0\1\34"+
    "\2\0\1\u01b0\17\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u01b1\14\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u01b2\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u01b3\13\34\2\0\1\34"+
    "\50\0\1\u01b4\73\0\1\u01b5\64\0\1\u01b6\40\0\1\34"+
    "\1\0\4\34\4\0\12\34\1\u01b7\16\34\2\0\1\34"+
    "\46\0\1\u01b8\43\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01b9\13\34\1\u01ba\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\6\34\1\u01bb\22\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\10\34\1\u01bc\4\34"+
    "\1\u01bd\3\34\1\u01be\7\34\2\0\1\34\2\0\1\u01bf"+
    "\1\u01c0\16\0\1\34\1\0\4\34\4\0\21\34\1\u01c1"+
    "\7\34\2\0\1\34\3\0\1\u01c2\51\0\1\u01c2\15\0"+
    "\1\u01c2\16\0\1\34\1\0\4\34\4\0\1\u01c3\30\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u01c4\20\34\2\0\1\34\2\0\1\u01c5\17\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u01c6\6\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\10\34\1\u01c7\20\34"+
    "\2\0\1\34\2\0\1\u01c8\53\0\1\u01c9\33\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u01ca\24\34\2\0\1\34"+
    "\40\0\1\u01cb\51\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u01cc\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\22\34\1\u01cd\6\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u01ce\6\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\15\34\1\u01cf\13\34"+
    "\2\0\1\34\56\0\1\u01d0\33\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u01d1\10\34\2\0\1\34\54\0\1\u01d2"+
    "\35\0\1\34\1\0\4\34\4\0\22\34\1\u01d3\6\34"+
    "\2\0\1\34\56\0\1\u01d4\33\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u01d5\14\34\2\0\1\34\50\0\1\u01d6"+
    "\41\0\1\34\1\0\4\34\4\0\20\34\1\u01d7\10\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u01d8\7\34\2\0\1\34\3\0\1\u01d9\16\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u01da\24\34\2\0\1\34"+
    "\40\0\1\u01db\51\0\1\34\1\0\4\34\4\0\24\34"+
    "\1\u01dc\4\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\1\u01dd\30\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\1\u01de\30\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\3\34\1\u01df\25\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\26\34\1\u01e0\2\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u01e1\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u01e2\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\1\u01e3\30\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\12\34\1\u01e4\16\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\u01e5"+
    "\24\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u01e6\20\34\2\0\1\34\2\0\1\u01e7\17\0"+
    "\1\34\1\0\4\34\4\0\12\34\1\u01e8\16\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\20\34\1\u01e9"+
    "\10\34\2\0\1\34\44\0\1\u01e7\25\0\1\u01e7\17\0"+
    "\1\34\1\0\4\34\4\0\1\u01ea\30\34\2\0\1\34"+
    "\34\0\1\u01eb\55\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u01ec\13\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\1\u01ed\30\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\20\34\1\u01ee\10\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\15\34\1\u01ef\13\34\2\0"+
    "\1\34\51\0\1\u01f0\40\0\1\34\1\0\4\34\4\0"+
    "\20\34\1\u01f1\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u01f2\5\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01f3\24\34\2\0"+
    "\1\34\40\0\1\u01f4\51\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u01f5\24\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u01f6\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01f7\24\34\2\0"+
    "\1\34\40\0\1\u01f8\51\0\1\34\1\0\4\34\4\0"+
    "\1\u01f9\26\34\1\u01fa\1\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u01fb\20\34\2\0\1\34"+
    "\2\0\1\u01fc\17\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u01fd\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u01fe\10\34\2\0\1\34\57\0\1\u01ff"+
    "\32\0\1\34\1\0\4\34\4\0\10\34\1\u0200\20\34"+
    "\2\0\1\34\2\0\1\u0201\17\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u0202\14\34\2\0\1\34\50\0\1\u0203"+
    "\41\0\1\34\1\0\4\34\4\0\2\34\1\u0204\26\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\1\u0205"+
    "\30\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\u0206\26\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\1\u0207\30\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\2\34\1\u0208\26\34\2\0\1\34"+
    "\36\0\1\u0209\65\0\1\u020a\55\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u020b\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\12\34\1\u020c\16\34\2\0\1\34"+
    "\46\0\1\u020d\43\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u020e\10\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\6\34\1\u020f\22\34\2\0\1\34\42\0\1\u0210"+
    "\47\0\1\34\1\0\4\34\4\0\4\34\1\u0211\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u0212\20\34\2\0\1\34\2\0\1\u0213\41\0\1\u0213"+
    "\25\0\1\u0213\17\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u0214\24\34\2\0\1\34\40\0\1\u0215\111\0\1\u0216"+
    "\63\0\1\u0217\65\0\1\u0218\47\0\1\u0219\71\0\1\u021a"+
    "\67\0\1\u021b\65\0\1\u021c\107\0\1\u021d\70\0\1\u021e"+
    "\15\0\1\u021e\37\0\1\u021f\46\0\1\34\1\0\4\34"+
    "\4\0\24\34\1\u0220\4\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u0221\20\34\2\0\1\34"+
    "\2\0\1\u0222\17\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0223\7\34\2\0\1\34\3\0\1\u0224\40\0\1\u0222"+
    "\25\0\1\u0222\17\0\1\34\1\0\4\34\4\0\1\u0225"+
    "\30\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\u0226\25\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0227\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\1\34\1\u0228\27\34\2\0"+
    "\1\34\35\0\1\u0229\54\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\u022a\25\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\20\34\1\u022b\10\34\2\0\1\34\37\0"+
    "\1\u022c\104\0\1\u022d\35\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u022e\24\34\2\0\1\34\40\0\1\u022f\51\0"+
    "\1\34\1\0\4\34\4\0\20\34\1\u0230\10\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\u0231"+
    "\24\34\2\0\1\34\22\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u0232\24\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\14\34\1\u0233\14\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u0234\5\34\2\0"+
    "\1\34\50\0\1\u0235\41\0\1\34\1\0\4\34\4\0"+
    "\20\34\1\u0236\10\34\2\0\1\34\22\0\1\34\1\0"+
    "\4\34\4\0\22\34\1\u0237\6\34\2\0\1\34\56\0"+
    "\1\u0238\33\0\1\34\1\0\4\34\4\0\1\u0239\30\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u023a\14\34\2\0\1\34\50\0\1\u023b\53\0\1\u023c"+
    "\55\0\1\34\1\0\4\34\4\0\21\34\1\u023d\7\34"+
    "\2\0\1\34\3\0\1\u023e\51\0\1\u023e\15\0\1\u023e"+
    "\16\0\1\34\1\0\4\34\4\0\4\34\1\u023f\14\34"+
    "\1\u0240\7\34\2\0\1\34\3\0\1\u0241\16\0\1\34"+
    "\1\0\4\34\4\0\27\34\1\u0242\1\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\20\34\1\u0243\10\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u0244\10\34\2\0\1\34\54\0\1\u0245\35\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u0246\20\34\2\0\1\34"+
    "\2\0\1\u0247\41\0\1\u0247\25\0\1\u0247\17\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0248\7\34\2\0\1\34"+
    "\3\0\1\u0249\51\0\1\u0249\15\0\1\u0249\16\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u024a\24\34\2\0\1\34"+
    "\40\0\1\u024b\51\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u024c\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u024d\24\34\2\0\1\34\40\0\1\u024e"+
    "\51\0\1\34\1\0\4\34\4\0\4\34\1\u024f\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u0250\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u0251\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u0252\12\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\22\34\1\u0253\6\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u0254\14\34\2\0\1\34\50\0\1\u0255\41\0\1\34"+
    "\1\0\4\34\4\0\6\34\1\u0256\22\34\2\0\1\34"+
    "\42\0\1\u0257\47\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\u0258\25\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\12\34\1\u0259\16\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u025a\20\34\2\0\1\34"+
    "\2\0\1\u025b\17\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u025c\14\34\2\0\1\34\50\0\1\u025d\41\0\1\34"+
    "\1\0\4\34\4\0\25\34\1\u025e\3\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\22\34\1\u025f\6\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\u0260\25\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\2\34\1\u0261\26\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\20\34\1\u0262\10\34\2\0\1\34"+
    "\54\0\1\u0263\35\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u0264\10\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u0265\14\34\2\0\1\34\54\0\1\u0266"+
    "\35\0\1\34\1\0\4\34\4\0\14\34\1\u0267\14\34"+
    "\2\0\1\34\50\0\1\u0268\41\0\1\34\1\0\4\34"+
    "\4\0\22\34\1\u0269\6\34\2\0\1\34\56\0\1\u026a"+
    "\33\0\1\34\1\0\4\34\4\0\22\34\1\u026b\6\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\12\34"+
    "\1\u026c\16\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u026d\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\13\34\1\u026e\15\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\22\34\1\u026f\6\34"+
    "\2\0\1\34\56\0\1\u0270\57\0\1\u0271\43\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u0272\13\34\2\0\1\34"+
    "\51\0\1\u0273\70\0\1\u0274\73\0\1\u0275\67\0\1\u0276"+
    "\51\0\1\u0277\76\0\1\u0278\64\0\1\u0279\25\0\1\u0279"+
    "\52\0\1\u027a\15\0\1\u027a\45\0\1\u027b\40\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u027c\13\34\2\0\1\34"+
    "\51\0\1\u027d\40\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u027e\7\34\2\0\1\34\3\0\1\u027f\51\0\1\u027f"+
    "\15\0\1\u027f\16\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u0280\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u0281\14\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u0282\5\34\2\0\1\34"+
    "\57\0\1\u0283\32\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0284\7\34\2\0\1\34\3\0\1\u0285\51\0\1\u0285"+
    "\15\0\1\u0285\16\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0286\7\34\2\0\1\34\3\0\1\u0287\16\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u0288\6\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\4\34\1\u0289\24\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u028a\20\34\2\0\1\34\2\0\1\u028b\41\0\1\u028b"+
    "\25\0\1\u028b\17\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u028c\14\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u028d\5\34\2\0\1\34\57\0\1\u028e"+
    "\60\0\1\u028f\41\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u0290\10\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\22\34\1\u0291\6\34\2\0\1\34\56\0\1\u0292"+
    "\33\0\1\34\1\0\4\34\4\0\16\34\1\u0293\12\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\u0294\25\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\16\34\1\u0295\12\34\2\0\1\34\52\0\1\u0296"+
    "\37\0\1\34\1\0\4\34\4\0\4\34\1\u0297\24\34"+
    "\2\0\1\34\40\0\1\u0298\51\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0299\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\20\34\1\u029a\10\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\3\34\1\u029b\25\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u029c\10\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u029d\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u029e\24\34\2\0\1\34"+
    "\40\0\1\u029f\51\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u02a0\26\34\2\0\1\34\36\0\1\u02a1\53\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u02a2\7\34\2\0\1\34"+
    "\3\0\1\u02a3\51\0\1\u02a3\15\0\1\u02a3\16\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u02a4\20\34\2\0\1\34"+
    "\2\0\1\u02a5\17\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u02a6\5\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u02a7\24\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u02a8\24\34\2\0\1\34"+
    "\40\0\1\u02a9\51\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u02aa\26\34\2\0\1\34\36\0\1\u02ab\53\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u02ac\24\34\2\0\1\34"+
    "\40\0\1\u02ad\51\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u02ae\20\34\2\0\1\34\2\0\1\u02af\41\0\1\u02af"+
    "\25\0\1\u02af\17\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u02b0\14\34\2\0\1\34\50\0\1\u02b1\73\0\1\u02b2"+
    "\53\0\1\u02b3\64\0\1\u02b4\71\0\1\u02b5\52\0\1\34"+
    "\1\0\4\34\4\0\14\34\1\u02b6\14\34\2\0\1\34"+
    "\50\0\1\u02b7\41\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u02b8\24\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\22\34\1\u02b9\6\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u02ba\6\34\2\0\1\34"+
    "\56\0\1\u02bb\33\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u02bc\7\34\2\0\1\34\3\0\1\u02bd\51\0\1\u02bd"+
    "\15\0\1\u02bd\16\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u02be\6\34\2\0\1\34\56\0\1\u02bf\33\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u02c0\13\34\2\0\1\34"+
    "\51\0\1\u02c1\40\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u02c2\6\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u02c3\24\34\2\0\1\34\40\0\1\u02c4"+
    "\105\0\1\u02c5\33\0\1\34\1\0\4\34\4\0\20\34"+
    "\1\u02c6\10\34\2\0\1\34\54\0\1\u02c7\35\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u02c8\24\34\2\0\1\34"+
    "\22\0\1\34\1\0\4\34\4\0\22\34\1\u02c9\6\34"+
    "\2\0\1\34\56\0\1\u02ca\33\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u02cb\10\34\2\0\1\34\54\0\1\u02cc"+
    "\35\0\1\34\1\0\4\34\4\0\26\34\1\u02cd\2\34"+
    "\2\0\1\34\22\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u02ce\24\34\2\0\1\34\22\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u02cf\7\34\2\0\1\34\3\0\1\u02d0"+
    "\51\0\1\u02d0\15\0\1\u02d0\16\0\1\34\1\0\4\34"+
    "\4\0\20\34\1\u02d1\10\34\2\0\1\34\22\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u02d2\7\34\2\0\1\34"+
    "\3\0\1\u02d3\51\0\1\u02d3\15\0\1\u02d3\16\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u02d4\24\34\2\0\1\34"+
    "\40\0\1\u02d5\51\0\1\34\1\0\4\34\4\0\5\34"+
    "\1\u02d6\23\34\2\0\1\34\41\0\1\u02d7\66\0\1\u02d8"+
    "\106\0\1\u02d9\32\0\1\34\1\0\4\34\4\0\1\u02da"+
    "\30\34\2\0\1\34\34\0\1\u02db\55\0\1\34\1\0"+
    "\4\34\4\0\21\34\1\u02dc\7\34\2\0\1\34\3\0"+
    "\1\u02dd\16\0\1\34\1\0\4\34\4\0\4\34\1\u02de"+
    "\24\34\2\0\1\34\40\0\1\u02df\51\0\1\34\1\0"+
    "\4\34\4\0\20\34\1\u02e0\10\34\2\0\1\34\54\0"+
    "\1\u02e1\35\0\1\34\1\0\4\34\4\0\14\34\1\u02e2"+
    "\14\34\2\0\1\34\50\0\1\u02e3\41\0\1\34\1\0"+
    "\4\34\4\0\10\34\1\u02e4\20\34\2\0\1\34\2\0"+
    "\1\u02e5\41\0\1\u02e5\25\0\1\u02e5\17\0\1\34\1\0"+
    "\4\34\4\0\10\34\1\u02e6\20\34\2\0\1\34\2\0"+
    "\1\u02e7\41\0\1\u02e7\25\0\1\u02e7\17\0\1\34\1\0"+
    "\4\34\4\0\22\34\1\u02e8\6\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\u02e9\6\34\2\0"+
    "\1\34\22\0\1\34\1\0\4\34\4\0\4\34\1\u02ea"+
    "\24\34\2\0\1\34\40\0\1\u02eb\51\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u02ec\24\34\2\0\1\34\22\0"+
    "\1\34\1\0\4\34\4\0\10\34\1\u02ed\20\34\2\0"+
    "\1\34\2\0\1\u02ee\41\0\1\u02ee\25\0\1\u02ee\53\0"+
    "\1\u02ef\67\0\1\u02f0\33\0\1\34\1\0\4\34\4\0"+
    "\12\34\1\u02f1\16\34\2\0\1\34\46\0\1\u02f2\43\0"+
    "\1\34\1\0\4\34\4\0\15\34\1\u02f3\13\34\2\0"+
    "\1\34\51\0\1\u02f4\40\0\1\34\1\0\4\34\4\0"+
    "\14\34\1\u02f5\14\34\2\0\1\34\50\0\1\u02f6\41\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\u02f7\26\34\2\0"+
    "\1\34\36\0\1\u02f8\71\0\1\u02f9\51\0\1\34\1\0"+
    "\4\34\4\0\14\34\1\u02fa\14\34\2\0\1\34\50\0"+
    "\1\u02fb\41\0\1\34\1\0\4\34\4\0\6\34\1\u02fc"+
    "\22\34\2\0\1\34\42\0\1\u02fd\31\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31752];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\2\11\42\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\11\1\0\1\11\2\1"+
    "\5\0\2\11\1\1\2\11\11\1\1\0\14\1\1\0"+
    "\17\1\1\0\27\1\1\0\6\1\1\0\4\1\1\0"+
    "\1\11\1\1\1\11\1\1\3\11\11\0\2\1\3\0"+
    "\1\1\1\11\2\1\1\11\10\1\1\0\4\1\1\0"+
    "\14\1\1\0\2\1\1\0\1\1\1\0\5\1\1\0"+
    "\16\1\1\0\2\1\1\0\15\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\5\1\1\0\7\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\0\1\1\4\0\1\11"+
    "\5\0\2\1\3\0\1\11\3\1\1\0\10\1\3\0"+
    "\7\1\1\0\4\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\20\1\1\0\1\1\1\0"+
    "\5\1\1\0\4\1\1\0\3\1\1\11\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\6\1\2\0\4\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\3\11"+
    "\3\0\1\11\3\0\1\11\4\0\3\1\1\0\5\1"+
    "\1\0\3\1\1\0\1\11\1\0\1\1\1\0\6\1"+
    "\1\0\1\11\1\1\1\11\2\1\1\0\2\1\2\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\13\1\1\0"+
    "\3\1\1\0\4\1\1\0\3\1\1\11\3\1\1\11"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1\2\0\2\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\3\11\10\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\0\2\1\2\11\1\1\1\0\5\1\1\11\2\1"+
    "\1\0\2\1\2\0\1\1\1\11\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\6\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\2\11\1\1\3\0\3\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\2\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\6\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\2\11\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\3\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\3\1\1\11\2\1\1\0\1\11"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\2\11\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _RexxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 165: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 166: break;
          case 3:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 167: break;
          case 4:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 168: break;
          case 5:
            { return TOKEN_LEFT;
            }
          // fall through
          case 169: break;
          case 6:
            { return TOKEN_RIGHT;
            }
          // fall through
          case 170: break;
          case 7:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 171: break;
          case 8:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 172: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 173: break;
          case 10:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 174: break;
          case 11:
            { return NUMBER_INT;
            }
          // fall through
          case 175: break;
          case 12:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 176: break;
          case 13:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 177: break;
          case 14:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 178: break;
          case 15:
            { return IDENTIFIER;
            }
          // fall through
          case 179: break;
          case 16:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 180: break;
          case 17:
            { return OPERATOR_OR;
            }
          // fall through
          case 181: break;
          case 18:
            { return TILDE;
            }
          // fall through
          case 182: break;
          case 19:
            { return STRING;
            }
          // fall through
          case 183: break;
          case 20:
            { return SHEBANG;
            }
          // fall through
          case 184: break;
          case 21:
            { return OPERATOR_AND;
            }
          // fall through
          case 185: break;
          case 22:
            { return OPERATOR_POWER;
            }
          // fall through
          case 186: break;
          case 23:
            { return LINE_COMMENT;
            }
          // fall through
          case 187: break;
          case 24:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 188: break;
          case 25:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 189: break;
          case 26:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 190: break;
          case 27:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 191: break;
          case 28:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 192: break;
          case 29:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 193: break;
          case 30:
            { return SUBKEY_BY;
            }
          // fall through
          case 194: break;
          case 31:
            { return KEYWORD_DO;
            }
          // fall through
          case 195: break;
          case 32:
            { return KEYWORD_IF;
            }
          // fall through
          case 196: break;
          case 33:
            { return SUBKEY_ON;
            }
          // fall through
          case 197: break;
          case 34:
            { return SUBKEY_TO;
            }
          // fall through
          case 198: break;
          case 35:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 199: break;
          case 36:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 200: break;
          case 37:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 201: break;
          case 38:
            { return OPERATOR_XOR;
            }
          // fall through
          case 202: break;
          case 39:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 203: break;
          case 40:
            { return NUMBER_BINARY;
            }
          // fall through
          case 204: break;
          case 41:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 205: break;
          case 42:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 206: break;
          case 43:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 207: break;
          case 44:
            { return BUILTIN_ABS;
            }
          // fall through
          case 208: break;
          case 45:
            { return BUILTIN_ARG;
            }
          // fall through
          case 209: break;
          case 46:
            { return BUILTIN_B2X;
            }
          // fall through
          case 210: break;
          case 47:
            { return BUILTIN_C2D;
            }
          // fall through
          case 211: break;
          case 48:
            { return BUILTIN_C2X;
            }
          // fall through
          case 212: break;
          case 49:
            { return BUILTIN_D2C;
            }
          // fall through
          case 213: break;
          case 50:
            { return BUILTIN_D2X;
            }
          // fall through
          case 214: break;
          case 51:
            { return KEYWORD_END;
            }
          // fall through
          case 215: break;
          case 52:
            { return SUBKEY_FOR;
            }
          // fall through
          case 216: break;
          case 53:
            { return KEYWORD_NOP;
            }
          // fall through
          case 217: break;
          case 54:
            { return SUBKEY_OFF;
            }
          // fall through
          case 218: break;
          case 55:
            { return KEYWORD_SAY;
            }
          // fall through
          case 219: break;
          case 56:
            { return KEYWORD_USE;
            }
          // fall through
          case 220: break;
          case 57:
            { return SUBKEY_VAR;
            }
          // fall through
          case 221: break;
          case 58:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 222: break;
          case 59:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 223: break;
          case 60:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 224: break;
          case 61:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 225: break;
          case 62:
            { return KEYWORD_CALL;
            }
          // fall through
          case 226: break;
          case 63:
            { return SUBKEY_CASE;
            }
          // fall through
          case 227: break;
          case 64:
            { return BUILTIN_DATE;
            }
          // fall through
          case 228: break;
          case 65:
            { return KEYWORD_DROP;
            }
          // fall through
          case 229: break;
          case 66:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 230: break;
          case 67:
            { return SUBKEY_EXIT;
            }
          // fall through
          case 231: break;
          case 68:
            { return BUILTIN_FORM;
            }
          // fall through
          case 232: break;
          case 69:
            { return BUILTIN_FUZZ;
            }
          // fall through
          case 233: break;
          case 70:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 234: break;
          case 71:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 235: break;
          case 72:
            { return SUBKEY_NAME;
            }
          // fall through
          case 236: break;
          case 73:
            { return SUBKEY_OVER;
            }
          // fall through
          case 237: break;
          case 74:
            { return SUBKEY_PULL;
            }
          // fall through
          case 238: break;
          case 75:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 239: break;
          case 76:
            { return SUBKEY_STEM;
            }
          // fall through
          case 240: break;
          case 77:
            { return SUBKEY_THEN;
            }
          // fall through
          case 241: break;
          case 78:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 242: break;
          case 79:
            { return SUBKEY_WHEN;
            }
          // fall through
          case 243: break;
          case 80:
            { return SUBKEY_WITH;
            }
          // fall through
          case 244: break;
          case 81:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 245: break;
          case 82:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 246: break;
          case 83:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 247: break;
          case 84:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 248: break;
          case 85:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 249: break;
          case 86:
            { return SUBKEY_CLASS;
            }
          // fall through
          case 250: break;
          case 87:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 251: break;
          case 88:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 252: break;
          case 89:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 253: break;
          case 90:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 254: break;
          case 91:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 255: break;
          case 92:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 256: break;
          case 93:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 257: break;
          case 94:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 258: break;
          case 95:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 259: break;
          case 96:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 260: break;
          case 97:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 261: break;
          case 98:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 262: break;
          case 99:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 263: break;
          case 100:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 264: break;
          case 101:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 265: break;
          case 102:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 266: break;
          case 103:
            { return SUBKEY_USING;
            }
          // fall through
          case 267: break;
          case 104:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 268: break;
          case 105:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 269: break;
          case 106:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 270: break;
          case 107:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 271: break;
          case 108:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 272: break;
          case 109:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 273: break;
          case 110:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 274: break;
          case 111:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 275: break;
          case 112:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 276: break;
          case 113:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 277: break;
          case 114:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 278: break;
          case 115:
            { return BUILTIN_DIGITS;
            }
          // fall through
          case 279: break;
          case 116:
            { return SUBKEY_EXPOSE;
            }
          // fall through
          case 280: break;
          case 117:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 281: break;
          case 118:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 282: break;
          case 119:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 283: break;
          case 120:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 284: break;
          case 121:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 285: break;
          case 122:
            { return SUBKEY_RETURN;
            }
          // fall through
          case 286: break;
          case 123:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 287: break;
          case 124:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 288: break;
          case 125:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 289: break;
          case 126:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 290: break;
          case 127:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 291: break;
          case 128:
            { return KEYWORD_CLASS;
            }
          // fall through
          case 292: break;
          case 129:
            { return BUILTIN_ADDRESS;
            }
          // fall through
          case 293: break;
          case 130:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 294: break;
          case 131:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 295: break;
          case 132:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 296: break;
          case 133:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 297: break;
          case 134:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 298: break;
          case 135:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 299: break;
          case 136:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 300: break;
          case 137:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 301: break;
          case 138:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 302: break;
          case 139:
            { return KEYWORD_OPTIONS;
            }
          // fall through
          case 303: break;
          case 140:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 304: break;
          case 141:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 305: break;
          case 142:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 306: break;
          case 143:
            { return KEYWORD_METHOD;
            }
          // fall through
          case 307: break;
          case 144:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 308: break;
          case 145:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 309: break;
          case 146:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 310: break;
          case 147:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 311: break;
          case 148:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 312: break;
          case 149:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 313: break;
          case 150:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 314: break;
          case 151:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 315: break;
          case 152:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 316: break;
          case 153:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 317: break;
          case 154:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 318: break;
          case 155:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 319: break;
          case 156:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 320: break;
          case 157:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 321: break;
          case 158:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 322: break;
          case 159:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 323: break;
          case 160:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 324: break;
          case 161:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 325: break;
          case 162:
            { return KEYWORD_ATTRIBUTE;
            }
          // fall through
          case 326: break;
          case 163:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 327: break;
          case 164:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 328: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
