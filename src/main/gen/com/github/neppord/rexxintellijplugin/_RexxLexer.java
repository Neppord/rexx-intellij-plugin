// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/rexx.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.lang.invoke.StringConcatFactory;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\0"+
    "\1\3\2\0\1\4\1\5\3\0\1\6\1\7\1\0"+
    "\1\10\1\0\1\11\2\0\1\12\11\0\1\13\1\14"+
    "\1\15\2\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\2\0\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\51\263\0\2\26\115\0"+
    "\1\37\u01aa\0\1\27\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\26\0\1\13\1\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\0\1\25\12\0\1\26\13\0\1\27\15\0\1\30"+
    "\31\0\1\31\13\0\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\42\1\0\1\43\1\0"+
    "\1\44\1\0\1\45\2\0\1\46\1\0\1\47\1\50"+
    "\11\0\1\51\1\52\6\0\1\53\7\0\1\54\1\0"+
    "\1\55\23\0\1\56\2\0\1\57\3\0\1\60\5\0"+
    "\1\61\6\0\1\62\22\0\1\63\2\0\1\64\20\0"+
    "\1\65\2\0\1\66\5\0\1\67\1\70\1\71\1\0"+
    "\1\72\1\73\1\74\14\0\1\75\1\76\13\0\1\77"+
    "\5\0\1\100\1\101\3\0\1\102\5\0\1\103\1\0"+
    "\1\104\1\0\1\105\5\0\1\106\4\0\1\107\4\0"+
    "\1\110\6\0\1\111\12\0\1\112\10\0\1\113\1\114"+
    "\20\0\1\115\2\0\1\116\7\0\1\117\1\120\2\0"+
    "\1\121\5\0\1\122\4\0\1\123\1\0\1\124\1\125"+
    "\1\0\1\126\1\127\7\0\1\130\2\0\1\131\7\0"+
    "\1\132\1\133\16\0\1\134\3\0\1\135\3\0\1\136"+
    "\1\137\1\0\1\140\3\0\1\141\1\0\1\142\4\0"+
    "\1\143\1\144\1\0\1\145\21\0\1\146\7\0\1\147"+
    "\1\150\2\0\1\151\4\0\1\152\10\0\1\153\2\0"+
    "\1\154\5\0\1\155\1\0\1\156\2\0\1\157\1\160"+
    "\1\0\1\161\1\162\2\0\1\163\3\0\1\164\1\0"+
    "\1\165\4\0\1\166\2\0\1\167\1\170\1\0\1\171"+
    "\1\172\1\0\1\173\5\0\1\174\4\0\1\175\2\0"+
    "\1\176\3\0\1\177\3\0\1\200\3\0\1\201\3\0"+
    "\1\202\1\0\1\203\4\0\1\204\4\0\1\205\6\0"+
    "\1\206\4\0\1\207\2\0\1\210\1\0\1\211\1\212"+
    "\3\0\1\213\5\0\1\214\1\0\1\215\1\216\1\217"+
    "\1\220\1\0\1\221\1\0\1\222\1\223\3\0\1\224"+
    "\1\225\4\0\1\226\2\0\1\227\5\0\1\230\1\231"+
    "\3\0\1\232\3\0\1\233\5\0\1\234\1\235\1\236"+
    "\1\237\1\240\1\0\1\241\1\242\1\243\1\244\1\0"+
    "\1\245\7\0\1\246\1\247\1\250\1\0\1\251\1\252"+
    "\1\253\3\0\1\254\1\255\2\0\1\256\1\257\3\0"+
    "\1\260\4\0\1\261\3\0\1\262\2\0\1\263\1\264"+
    "\1\0\1\265\2\0\1\266\2\0\1\267\1\270\1\271"+
    "\1\272\1\273\1\0\1\274\2\0\1\275\5\0\1\276"+
    "\1\277\1\300\1\301\4\0\1\302\1\303\4\0\1\304"+
    "\1\0\1\305\6\0\1\306\1\307\1\310\1\311\2\0"+
    "\1\312\1\313\1\0\1\314\1\0\1\315\1\316\1\317"+
    "\1\320\1\321\1\322\4\0\1\323\1\324\1\0\1\325"+
    "\1\0\1\326\2\0\1\327\1\330\1\331\1\0\1\332"+
    "\1\333\1\0\1\334\1\335\1\336\1\337\1\340";

  private static int [] zzUnpackAction() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\176\0\176"+
    "\0\176\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8"+
    "\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348"+
    "\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498"+
    "\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\124\0\176\0\176"+
    "\0\176\0\176\0\u0594\0\176\0\176\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\176\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\176\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\176\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\176\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\176\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\176\0\u12b4\0\176\0\176\0\176\0\176\0\u12de"+
    "\0\u1308\0\u1332\0\u135c\0\u1386\0\176\0\u13b0\0\176\0\u13da"+
    "\0\u1404\0\u142e\0\u1458\0\176\0\u1482\0\176\0\176\0\u14ac"+
    "\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc"+
    "\0\176\0\176\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8"+
    "\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848"+
    "\0\u1872\0\u189c\0\176\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe"+
    "\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\176\0\u1be4"+
    "\0\u1c0e\0\176\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a"+
    "\0\u1d34\0\u1d5e\0\u1d88\0\176\0\u1db2\0\u1ddc\0\u1e06\0\u1e30"+
    "\0\u1e5a\0\u1e84\0\176\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56"+
    "\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6"+
    "\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178\0\176\0\u21a2\0\u21cc"+
    "\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c"+
    "\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c"+
    "\0\u2496\0\u24c0\0\u24ea\0\u2514\0\176\0\u253e\0\u2568\0\u2592"+
    "\0\u25bc\0\u25e6\0\176\0\176\0\176\0\u2610\0\u263a\0\176"+
    "\0\176\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760"+
    "\0\u278a\0\u27b4\0\u27de\0\u2808\0\u2832\0\176\0\u285c\0\u2886"+
    "\0\u28b0\0\u28da\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac\0\u29d6"+
    "\0\u2a00\0\u2a2a\0\176\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc"+
    "\0\176\0\176\0\u2b26\0\u2b50\0\u2b7a\0\176\0\u2ba4\0\u2bce"+
    "\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\176\0\u2cca\0\176"+
    "\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\176\0\u2dc6\0\u2df0"+
    "\0\u2e1a\0\u2e44\0\176\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\176"+
    "\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c"+
    "\0\u3066\0\u3090\0\u30ba\0\u30e4\0\u310e\0\u3138\0\u3162\0\u318c"+
    "\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc"+
    "\0\u3306\0\u3330\0\176\0\176\0\u335a\0\u3384\0\u33ae\0\u33d8"+
    "\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa\0\u34d4\0\u34fe\0\u3528"+
    "\0\u3552\0\u357c\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u364e\0\176"+
    "\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\u3774\0\176"+
    "\0\176\0\u379e\0\u37c8\0\176\0\u37f2\0\u381c\0\u3846\0\u3870"+
    "\0\u389a\0\u38c4\0\u38ee\0\u3918\0\u3942\0\u396c\0\176\0\u3996"+
    "\0\176\0\u39c0\0\u39ea\0\176\0\176\0\u3a14\0\u3a3e\0\u3a68"+
    "\0\u3a92\0\u3abc\0\u3ae6\0\u3b10\0\176\0\u3b3a\0\u3b64\0\176"+
    "\0\u3b8e\0\u3bb8\0\u3be2\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a\0\176"+
    "\0\176\0\u3cb4\0\u3cde\0\u3d08\0\u3d32\0\u3d5c\0\u3d86\0\u3db0"+
    "\0\u3dda\0\u3e04\0\u3e2e\0\u3e58\0\u3e82\0\u3eac\0\u3ed6\0\u3f00"+
    "\0\u3f2a\0\u3f54\0\u3f7e\0\176\0\u3fa8\0\u3fd2\0\u3ffc\0\u4026"+
    "\0\176\0\u4050\0\176\0\u407a\0\u40a4\0\u40ce\0\176\0\u40f8"+
    "\0\176\0\u4122\0\u414c\0\u4176\0\u41a0\0\176\0\176\0\u41ca"+
    "\0\176\0\u41f4\0\u421e\0\u4248\0\u4272\0\u429c\0\u42c6\0\u42f0"+
    "\0\u431a\0\u4344\0\u436e\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u4440"+
    "\0\u446a\0\u4494\0\176\0\u44be\0\u44e8\0\u4512\0\u453c\0\u4566"+
    "\0\u4590\0\u45ba\0\u45e4\0\176\0\u460e\0\u4638\0\176\0\u4662"+
    "\0\u468c\0\u46b6\0\u46e0\0\176\0\u470a\0\u4734\0\u475e\0\u4788"+
    "\0\u47b2\0\u47dc\0\u4806\0\u4830\0\176\0\u485a\0\u4884\0\176"+
    "\0\u48ae\0\u48d8\0\u4902\0\u492c\0\u4956\0\176\0\u4980\0\176"+
    "\0\u49aa\0\u49d4\0\176\0\176\0\u49fe\0\176\0\176\0\u4a28"+
    "\0\u4a52\0\176\0\u4a7c\0\u4aa6\0\u4ad0\0\176\0\u4afa\0\176"+
    "\0\u4b24\0\u4b4e\0\u4b78\0\u4ba2\0\176\0\u4bcc\0\u4bf6\0\176"+
    "\0\176\0\u4c20\0\176\0\176\0\u4c4a\0\176\0\u4c74\0\u4c9e"+
    "\0\u4cc8\0\u4cf2\0\u4d1c\0\176\0\u4d46\0\u4d70\0\u4d9a\0\u4dc4"+
    "\0\176\0\u4dee\0\u4e18\0\176\0\u4e42\0\u4e6c\0\u4e96\0\176"+
    "\0\u4ec0\0\u4eea\0\u4f14\0\176\0\u4f3e\0\u4f68\0\u4f92\0\176"+
    "\0\u4fbc\0\u4fe6\0\u5010\0\176\0\u503a\0\176\0\u5064\0\u508e"+
    "\0\u50b8\0\u50e2\0\176\0\u510c\0\u5136\0\u5160\0\u518a\0\176"+
    "\0\u51b4\0\u51de\0\u5208\0\u5232\0\u525c\0\u5286\0\176\0\u52b0"+
    "\0\u52da\0\u5304\0\u532e\0\176\0\u5358\0\u5382\0\176\0\u53ac"+
    "\0\176\0\176\0\u53d6\0\u5400\0\u542a\0\176\0\u5454\0\u547e"+
    "\0\u54a8\0\u54d2\0\u54fc\0\176\0\u5526\0\176\0\u5550\0\176"+
    "\0\176\0\u557a\0\176\0\u55a4\0\176\0\176\0\u55ce\0\u55f8"+
    "\0\u5622\0\176\0\176\0\u564c\0\u5676\0\u56a0\0\u56ca\0\176"+
    "\0\u56f4\0\u571e\0\176\0\u5748\0\u5772\0\u579c\0\u57c6\0\u57f0"+
    "\0\176\0\176\0\u581a\0\u5844\0\u586e\0\176\0\u5898\0\u58c2"+
    "\0\u58ec\0\176\0\u5916\0\u5940\0\u596a\0\u5994\0\u59be\0\176"+
    "\0\176\0\176\0\176\0\176\0\u59e8\0\176\0\176\0\176"+
    "\0\176\0\u5a12\0\176\0\u5a3c\0\u5a66\0\u5a90\0\u5aba\0\u5ae4"+
    "\0\u5b0e\0\u5b38\0\176\0\176\0\176\0\u5b62\0\176\0\176"+
    "\0\176\0\u5b8c\0\u5bb6\0\u5be0\0\176\0\176\0\u5c0a\0\u5c34"+
    "\0\176\0\176\0\u5c5e\0\u5c88\0\u5cb2\0\176\0\u5cdc\0\u5d06"+
    "\0\u5d30\0\u5d5a\0\176\0\u5d84\0\u5dae\0\u5dd8\0\176\0\u5e02"+
    "\0\u5e2c\0\176\0\176\0\u5e56\0\176\0\u5e80\0\u5eaa\0\176"+
    "\0\u5ed4\0\u5efe\0\176\0\176\0\176\0\176\0\176\0\u5f28"+
    "\0\176\0\u5f52\0\u5f7c\0\176\0\u5fa6\0\u5fd0\0\u5ffa\0\u6024"+
    "\0\u604e\0\176\0\176\0\176\0\176\0\u6078\0\u60a2\0\u60cc"+
    "\0\u60f6\0\176\0\176\0\u6120\0\u614a\0\u6174\0\u619e\0\176"+
    "\0\u61c8\0\176\0\u61f2\0\u621c\0\u6246\0\u6270\0\u629a\0\u62c4"+
    "\0\176\0\176\0\176\0\176\0\u62ee\0\u6318\0\176\0\176"+
    "\0\u6342\0\176\0\u636c\0\176\0\176\0\176\0\176\0\176"+
    "\0\176\0\u6396\0\u63c0\0\u63ea\0\u6414\0\176\0\176\0\u643e"+
    "\0\176\0\u6468\0\176\0\u6492\0\u64bc\0\176\0\176\0\176"+
    "\0\u64e6\0\176\0\176\0\u6510\0\176\0\176\0\176\0\176"+
    "\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\0\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\0\1\43\1\44\1\45"+
    "\1\0\2\2\47\0\2\3\1\0\1\46\43\3\1\0"+
    "\2\3\57\0\1\47\52\0\1\50\60\0\1\51\47\0"+
    "\1\52\1\53\50\0\1\54\1\55\54\0\1\56\1\0"+
    "\1\57\6\0\1\60\1\0\1\61\1\0\1\62\1\0"+
    "\1\63\1\0\1\64\23\0\1\65\13\0\1\66\16\0"+
    "\1\67\16\0\1\70\3\0\1\71\3\0\1\72\2\0"+
    "\1\73\2\0\1\74\2\0\1\75\30\0\1\76\3\0"+
    "\1\77\3\0\1\100\3\0\1\101\4\0\1\102\2\0"+
    "\1\103\43\0\1\104\1\0\1\105\3\0\1\106\5\0"+
    "\1\107\23\0\1\110\14\0\1\111\5\0\1\112\32\0"+
    "\1\113\16\0\1\114\26\0\1\115\56\0\1\116\6\0"+
    "\1\117\5\0\1\120\27\0\1\121\3\0\1\122\3\0"+
    "\1\123\4\0\1\124\34\0\1\125\3\0\1\126\3\0"+
    "\1\127\41\0\1\130\14\0\1\131\5\0\1\132\33\0"+
    "\1\133\6\0\1\134\1\0\1\135\3\0\1\136\1\137"+
    "\1\140\25\0\1\141\14\0\1\142\2\0\1\143\2\0"+
    "\1\144\51\0\1\145\26\0\1\146\3\0\1\147\3\0"+
    "\1\150\4\0\1\151\10\0\1\152\23\0\1\153\1\0"+
    "\1\154\1\0\1\155\3\0\1\156\4\0\1\157\1\160"+
    "\3\0\1\161\1\162\3\0\1\163\31\0\1\164\1\165"+
    "\4\0\1\166\2\0\1\167\45\0\1\170\1\0\1\171"+
    "\2\0\1\172\30\0\1\173\3\0\1\174\54\0\1\175"+
    "\1\176\4\0\1\177\30\0\1\200\23\0\1\201\26\0"+
    "\1\202\1\203\1\204\31\0\1\205\52\0\1\206\52\0"+
    "\1\207\13\0\1\210\1\0\1\211\53\0\1\212\17\0"+
    "\1\213\33\0\1\214\60\0\1\215\53\0\1\216\12\0"+
    "\1\217\40\0\1\220\41\0\1\221\11\0\1\222\53\0"+
    "\1\223\55\0\1\224\45\0\1\225\32\0\1\226\22\0"+
    "\1\227\35\0\1\230\6\0\1\231\44\0\1\232\35\0"+
    "\1\233\51\0\1\234\64\0\1\235\1\236\1\0\1\237"+
    "\4\0\1\240\30\0\1\241\23\0\1\242\45\0\1\243"+
    "\41\0\1\244\6\0\1\245\36\0\1\246\60\0\1\247"+
    "\55\0\1\250\33\0\1\251\2\0\1\252\63\0\1\253"+
    "\41\0\1\254\5\0\1\255\3\0\1\256\37\0\1\257"+
    "\1\0\1\260\57\0\1\261\61\0\1\262\43\0\1\263"+
    "\27\0\1\264\63\0\1\265\42\0\1\266\3\0\1\267"+
    "\6\0\1\270\2\0\1\271\1\272\33\0\1\273\46\0"+
    "\1\274\17\0\1\275\30\0\1\276\4\0\1\277\6\0"+
    "\1\300\36\0\1\301\12\0\1\302\37\0\1\303\12\0"+
    "\1\304\3\0\1\305\3\0\1\306\52\0\1\307\44\0"+
    "\1\310\1\311\43\0\1\312\11\0\1\313\36\0\1\314"+
    "\51\0\1\315\2\0\1\316\1\0\1\317\1\320\1\321"+
    "\1\0\1\322\40\0\1\323\43\0\1\324\66\0\1\325"+
    "\36\0\1\326\64\0\1\327\33\0\1\330\47\0\1\331"+
    "\15\0\1\332\52\0\1\333\40\0\1\334\4\0\1\335"+
    "\35\0\1\336\10\0\1\337\6\0\1\340\30\0\1\341"+
    "\3\0\1\342\55\0\1\343\3\0\1\344\53\0\1\345"+
    "\1\346\1\0\1\347\1\350\1\0\1\351\33\0\1\352"+
    "\66\0\1\353\33\0\1\354\11\0\1\355\61\0\1\356"+
    "\32\0\1\357\53\0\1\360\7\0\1\361\35\0\1\362"+
    "\66\0\1\363\26\0\1\364\55\0\1\365\13\0\1\366"+
    "\32\0\1\367\63\0\1\370\1\371\41\0\1\372\60\0"+
    "\1\373\36\0\1\374\22\0\1\375\34\0\1\376\7\0"+
    "\1\377\3\0\1\u0100\45\0\1\u0101\37\0\1\u0102\3\0"+
    "\1\u0103\53\0\1\u0104\5\0\1\u0105\51\0\1\u0106\35\0"+
    "\1\u0107\3\0\1\u0108\63\0\1\u0109\47\0\1\u010a\32\0"+
    "\1\u010b\1\u010c\1\u010d\46\0\1\u010e\47\0\1\u010f\51\0"+
    "\1\u0110\51\0\1\u0111\73\0\1\u0112\53\0\1\u0113\37\0"+
    "\1\u0114\7\0\1\u0115\46\0\1\u0116\40\0\1\u0117\70\0"+
    "\1\u0118\26\0\1\u0119\71\0\1\u011a\31\0\1\u011b\14\0"+
    "\1\u011c\10\0\1\u011d\35\0\1\u011e\43\0\1\u011f\67\0"+
    "\1\u0120\43\0\1\u0121\3\0\1\u0122\52\0\1\u0123\46\0"+
    "\1\u0124\36\0\1\u0125\15\0\1\u0126\1\u0127\37\0\1\u0128"+
    "\55\0\1\u0129\35\0\1\u012a\3\0\1\u012b\51\0\1\u012c"+
    "\14\0\1\u012d\3\0\1\u012e\26\0\1\u012f\57\0\1\u0130"+
    "\57\0\1\u0131\37\0\1\u0132\57\0\1\u0133\47\0\1\u0134"+
    "\56\0\1\u0135\56\0\1\u0136\44\0\1\u0137\40\0\1\u0138"+
    "\57\0\1\u0139\60\0\1\u013a\34\0\1\u013b\6\0\1\u013c"+
    "\11\0\1\u013d\54\0\1\u013e\41\0\1\u013f\53\0\1\u0140"+
    "\33\0\1\u0141\51\0\1\u0142\70\0\1\u0143\32\0\1\u0144"+
    "\51\0\1\u0145\60\0\1\u0146\4\0\1\u0147\35\0\1\u0148"+
    "\67\0\1\u0149\53\0\1\u014a\47\0\1\u014b\35\0\1\u014c"+
    "\63\0\1\u014d\35\0\1\u014e\45\0\1\u014f\67\0\1\u0150"+
    "\55\0\1\u0151\33\0\1\u0152\66\0\1\u0153\30\0\1\u0154"+
    "\6\0\1\u0155\52\0\1\u0156\45\0\1\u0157\51\0\1\u0158"+
    "\65\0\1\u0159\44\0\1\u015a\60\0\1\u015b\47\0\1\u015c"+
    "\31\0\1\u015d\55\0\1\u015e\55\0\1\u015f\45\0\1\u0160"+
    "\63\0\1\u0161\53\0\1\u0162\42\0\1\u0163\61\0\1\u0164"+
    "\54\0\1\u0165\27\0\1\u0166\7\0\1\u0167\3\0\1\u0168"+
    "\3\0\1\u0169\41\0\1\u016a\51\0\1\u016b\46\0\1\u016c"+
    "\54\0\1\u016d\62\0\1\u016e\47\0\1\u016f\33\0\1\u0170"+
    "\60\0\1\u0171\62\0\1\u0172\43\0\1\u0173\57\0\1\u0174"+
    "\32\0\1\u0175\54\0\1\u0176\64\0\1\u0177\52\0\1\u0178"+
    "\51\0\1\u0179\32\0\1\u017a\51\0\1\u017b\57\0\1\u017c"+
    "\53\0\1\u017d\55\0\1\u017e\33\0\1\u017f\62\0\1\u0180"+
    "\42\0\1\u0181\3\0\1\u0182\43\0\1\u0183\16\0\1\u0184"+
    "\3\0\1\u0185\25\0\1\u0186\72\0\1\u0187\43\0\1\u0188"+
    "\41\0\1\u0189\47\0\1\u018a\11\0\1\u018b\41\0\1\u018c"+
    "\7\0\1\u018d\60\0\1\u018e\46\0\1\u018f\41\0\1\u0190"+
    "\45\0\1\u0191\65\0\1\u0192\45\0\1\u0193\60\0\1\u0194"+
    "\36\0\1\u0195\10\0\1\u0196\44\0\1\u0197\47\0\1\u0198"+
    "\46\0\1\u0199\45\0\1\u019a\62\0\1\u019b\32\0\1\u019c"+
    "\1\0\1\u019d\56\0\1\u019e\65\0\1\u019f\53\0\1\u01a0"+
    "\33\0\1\u01a1\67\0\1\u01a2\43\0\1\u01a3\50\0\1\u01a4"+
    "\65\0\1\u01a5\32\0\1\u01a6\55\0\1\u01a7\55\0\1\u01a8"+
    "\46\0\1\u01a9\46\0\1\u01aa\43\0\1\u01ab\13\0\1\u01ac"+
    "\37\0\1\u01ad\53\0\1\u01ae\4\0\1\u01af\3\0\1\u01b0"+
    "\51\0\1\u01b1\30\0\1\u01b2\61\0\1\u01b3\63\0\1\u01b4"+
    "\37\0\1\u01b5\45\0\1\u01b6\67\0\1\u01b7\51\0\1\u01b8"+
    "\35\0\1\u01b9\65\0\1\u01ba\44\0\1\u01bb\54\0\1\u01bc"+
    "\53\0\1\u01bd\44\0\1\u01be\50\0\1\u01bf\55\0\1\u01c0"+
    "\52\0\1\u01c1\50\0\1\u01c2\54\0\1\u01c3\32\0\1\u01c4"+
    "\71\0\1\u01c5\25\0\1\u01c6\51\0\1\u01c7\54\0\1\u01c8"+
    "\74\0\1\u01c9\43\0\1\u01ca\53\0\1\u01cb\47\0\1\u01cc"+
    "\51\0\1\u01cd\31\0\1\u01ce\63\0\1\u01cf\55\0\1\u01d0"+
    "\37\0\1\u01d1\67\0\1\u01d2\27\0\1\u01d3\61\0\1\u01d4"+
    "\4\0\1\u01d5\3\0\1\u01d6\42\0\1\u01d7\42\0\1\u01d8"+
    "\66\0\1\u01d9\31\0\1\u01da\53\0\1\u01db\64\0\1\u01dc"+
    "\50\0\1\u01dd\56\0\1\u01de\52\0\1\u01df\44\0\1\u01e0"+
    "\34\0\1\u01e1\71\0\1\u01e2\35\0\1\u01e3\57\0\1\u01e4"+
    "\57\0\1\u01e5\46\0\1\u01e6\54\0\1\u01e7\54\0\1\u01e8"+
    "\40\0\1\u01e9\37\0\1\u01ea\55\0\1\u01eb\45\0\1\u01ec"+
    "\55\0\1\u01ed\62\0\1\u01ee\34\0\1\u01ef\55\0\1\u01f0"+
    "\55\0\1\u01f1\51\0\1\u01f2\45\0\1\u01f3\51\0\1\u01f4"+
    "\62\0\1\u01f5\34\0\1\u01f6\26\0\1\u01f7\32\0\1\u01f8"+
    "\64\0\1\u01f9\46\0\1\u01fa\51\0\1\u01fb\53\0\1\u01fc"+
    "\37\0\1\u01fd\55\0\1\u01fe\41\0\1\u01ff\61\0\1\u0200"+
    "\37\0\1\u0201\64\0\1\u0202\34\0\1\u0203\53\0\1\u0204"+
    "\53\0\1\u0205\45\0\1\u0206\53\0\1\u0207\13\0\1\u0208"+
    "\45\0\1\u0209\61\0\1\u020a\44\0\1\u020b\51\0\1\u020c"+
    "\34\0\1\u020d\55\0\1\u020e\66\0\1\u020f\32\0\1\u0210"+
    "\47\0\1\u0211\66\0\1\u0212\46\0\1\u0213\57\0\1\u0214"+
    "\41\0\1\u0215\47\0\1\u0216\47\0\1\u0217\52\0\1\u0218"+
    "\54\0\1\u0219\45\0\1\u021a\55\0\1\u021b\1\0\1\u021c"+
    "\3\0\1\u021d\2\0\1\u021e\36\0\1\u021f\67\0\1\u0220"+
    "\25\0\1\u0221\61\0\1\u0222\62\0\1\u0223\30\0\1\u0224"+
    "\54\0\1\u0225\52\0\1\u0226\46\0\1\u0227\53\0\1\u0228"+
    "\66\0\1\u0229\35\0\1\u022a\65\0\1\u022b\35\0\1\u022c"+
    "\51\0\1\u022d\61\0\1\u022e\60\0\1\u022f\46\0\1\u0230"+
    "\53\0\1\u0231\27\0\1\u0232\65\0\1\u0233\56\0\1\u0234"+
    "\34\0\1\u0235\14\0\1\u0236\57\0\1\u0237\22\0\1\u0238"+
    "\71\0\1\u0239\51\0\1\u023a\41\0\1\u023b\62\0\1\u023c"+
    "\32\0\1\u023d\53\0\1\u023e\67\0\1\u023f\33\0\1\u0240"+
    "\61\0\1\u0241\55\0\1\u0242\35\0\1\u0243\67\0\1\u0244"+
    "\47\0\1\u0245\35\0\1\u0246\55\0\1\u0247\63\0\1\u0248"+
    "\45\0\1\u0249\55\0\1\u024a\44\0\1\u024b\43\0\1\u024c"+
    "\62\0\1\u024d\45\0\1\u024e\60\0\1\u024f\36\0\1\u0250"+
    "\47\0\1\u0251\55\0\1\u0252\42\0\1\u0253\50\0\1\u0254"+
    "\65\0\1\u0255\42\0\1\u0256\54\0\1\u0257\51\0\1\u0258"+
    "\47\0\1\u0259\41\0\1\u025a\74\0\1\u025b\36\0\1\u025c"+
    "\55\0\1\u025d\62\0\1\u025e\46\0\1\u025f\27\0\1\u0260"+
    "\57\0\1\u0261\65\0\1\u0262\32\0\1\u0263\54\0\1\u0264"+
    "\51\0\1\u0265\45\0\1\u0266\51\0\1\u0267\54\0\1\u0268"+
    "\47\0\1\u0269\61\0\1\u026a\40\0\1\u026b\67\0\1\u026c"+
    "\51\0\1\u026d\45\0\1\u026e\56\0\1\u026f\44\0\1\u0270"+
    "\37\0\1\u0271\72\0\1\u0272\50\0\1\u0273\51\0\1\u0274"+
    "\31\0\1\u0275\61\0\1\u0276\43\0\1\u0277\60\0\1\u0278"+
    "\60\0\1\u0279\27\0\1\u027a\71\0\1\u027b\51\0\1\u027c"+
    "\43\0\1\u027d\65\0\1\u027e\35\0\1\u027f\57\0\1\u0280"+
    "\53\0\1\u0281\32\0\1\u0282\75\0\1\u0283\37\0\1\u0284"+
    "\50\0\1\u0285\41\0\1\u0286\62\0\1\u0287\40\0\1\u0288"+
    "\47\0\1\u0289\64\0\1\u028a\55\0\1\u028b\52\0\1\u028c"+
    "\43\0\1\u028d\60\0\1\u028e\47\0\1\u028f\51\0\1\u0290"+
    "\52\0\1\u0291\33\0\1\u0292\55\0\1\u0293\55\0\1\u0294"+
    "\60\0\1\u0295\46\0\1\u0296\53\0\1\u0297\45\0\1\u0298"+
    "\55\0\1\u0299\32\0\1\u029a\64\0\1\u029b\33\0\1\u029c"+
    "\55\0\1\u029d\51\0\1\u029e\45\0\1\u029f\55\0\1\u02a0"+
    "\65\0\1\u02a1\34\0\1\u02a2\51\0\1\u02a3\70\0\1\u02a4"+
    "\47\0\1\u02a5\35\0\1\u02a6\66\0\1\u02a7\57\0\1\u02a8"+
    "\44\0\1\u02a9\35\0\1\u02aa\47\0\1\u02ab\45\0\1\u02ac"+
    "\63\0\1\u02ad\37\0\1\u02ae\66\0\1\u02af\51\0\1\u02b0"+
    "\50\0\1\u02b1\40\0\1\u02b2\52\0\1\u02b3\47\0\1\u02b4"+
    "\70\0\1\u02b5\40\0\1\u02b6\70\0\1\u02b7\26\0\1\u02b8"+
    "\51\0\1\u02b9\70\0\1\u02ba\26\0\1\u02bb\73\0\1\u02bc"+
    "\56\0\1\u02bd\26\0\1\u02be\51\0\1\u02bf\47\0\1\u02c0"+
    "\53\0\1\u02c1\51\0\1\u02c2\45\0\1\u02c3\2\0\1\u02c4"+
    "\13\0\1\u02c5\36\0\1\u02c6\55\0\1\u02c7\41\0\1\u02c8"+
    "\63\0\1\u02c9\60\0\1\u02ca\33\0\1\u02cb\46\0\1\u02cc"+
    "\54\0\1\u02cd\52\0\1\u02ce\61\0\1\u02cf\40\0\1\u02d0"+
    "\62\0\1\u02d1\56\0\1\u02d2\52\0\1\u02d3\43\0\1\u02d4"+
    "\41\0\1\u02d5\67\0\1\u02d6\51\0\1\u02d7\50\0\1\u02d8"+
    "\52\0\1\u02d9\44\0\1\u02da\56\0\1\u02db\33\0\1\u02dc"+
    "\65\0\1\u02dd\35\0\1\u02de\51\0\1\u02df\67\0\1\u02e0"+
    "\41\0\1\u02e1\57\0\1\u02e2\57\0\1\u02e3\35\0\1\u02e4"+
    "\43\0\1\u02e5\55\0\1\u02e6\62\0\1\u02e7\30\0\1\u02e8"+
    "\53\0\1\u02e9\52\0\1\u02ea\54\0\1\u02eb\51\0\1\u02ec"+
    "\72\0\1\u02ed\43\0\1\u02ee\50\0\1\u02ef\53\0\1\u02f0"+
    "\33\0\1\u02f1\66\0\1\u02f2\34\0\1\u02f3\50\0\1\u02f4"+
    "\66\0\1\u02f5\54\0\1\u02f6\33\0\1\u02f7\56\0\1\u02f8"+
    "\47\0\1\u02f9\62\0\1\u02fa\52\0\1\u02fb\33\0\1\u02fc"+
    "\47\0\1\u02fd\53\0\1\u02fe\53\0\1\u02ff\43\0\1\u0300"+
    "\72\0\1\u0301\34\0\1\u0302\65\0\1\u0303\45\0\1\u0304"+
    "\45\0\1\u0305\51\0\1\u0306\63\0\1\u0307\51\0\1\u0308"+
    "\51\0\1\u0309\50\0\1\u030a\51\0\1\u030b\34\0\1\u030c"+
    "\51\0\1\u030d\51\0\1\u030e\51\0\1\u030f\50\0\1\u0310"+
    "\51\0\1\u0311\63\0\1\u0312\40\0\1\u0313\55\0\1\u0314"+
    "\55\0\1\u0315\41\0\1\u0316\50\0\1\u0317\70\0\1\u0318"+
    "\55\0\1\u0319\45\0\1\u031a\41\0\1\u031b\54\0\1\u031c"+
    "\50\0\1\u031d\56\0\1\u031e\51\0\1\u031f\46\0\1\u0320"+
    "\53\0\1\u0321\33\0\1\u0322\53\0\1\u0323\51\0\1\u0324"+
    "\54\0\1\u0325\56\0\1\u0326\43\0\1\u0327\72\0\1\u0328"+
    "\25\0\1\u0329\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25914];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\2\1\3\11\3\1\26\0"+
    "\1\1\1\0\2\1\4\11\1\1\2\11\11\0\1\11"+
    "\12\0\1\11\13\0\1\11\15\0\1\11\31\0\1\11"+
    "\13\0\1\11\1\1\4\11\2\1\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\2\0\1\11\1\0"+
    "\2\11\11\0\2\11\6\0\1\1\7\0\1\1\1\0"+
    "\1\11\23\0\1\11\2\0\1\11\3\0\1\1\5\0"+
    "\1\11\6\0\1\11\22\0\1\11\2\0\1\1\20\0"+
    "\1\1\2\0\1\11\5\0\3\11\1\0\1\1\2\11"+
    "\14\0\1\11\1\1\13\0\1\11\5\0\2\11\3\0"+
    "\1\11\5\0\1\1\1\0\1\11\1\0\1\11\5\0"+
    "\1\11\4\0\1\11\4\0\1\11\6\0\1\1\12\0"+
    "\1\1\10\0\2\11\20\0\1\1\2\0\1\11\7\0"+
    "\2\11\2\0\1\11\5\0\1\1\4\0\1\11\1\0"+
    "\1\11\1\1\1\0\2\11\7\0\1\11\2\0\1\11"+
    "\7\0\2\11\16\0\1\1\3\0\1\11\3\0\1\1"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\21\0\1\11\7\0\1\1\1\11"+
    "\2\0\1\11\4\0\1\11\10\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\0\1\11\2\0\2\11\1\0\2\11"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\4\0\1\11"+
    "\2\0\2\11\1\0\2\11\1\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\3\0\1\11\3\0\1\11"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\4\0\1\11"+
    "\4\0\1\11\6\0\1\11\4\0\1\11\2\0\1\11"+
    "\1\0\2\11\3\0\1\11\5\0\1\11\1\0\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\2\11\3\0\2\11"+
    "\4\0\1\11\2\0\1\11\5\0\2\11\3\0\1\11"+
    "\3\0\1\11\5\0\5\11\1\0\4\11\1\0\1\11"+
    "\7\0\3\11\1\0\3\11\3\0\2\11\2\0\2\11"+
    "\3\0\1\11\4\0\1\11\3\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\5\11\1\0\1\11"+
    "\2\0\1\11\5\0\4\11\4\0\2\11\4\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\2\11\1\0\1\11"+
    "\1\0\6\11\4\0\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\1\0\2\11\1\0\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 225: break;
          case 2:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 226: break;
          case 3:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 227: break;
          case 4:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 228: break;
          case 5:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 229: break;
          case 6:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 230: break;
          case 7:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 231: break;
          case 8:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 232: break;
          case 9:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 233: break;
          case 10:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 234: break;
          case 11:
            { return OPERATOR_INTDIV;
            }
          // fall through
          case 235: break;
          case 12:
            { return OPERATOR_OR;
            }
          // fall through
          case 236: break;
          case 13:
            { return STRING;
            }
          // fall through
          case 237: break;
          case 14:
            { return OPERATOR_AND;
            }
          // fall through
          case 238: break;
          case 15:
            { return OPERATOR_POWER;
            }
          // fall through
          case 239: break;
          case 16:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 240: break;
          case 17:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 241: break;
          case 18:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 242: break;
          case 19:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 243: break;
          case 20:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 244: break;
          case 21:
            { return SUBKEY_BY;
            }
          // fall through
          case 245: break;
          case 22:
            { return KEYWORD_DO;
            }
          // fall through
          case 246: break;
          case 23:
            { return KEYWORD_IF;
            }
          // fall through
          case 247: break;
          case 24:
            { return SUBKEY_ON;
            }
          // fall through
          case 248: break;
          case 25:
            { return SUBKEY_TO;
            }
          // fall through
          case 249: break;
          case 26:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 250: break;
          case 27:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 251: break;
          case 28:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 252: break;
          case 29:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 253: break;
          case 30:
            { return OPERATOR_XOR;
            }
          // fall through
          case 254: break;
          case 31:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 255: break;
          case 32:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 256: break;
          case 33:
            { return OPERATOR_STRICT_GREATERTHAN;
            }
          // fall through
          case 257: break;
          case 34:
            { return BUILTIN_ABS;
            }
          // fall through
          case 258: break;
          case 35:
            { return SUBDIRECTIVE_ALL;
            }
          // fall through
          case 259: break;
          case 36:
            { return CONDITION_ANY;
            }
          // fall through
          case 260: break;
          case 37:
            { return KEYWORD_ARG;
            }
          // fall through
          case 261: break;
          case 38:
            { return BUILTIN_B2X;
            }
          // fall through
          case 262: break;
          case 39:
            { return BUILTIN_C2D;
            }
          // fall through
          case 263: break;
          case 40:
            { return BUILTIN_C2X;
            }
          // fall through
          case 264: break;
          case 41:
            { return BUILTIN_D2C;
            }
          // fall through
          case 265: break;
          case 42:
            { return BUILTIN_D2X;
            }
          // fall through
          case 266: break;
          case 43:
            { return KEYWORD_END;
            }
          // fall through
          case 267: break;
          case 44:
            { return SUBKEY_FOR;
            }
          // fall through
          case 268: break;
          case 45:
            { return SUBDIRECTIVE_GET;
            }
          // fall through
          case 269: break;
          case 46:
            { return BUILTIN_MAX;
            }
          // fall through
          case 270: break;
          case 47:
            { return BUILTIN_MIN;
            }
          // fall through
          case 271: break;
          case 48:
            { return KEYWORD_NOP;
            }
          // fall through
          case 272: break;
          case 49:
            { return SUBKEY_OFF;
            }
          // fall through
          case 273: break;
          case 50:
            { return BUILTIN_POS;
            }
          // fall through
          case 274: break;
          case 51:
            { return KEYWORD_SAY;
            }
          // fall through
          case 275: break;
          case 52:
            { return SUBDIRECTIVE_SET;
            }
          // fall through
          case 276: break;
          case 53:
            { return KEYWORD_USE;
            }
          // fall through
          case 277: break;
          case 54:
            { return SUBKEY_VAR;
            }
          // fall through
          case 278: break;
          case 55:
            { return BUILTIN_X2B;
            }
          // fall through
          case 279: break;
          case 56:
            { return BUILTIN_X2C;
            }
          // fall through
          case 280: break;
          case 57:
            { return BUILTIN_X2D;
            }
          // fall through
          case 281: break;
          case 58:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 282: break;
          case 59:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 283: break;
          case 60:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 284: break;
          case 61:
            { return KEYWORD_CALL;
            }
          // fall through
          case 285: break;
          case 62:
            { return SUBKEY_CASE;
            }
          // fall through
          case 286: break;
          case 63:
            { return BUILTIN_DATE;
            }
          // fall through
          case 287: break;
          case 64:
            { return KEYWORD_DROP;
            }
          // fall through
          case 288: break;
          case 65:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 289: break;
          case 66:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 290: break;
          case 67:
            { return SUBKEY_FORM;
            }
          // fall through
          case 291: break;
          case 68:
            { return SUBKEY_FUZZ;
            }
          // fall through
          case 292: break;
          case 69:
            { return CONDITION_HALT;
            }
          // fall through
          case 293: break;
          case 70:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 294: break;
          case 71:
            { return BUILTIN_LEFT;
            }
          // fall through
          case 295: break;
          case 72:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 296: break;
          case 73:
            { return SUBKEY_NAME;
            }
          // fall through
          case 297: break;
          case 74:
            { return SUBKEY_OVER;
            }
          // fall through
          case 298: break;
          case 75:
            { return KEYWORD_PULL;
            }
          // fall through
          case 299: break;
          case 76:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 300: break;
          case 77:
            { return BUILTIN_SIGN;
            }
          // fall through
          case 301: break;
          case 78:
            { return SUBKEY_STEM;
            }
          // fall through
          case 302: break;
          case 79:
            { return KEYWORD_THEN;
            }
          // fall through
          case 303: break;
          case 80:
            { return BUILTIN_TIME;
            }
          // fall through
          case 304: break;
          case 81:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 305: break;
          case 82:
            { return CONDITION_USER;
            }
          // fall through
          case 306: break;
          case 83:
            { return KEYWORD_WHEN;
            }
          // fall through
          case 307: break;
          case 84:
            { return SUBKEY_WITH;
            }
          // fall through
          case 308: break;
          case 85:
            { return BUILTIN_WORD;
            }
          // fall through
          case 309: break;
          case 86:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 310: break;
          case 87:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 311: break;
          case 88:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 312: break;
          case 89:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 313: break;
          case 90:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 314: break;
          case 91:
            { return DIRECTIVE_CLASS;
            }
          // fall through
          case 315: break;
          case 92:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 316: break;
          case 93:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 317: break;
          case 94:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 318: break;
          case 95:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 319: break;
          case 96:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 320: break;
          case 97:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 321: break;
          case 98:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 322: break;
          case 99:
            { return BUILTIN_LINES;
            }
          // fall through
          case 323: break;
          case 100:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 324: break;
          case 101:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 325: break;
          case 102:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 326: break;
          case 103:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 327: break;
          case 104:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 328: break;
          case 105:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 329: break;
          case 106:
            { return BUILTIN_RIGHT;
            }
          // fall through
          case 330: break;
          case 107:
            { return BUILTIN_SPACE;
            }
          // fall through
          case 331: break;
          case 108:
            { return BUILTIN_STRIP;
            }
          // fall through
          case 332: break;
          case 109:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 333: break;
          case 110:
            { return BUILTIN_TRUNC;
            }
          // fall through
          case 334: break;
          case 111:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 335: break;
          case 112:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 336: break;
          case 113:
            { return SUBKEY_USING;
            }
          // fall through
          case 337: break;
          case 114:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 338: break;
          case 115:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 339: break;
          case 116:
            { return BUILTIN_WORDS;
            }
          // fall through
          case 340: break;
          case 117:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 341: break;
          case 118:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 342: break;
          case 119:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 343: break;
          case 120:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 344: break;
          case 121:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 345: break;
          case 122:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 346: break;
          case 123:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 347: break;
          case 124:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 348: break;
          case 125:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 349: break;
          case 126:
            { return SUBKEY_DIGITS;
            }
          // fall through
          case 350: break;
          case 127:
            { return KEYWORD_EXPOSE;
            }
          // fall through
          case 351: break;
          case 128:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 352: break;
          case 129:
            { return BUILTIN_INSERT;
            }
          // fall through
          case 353: break;
          case 130:
            { return BUILTIN_LENGTH;
            }
          // fall through
          case 354: break;
          case 131:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 355: break;
          case 132:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 356: break;
          case 133:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 357: break;
          case 134:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 358: break;
          case 135:
            { return SUBDIRECTIVE_PROLOG;
            }
          // fall through
          case 359: break;
          case 136:
            { return SUBDIRECTIVE_PUBLIC;
            }
          // fall through
          case 360: break;
          case 137:
            { return BUILTIN_QUEUED;
            }
          // fall through
          case 361: break;
          case 138:
            { return BUILTIN_RANDOM;
            }
          // fall through
          case 362: break;
          case 139:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 363: break;
          case 140:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 364: break;
          case 141:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 365: break;
          case 142:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 366: break;
          case 143:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 367: break;
          case 144:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 368: break;
          case 145:
            { return BUILTIN_SUBSTR;
            }
          // fall through
          case 369: break;
          case 146:
            { return BUILTIN_SYMBOL;
            }
          // fall through
          case 370: break;
          case 147:
            { return CONDITION_SYNTAX;
            }
          // fall through
          case 371: break;
          case 148:
            { return BUILTIN_USERID;
            }
          // fall through
          case 372: break;
          case 149:
            { return BUILTIN_VERIFY;
            }
          // fall through
          case 373: break;
          case 150:
            { return BUILTIN_XRANGE;
            }
          // fall through
          case 374: break;
          case 151:
            { return KEYWORD_ADDRESS;
            }
          // fall through
          case 375: break;
          case 152:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 376: break;
          case 153:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 377: break;
          case 154:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 378: break;
          case 155:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 379: break;
          case 156:
            { return CONDITION_FAILURE;
            }
          // fall through
          case 380: break;
          case 157:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 381: break;
          case 158:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 382: break;
          case 159:
            { return SUBDIRECTIVE_GUARDED;
            }
          // fall through
          case 383: break;
          case 160:
            { return SUBDIRECTIVE_INHERIT;
            }
          // fall through
          case 384: break;
          case 161:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 385: break;
          case 162:
            { return BUILTIN_LASTPOS;
            }
          // fall through
          case 386: break;
          case 163:
            { return SUBDIRECTIVE_LIBRARY;
            }
          // fall through
          case 387: break;
          case 164:
            { return BUILTIN_LINEOUT;
            }
          // fall through
          case 388: break;
          case 165:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 389: break;
          case 166:
            { return CONDITION_NOVALUE;
            }
          // fall through
          case 390: break;
          case 167:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 391: break;
          case 168:
            { return DIRECTIVE_OPTIONS;
            }
          // fall through
          case 392: break;
          case 169:
            { return BUILTIN_OVERLAY;
            }
          // fall through
          case 393: break;
          case 170:
            { return SUBDIRECTIVE_PACKAGE;
            }
          // fall through
          case 394: break;
          case 171:
            { return SUBDIRECTIVE_PRIVATE;
            }
          // fall through
          case 395: break;
          case 172:
            { return BUILTIN_QUALIFY;
            }
          // fall through
          case 396: break;
          case 173:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 397: break;
          case 174:
            { return BUILTIN_REVERSE;
            }
          // fall through
          case 398: break;
          case 175:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 399: break;
          case 176:
            { return BUILTIN_RXQUEUE;
            }
          // fall through
          case 400: break;
          case 177:
            { return BUILTIN_SUBWORD;
            }
          // fall through
          case 401: break;
          case 178:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 402: break;
          case 179:
            { return BUILTIN_WORDPOS;
            }
          // fall through
          case 403: break;
          case 180:
            { return SUBDIRECTIVE_ABSTRACT;
            }
          // fall through
          case 404: break;
          case 181:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 405: break;
          case 182:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 406: break;
          case 183:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 407: break;
          case 184:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 408: break;
          case 185:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 409: break;
          case 186:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 410: break;
          case 187:
            { return SUBDIRECTIVE_DELEGATE;
            }
          // fall through
          case 411: break;
          case 188:
            { return BUILTIN_ENDLOCAL;
            }
          // fall through
          case 412: break;
          case 189:
            { return SUBDIRECTIVE_EXTERNAL;
            }
          // fall through
          case 413: break;
          case 190:
            { return CONDITION_NOMETHOD;
            }
          // fall through
          case 414: break;
          case 191:
            { return SUBDIRECTIVE_NOPROLOG;
            }
          // fall through
          case 415: break;
          case 192:
            { return CONDITION_NOSTRING;
            }
          // fall through
          case 416: break;
          case 193:
            { return CONDITION_NOTREADY;
            }
          // fall through
          case 417: break;
          case 194:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 418: break;
          case 195:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 419: break;
          case 196:
            { return BUILTIN_SETLOCAL;
            }
          // fall through
          case 420: break;
          case 197:
            { return SUBDIRECTIVE_SUBCLASS;
            }
          // fall through
          case 421: break;
          case 198:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 422: break;
          case 199:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 423: break;
          case 200:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 424: break;
          case 201:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 425: break;
          case 202:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 426: break;
          case 203:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 427: break;
          case 204:
            { return SUBDIRECTIVE_METACLASS;
            }
          // fall through
          case 428: break;
          case 205:
            { return SUBDIRECTIVE_NAMESPACE;
            }
          // fall through
          case 429: break;
          case 206:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 430: break;
          case 207:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 431: break;
          case 208:
            { return CONDITION_PROPAGATE;
            }
          // fall through
          case 432: break;
          case 209:
            { return SUBDIRECTIVE_PROTECTED;
            }
          // fall through
          case 433: break;
          case 210:
            { return BUILTIN_RXFUNCADD;
            }
          // fall through
          case 434: break;
          case 211:
            { return BUILTIN_TRANSLATE;
            }
          // fall through
          case 435: break;
          case 212:
            { return SUBDIRECTIVE_UNGUARDED;
            }
          // fall through
          case 436: break;
          case 213:
            { return BUILTIN_WORDINDEX;
            }
          // fall through
          case 437: break;
          case 214:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 438: break;
          case 215:
            { return CONDITION_LOSTDIGITS;
            }
          // fall through
          case 439: break;
          case 216:
            { return SUBDIRECTIVE_MIXINCLASS;
            }
          // fall through
          case 440: break;
          case 217:
            { return BUILTIN_RXFUNCDROP;
            }
          // fall through
          case 441: break;
          case 218:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 442: break;
          case 219:
            { return BUILTIN_SOURCELINE;
            }
          // fall through
          case 443: break;
          case 220:
            { return BUILTIN_WORDLENGTH;
            }
          // fall through
          case 444: break;
          case 221:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 445: break;
          case 222:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 446: break;
          case 223:
            { return BUILTIN_RXFUNCQUERY;
            }
          // fall through
          case 447: break;
          case 224:
            { return SUBDIRECTIVE_UNPROTECTED;
            }
          // fall through
          case 448: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
