// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/Parse.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;


public class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\1\1\3\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\2\0\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\1\17\1\20\7\21"+
    "\1\22\1\0\1\23\1\24\1\25\2\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\0"+
    "\1\57\1\0\1\60\1\61\1\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\0\1\62"+
    "\1\0\1\63\6\0\1\1\32\0\1\1\217\0\2\64"+
    "\115\0\1\65\u0200\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\2\11\1\1\1\12\1\13\1\14"+
    "\25\15\1\16\1\1\1\17\1\20\2\1\1\0\1\21"+
    "\1\22\1\23\1\0\1\24\1\25\1\26\5\0\1\27"+
    "\1\30\1\31\1\32\1\33\10\15\1\34\1\0\12\15"+
    "\1\35\1\15\1\0\10\15\1\36\6\15\1\0\5\15"+
    "\1\37\21\15\1\0\1\15\1\40\4\15\1\0\4\15"+
    "\1\0\1\41\1\42\1\43\1\16\1\44\1\45\1\36"+
    "\11\0\1\46\1\47\3\0\1\50\1\51\1\15\2\52"+
    "\3\15\1\53\2\15\1\54\1\15\1\0\1\55\1\56"+
    "\2\15\1\0\7\15\1\57\1\60\3\15\1\0\2\15"+
    "\1\0\1\15\1\0\1\61\4\15\1\0\1\15\1\62"+
    "\14\15\1\0\2\15\1\0\1\15\1\63\2\15\1\64"+
    "\10\15\1\0\2\15\1\0\4\15\1\0\1\15\1\65"+
    "\1\15\1\0\5\15\1\0\5\15\1\66\1\15\1\0"+
    "\1\66\1\15\1\67\3\15\1\0\1\15\1\0\1\70"+
    "\4\0\1\65\5\0\1\71\1\72\3\0\1\73\3\15"+
    "\1\0\10\15\3\0\1\74\2\75\4\15\1\0\4\15"+
    "\1\0\1\15\1\0\2\15\1\76\2\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\77\2\100\1\15\1\0\1\15"+
    "\1\101\1\15\1\101\1\15\1\0\1\15\1\102\1\15"+
    "\1\103\4\15\1\104\5\15\1\105\1\15\1\0\1\15"+
    "\1\0\1\15\1\106\3\15\1\0\2\15\1\107\1\15"+
    "\1\0\1\15\1\110\2\111\2\15\1\0\4\15\1\0"+
    "\2\15\1\0\3\15\1\112\2\15\2\0\1\113\1\15"+
    "\1\114\1\15\1\0\2\15\1\0\2\15\1\0\1\115"+
    "\1\15\1\0\2\116\1\117\1\120\3\0\1\104\3\0"+
    "\1\112\4\0\3\15\1\0\3\15\1\121\1\15\1\0"+
    "\1\15\1\122\1\15\1\0\1\122\1\0\1\15\1\0"+
    "\5\15\1\123\1\0\1\123\2\124\2\15\1\0\2\15"+
    "\2\0\1\15\1\0\4\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\125\1\15\1\0\2\126\3\15"+
    "\1\127\1\130\1\131\2\15\1\132\1\133\1\15\1\0"+
    "\1\134\1\135\1\15\1\0\4\15\1\0\2\15\2\136"+
    "\1\15\1\137\2\140\1\15\1\141\1\15\1\0\2\15"+
    "\1\0\1\15\1\0\1\15\1\0\5\15\2\0\1\142"+
    "\2\143\1\144\2\145\1\146\1\15\1\0\2\147\1\130"+
    "\1\131\10\0\1\150\1\15\1\0\1\15\1\0\1\15"+
    "\1\151\2\15\1\0\1\152\1\153\1\152\1\153\1\15"+
    "\1\0\1\154\1\155\1\15\1\156\1\15\1\156\2\15"+
    "\1\0\2\15\2\0\2\157\2\15\1\0\1\15\1\160"+
    "\1\15\1\160\1\15\1\0\2\161\1\15\1\0\1\15"+
    "\2\162\1\15\1\163\3\15\2\164\1\15\1\0\1\165"+
    "\1\166\1\15\1\0\1\15\1\0\1\15\1\167\3\15"+
    "\1\0\1\15\1\170\1\0\1\15\1\0\1\15\1\0"+
    "\1\171\1\172\1\173\1\174\2\175\1\172\1\15\3\0"+
    "\1\171\1\173\1\174\1\0\1\176\1\0\1\15\1\0"+
    "\2\177\3\15\1\0\1\15\1\0\1\15\1\0\1\200"+
    "\1\201\1\15\1\0\2\15\2\0\1\202\1\15\1\0"+
    "\1\15\1\203\1\15\1\0\1\15\1\0\1\15\1\204"+
    "\1\205\1\15\1\206\2\207\2\210\2\211\1\15\1\0"+
    "\1\15\1\212\1\15\1\0\1\15\1\0\2\213\1\15"+
    "\1\0\2\214\1\0\1\206\1\0\1\215\1\15\1\0"+
    "\1\216\2\15\1\0\2\217\1\15\1\0\1\15\1\0"+
    "\1\220\2\221\1\220\2\222\1\223\1\15\1\0\1\15"+
    "\1\0\3\15\1\0\1\15\2\224\2\225\1\15\3\0"+
    "\1\15\1\0\2\226\2\227\2\230\2\231\1\15\1\0"+
    "\1\15\1\0\1\232\1\233\2\234\1\235\1\15\1\0"+
    "\1\233\1\0\2\236\1\15\1\0\1\15\1\0\2\237"+
    "\1\240\2\241\2\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[763];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\66\0\u08a6\0\u08dc\0\242\0\66\0\u0912"+
    "\0\66\0\u0144\0\66\0\u0948\0\u097e\0\u09b4\0\u01e6\0\u09ea"+
    "\0\u0a20\0\u0a56\0\66\0\66\0\u0a8c\0\66\0\66\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0510"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0510\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u0510\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u0510\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u0510"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\66\0\u1986\0\66\0\u19bc\0\66\0\66"+
    "\0\66\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u09ea\0\u0a20\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\66\0\u1cb0\0\u0510\0\66\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u0510\0\u1e2a\0\u1e60\0\u0510\0\u0510\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u0510\0\u0510\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u0510\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u0510\0\u27a8\0\u27de"+
    "\0\u0510\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u0510\0\u2be0\0\u2c16\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32"+
    "\0\u2e68\0\u0510\0\u2e9e\0\u2ed4\0\66\0\u2f0a\0\u0510\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\66\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a"+
    "\0\u326a\0\u09b4\0\u32a0\0\u32d6\0\u330c\0\66\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u0510\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852"+
    "\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u0510\0\u39cc"+
    "\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u0510\0\u0510"+
    "\0\66\0\u3b46\0\u3b7c\0\u3bb2\0\u0510\0\u3be8\0\66\0\u3c1e"+
    "\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u0510\0\u3d2c\0\u3d62\0\u3d98"+
    "\0\u3dce\0\u0510\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u0510"+
    "\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u0510\0\u4020\0\u4056"+
    "\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u0510\0\u4164\0\u419a\0\u41d0"+
    "\0\u0510\0\u0510\0\66\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e"+
    "\0\u44c4\0\u0510\0\u44fa\0\u4530\0\u4566\0\u459c\0\u0510\0\u45d2"+
    "\0\u0510\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c"+
    "\0\u4782\0\u0510\0\u47b8\0\u47ee\0\u0510\0\66\0\66\0\66"+
    "\0\u4824\0\u485a\0\u4890\0\66\0\u48c6\0\u48fc\0\u4932\0\66"+
    "\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2"+
    "\0\u4b18\0\u4b4e\0\u4b84\0\u0510\0\u4bba\0\u4bf0\0\u4c26\0\u0510"+
    "\0\u4c5c\0\u4c92\0\66\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0"+
    "\0\u4dd6\0\u4e0c\0\u4e42\0\u0510\0\u4e78\0\66\0\u0510\0\66"+
    "\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028"+
    "\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8"+
    "\0\u520e\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u0510"+
    "\0\66\0\u5388\0\u53be\0\u53f4\0\u0510\0\u0510\0\u0510\0\u542a"+
    "\0\u5460\0\u0510\0\u0510\0\u5496\0\u54cc\0\u0510\0\u0510\0\u5502"+
    "\0\u5538\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2"+
    "\0\u0510\0\66\0\u56e8\0\u0510\0\u0510\0\66\0\u571e\0\u0510"+
    "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce"+
    "\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48\0\u5a7e"+
    "\0\u0510\0\u0510\0\66\0\u0510\0\u0510\0\66\0\u0510\0\u5ab4"+
    "\0\u5aea\0\u0510\0\66\0\66\0\66\0\u5b20\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u0510\0\u5cd0\0\u5d06"+
    "\0\u5d3c\0\u5d72\0\u5da8\0\u0510\0\u5dde\0\u5e14\0\u5e4a\0\u0510"+
    "\0\u0510\0\66\0\66\0\u5e80\0\u5eb6\0\u0510\0\u0510\0\u5eec"+
    "\0\u0510\0\u5f22\0\66\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030"+
    "\0\u6066\0\u609c\0\u0510\0\66\0\u60d2\0\u6108\0\u613e\0\u6174"+
    "\0\u0510\0\u61aa\0\66\0\u61e0\0\u6216\0\u0510\0\66\0\u624c"+
    "\0\u6282\0\u62b8\0\u0510\0\66\0\u62ee\0\u0510\0\u6324\0\u635a"+
    "\0\u6390\0\u0510\0\66\0\u63c6\0\u63fc\0\u0510\0\u0510\0\u6432"+
    "\0\u6468\0\u649e\0\u64d4\0\u650a\0\u0510\0\u6540\0\u6576\0\u65ac"+
    "\0\u65e2\0\u6618\0\u0510\0\u664e\0\u6684\0\u66ba\0\u66f0\0\u6726"+
    "\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\66\0\66\0\u675c"+
    "\0\u6792\0\u67c8\0\u67fe\0\66\0\66\0\66\0\u6834\0\66"+
    "\0\u686a\0\u68a0\0\u68d6\0\u0510\0\66\0\u690c\0\u6942\0\u6978"+
    "\0\u69ae\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u0510\0\u0510\0\u6abc"+
    "\0\u6af2\0\u6b28\0\u6b5e\0\u6b94\0\u6bca\0\u0510\0\u6c00\0\u6c36"+
    "\0\u6c6c\0\u0510\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a\0\u0510"+
    "\0\u0510\0\u6db0\0\u0510\0\u0510\0\66\0\u0510\0\66\0\u0510"+
    "\0\66\0\u6de6\0\u6e1c\0\u6e52\0\u0510\0\u6e88\0\u6ebe\0\u6ef4"+
    "\0\u6f2a\0\u0510\0\66\0\u6f60\0\u6f96\0\u0510\0\66\0\u6fcc"+
    "\0\66\0\u7002\0\66\0\u7038\0\u706e\0\u0510\0\u70a4\0\u70da"+
    "\0\u7110\0\u0510\0\66\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u0510"+
    "\0\u0510\0\66\0\66\0\u0510\0\66\0\u0510\0\u721e\0\u7254"+
    "\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce\0\u0510"+
    "\0\66\0\u0510\0\66\0\u7404\0\u743a\0\u7470\0\u74a6\0\u74dc"+
    "\0\u7512\0\u0510\0\66\0\u0510\0\66\0\u0510\0\66\0\u0510"+
    "\0\66\0\u7548\0\u757e\0\u75b4\0\u75ea\0\u0510\0\u0510\0\u0510"+
    "\0\66\0\u0510\0\u7620\0\u7656\0\66\0\u768c\0\u0510\0\66"+
    "\0\u76c2\0\u76f8\0\u772e\0\u7764\0\u0510\0\66\0\66\0\u0510"+
    "\0\66\0\u0510\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[763];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\32\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\3\32\1\50\1\51\1\2\1\52\1\53\1\54"+
    "\1\55\67\0\2\3\63\0\2\56\1\0\1\56\1\57"+
    "\61\56\3\0\1\60\71\0\1\61\56\0\2\62\1\0"+
    "\5\62\1\57\55\62\11\0\1\63\67\0\1\64\70\0"+
    "\4\65\55\0\1\66\70\0\1\67\1\0\4\16\5\0"+
    "\1\70\24\0\1\71\25\0\1\67\1\0\4\16\66\0"+
    "\1\72\70\0\1\73\63\0\1\74\1\75\64\0\1\76"+
    "\1\77\55\0\1\32\1\0\4\32\4\0\1\32\1\100"+
    "\1\32\1\101\10\32\1\102\1\32\1\103\1\32\1\104"+
    "\1\32\1\105\6\32\2\0\1\32\20\0\1\32\1\0"+
    "\2\32\1\106\1\32\4\0\10\32\1\107\16\32\1\110"+
    "\1\32\2\0\1\32\2\0\1\111\15\0\1\32\1\0"+
    "\2\32\1\112\1\32\4\0\1\113\3\32\1\114\2\32"+
    "\1\115\2\32\1\116\2\32\1\117\13\32\2\0\1\32"+
    "\20\0\1\32\1\0\2\32\1\120\1\32\4\0\1\121"+
    "\3\32\1\122\3\32\1\123\4\32\1\124\2\32\1\125"+
    "\10\32\2\0\1\32\2\0\1\126\15\0\1\32\1\0"+
    "\4\32\4\0\12\32\1\127\1\32\1\130\3\32\1\131"+
    "\5\32\1\132\2\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\133\14\32\1\134\5\32\1\135\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\23\32"+
    "\1\136\5\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\31\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\5\32\1\137\6\32\1\140\5\32\1\141\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\1\142"+
    "\3\32\1\143\3\32\1\144\4\32\1\145\13\32\2\0"+
    "\1\32\2\0\1\146\15\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\147\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\150\14\32\1\151\5\32\1\152\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\5\32"+
    "\1\153\6\32\1\154\1\32\1\155\3\32\1\156\1\157"+
    "\1\160\4\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\1\161\17\32\1\162\2\32\1\163\5\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\23\32\1\164"+
    "\5\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\1\165\3\32\1\166\10\32\1\167\13\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\1\170\1\32\1\171"+
    "\1\32\1\172\3\32\1\173\4\32\1\174\4\32\1\175"+
    "\6\32\2\0\1\32\2\0\1\176\15\0\1\32\1\0"+
    "\4\32\4\0\7\32\1\177\5\32\1\200\2\32\1\201"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\14\32\1\202\1\32\1\203\2\32\1\204\7\32\2\0"+
    "\1\32\3\0\1\205\14\0\1\32\1\0\4\32\4\0"+
    "\1\206\3\32\1\207\24\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\7\32\1\210\1\211\20\32\2\0"+
    "\1\32\2\0\1\212\24\0\1\213\1\214\1\215\31\0"+
    "\1\216\66\0\1\217\67\0\1\220\36\0\1\221\6\0"+
    "\1\222\5\0\1\223\43\0\1\224\1\0\1\225\1\0"+
    "\1\226\3\0\1\176\4\0\1\227\4\0\1\230\13\0"+
    "\1\176\1\0\2\60\1\0\63\60\2\64\1\0\63\64"+
    "\16\0\4\65\10\0\1\231\33\0\11\66\1\232\54\66"+
    "\16\0\2\233\64\0\4\234\4\0\6\234\60\0\1\235"+
    "\1\0\1\236\10\0\1\237\47\0\1\240\1\0\1\241"+
    "\54\0\1\32\1\0\4\32\4\0\1\32\1\242\17\32"+
    "\1\243\7\32\2\0\1\32\3\0\1\244\14\0\1\32"+
    "\1\0\4\32\4\0\3\32\1\245\25\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\14\32\1\246\14\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\16\32"+
    "\1\247\12\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\6\32\1\250\11\32\1\251\10\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\22\32\1\252\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\26\32"+
    "\1\253\2\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\254\6\32\2\0\1\32\54\0\1\255"+
    "\31\0\1\32\1\0\4\32\4\0\3\32\1\256\22\32"+
    "\1\257\2\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\12\32\1\260\6\32\1\261\7\32\2\0\1\32"+
    "\3\0\1\262\14\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\263\14\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\1\264\30\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\265\30\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\13\32\1\266\1\267\1\32\1\270"+
    "\4\32\1\271\5\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\2\32\1\272\23\32\1\273\2\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\22\32\1\274"+
    "\6\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\12\32\1\275\6\32\1\276\7\32\2\0\1\32\3\0"+
    "\1\277\14\0\1\32\1\0\4\32\4\0\6\32\1\300"+
    "\22\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\15\32\1\301\13\32\2\0\1\32\40\0\1\302\45\0"+
    "\1\32\1\0\4\32\4\0\21\32\1\303\7\32\2\0"+
    "\1\32\3\0\1\304\14\0\1\32\1\0\4\32\4\0"+
    "\3\32\1\305\2\32\1\306\22\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\20\32\1\307\10\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\10\32\1\310"+
    "\5\32\1\311\12\32\2\0\1\32\2\0\1\312\15\0"+
    "\1\32\1\0\4\32\4\0\12\32\1\313\16\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\20\32\1\314"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\30\32\1\315\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\1\316\30\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\3\32\1\317\12\32\1\320\3\32\1\321"+
    "\6\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\322\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\32\1\323\27\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\1\324\30\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\14\32\1\325\14\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\2\32"+
    "\1\326\12\32\1\327\7\32\1\330\3\32\2\0\1\32"+
    "\46\0\1\331\37\0\1\32\1\0\4\32\4\0\21\32"+
    "\1\332\1\333\6\32\2\0\1\32\3\0\1\334\14\0"+
    "\1\32\1\0\4\32\4\0\13\32\1\335\15\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\16\32\1\336"+
    "\1\32\1\337\10\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\13\32\1\340\15\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\5\32\1\341\23\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\22\32\1\342"+
    "\6\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\7\32\1\343\21\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\22\32\1\344\6\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\345\24\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\20\32\1\346"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\15\32\1\347\13\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\12\32\1\350\6\32\1\351\7\32\2\0"+
    "\1\32\3\0\1\352\14\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\353\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\10\32\1\354\20\32\2\0\1\32\2\0"+
    "\1\355\15\0\1\32\1\0\4\32\4\0\16\32\1\356"+
    "\1\357\1\32\1\360\1\361\6\32\2\0\1\32\3\0"+
    "\1\362\14\0\1\32\1\0\4\32\4\0\23\32\1\363"+
    "\5\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\27\32\1\364\1\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\10\32\1\365\20\32\2\0\1\32\2\0"+
    "\1\366\15\0\1\32\1\0\4\32\4\0\12\32\1\367"+
    "\16\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\6\32\1\370\22\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\23\32\1\371\5\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\372\13\32\1\373"+
    "\10\32\2\0\1\32\40\0\1\374\45\0\1\32\1\0"+
    "\4\32\4\0\4\32\1\375\24\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\1\376\22\32\1\377\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\22\32"+
    "\1\u0100\6\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\16\32\1\u0101\12\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0102\3\32\1\u0103\20\32"+
    "\2\0\1\32\2\0\1\u0104\33\0\1\u0105\3\0\1\u0104"+
    "\25\0\1\u0104\15\0\1\32\1\0\4\32\4\0\12\32"+
    "\1\u0106\5\32\1\u0107\10\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\20\32\1\u0108\10\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\4\32\1\u0109\3\32"+
    "\1\u010a\20\32\2\0\1\32\2\0\1\u010b\15\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u010c\6\32\2\0\1\32"+
    "\54\0\1\u010d\41\0\1\u010e\120\0\1\216\37\0\1\u010f"+
    "\12\0\1\u0110\3\0\1\u0111\47\0\1\u0112\110\0\1\u0113"+
    "\46\0\1\366\25\0\1\366\41\0\1\u0114\76\0\1\u0115"+
    "\46\0\1\u0116\13\0\1\u0117\31\0\2\u0118\2\0\4\u0119"+
    "\55\0\1\232\3\0\1\u011a\120\0\1\u011b\55\0\1\u011c"+
    "\57\0\1\u011d\57\0\1\u011e\55\0\1\32\1\0\4\32"+
    "\4\0\20\32\1\u011f\10\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\10\32\1\u0120\7\32\1\u0121\10\32"+
    "\2\0\1\32\2\0\1\u0122\15\0\1\32\1\0\4\32"+
    "\4\0\15\32\1\u0123\13\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0124\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\23\32\1\u0125\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\1\u0126"+
    "\30\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\20\32\1\u0127\10\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\u0128\14\32\1\u0129\10\32\1\u012a\2\32"+
    "\2\0\1\32\32\0\1\u012b\14\0\1\u012c\10\0\1\u012d"+
    "\25\0\1\32\1\0\4\32\4\0\12\32\1\u012e\16\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u012f\24\32\2\0\1\32\36\0\1\u0130\47\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u0131\6\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\14\32\1\u0132\3\32"+
    "\1\u0133\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u0134\7\32\2\0\1\32\3\0\1\u0135"+
    "\14\0\1\32\1\0\4\32\4\0\16\32\1\u0136\12\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\3\32"+
    "\1\u0137\15\32\1\u0138\1\u0139\6\32\2\0\1\32\3\0"+
    "\1\u013a\14\0\1\32\1\0\4\32\4\0\10\32\1\u013b"+
    "\20\32\2\0\1\32\2\0\1\u013c\15\0\1\32\1\0"+
    "\4\32\4\0\14\32\1\u013d\14\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\1\u013e\3\32\1\u013f\24\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\21\32"+
    "\1\u0140\3\32\1\u0141\3\32\2\0\1\32\3\0\1\u0142"+
    "\14\0\1\32\1\0\4\32\4\0\2\32\1\u0143\26\32"+
    "\2\0\1\32\34\0\1\u0144\51\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u0145\20\32\2\0\1\32\2\0\1\u0146"+
    "\15\0\1\32\1\0\4\32\4\0\16\32\1\u0147\12\32"+
    "\2\0\1\32\42\0\1\u0146\25\0\1\u0146\15\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0148\24\32\2\0\1\32"+
    "\36\0\1\u0149\47\0\1\32\1\0\4\32\4\0\10\32"+
    "\1\u014a\20\32\2\0\1\32\2\0\1\u014b\15\0\1\32"+
    "\1\0\4\32\4\0\15\32\1\u014c\13\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\22\32\1\u014d\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\15\32"+
    "\1\u014e\13\32\2\0\1\32\54\0\1\u014f\31\0\1\32"+
    "\1\0\4\32\4\0\21\32\1\u0150\7\32\2\0\1\32"+
    "\3\0\1\u0151\14\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u0152\6\32\1\u0153\11\32\1\u0154\3\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\30\32\1\u0155\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\20\32\1\u0156"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\u0157\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\23\32\1\u0158\5\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\u0159\24\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\13\32\1\u015a"+
    "\4\32\1\u015b\10\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\4\32\1\u015c\24\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\24\32\1\u015d\4\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\4\32\1\u015e"+
    "\24\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\1\u015f\30\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\16\32\1\u0160\12\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0161\24\32\2\0\1\32"+
    "\36\0\1\u0162\47\0\1\32\1\0\4\32\4\0\21\32"+
    "\1\u0163\7\32\2\0\1\32\3\0\1\u0164\14\0\1\32"+
    "\1\0\4\32\4\0\7\32\1\u0165\21\32\2\0\1\32"+
    "\53\0\1\u0164\15\0\1\u0164\14\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u0166\24\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\13\32\1\u0167\15\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\4\32\1\u0168\24\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\10\32"+
    "\1\u0169\20\32\2\0\1\32\2\0\1\u016a\15\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u016b\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\16\32\1\u016c\12\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u016d\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u016e\7\32\2\0\1\32\3\0\1\u016f"+
    "\14\0\1\32\1\0\4\32\4\0\2\32\1\u0170\26\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\12\32"+
    "\1\u0171\16\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\7\32\1\u0172\21\32\2\0\1\32\41\0\1\u0173"+
    "\44\0\1\32\1\0\4\32\4\0\23\32\1\u0174\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\21\32"+
    "\1\u0175\7\32\2\0\1\32\3\0\1\u0176\47\0\1\u0176"+
    "\15\0\1\u0176\14\0\1\32\1\0\4\32\4\0\12\32"+
    "\1\u0177\16\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\23\32\1\u0178\5\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\15\32\1\u0179\13\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\23\32\1\u017a\5\32"+
    "\2\0\1\32\47\0\1\u017b\36\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u017c\6\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u017d\24\32\2\0\1\32"+
    "\36\0\1\u017e\47\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u017f\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\14\32\1\u0180\14\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\20\32\1\u0181\10\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\13\32\1\u0182\15\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u0183\3\32\1\u0184\20\32\2\0\1\32\2\0\1\u0185"+
    "\43\0\1\u0186\37\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\u0187\14\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\2\32\1\u0188\26\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0189\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\10\32\1\u018a\20\32"+
    "\2\0\1\32\2\0\1\u018b\15\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u018c\24\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\14\32\1\u018d\14\32\2\0\1\32"+
    "\46\0\1\u018e\37\0\1\32\1\0\4\32\4\0\23\32"+
    "\1\u018f\5\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u0190\7\32\2\0\1\32\3\0\1\u0191"+
    "\14\0\1\32\1\0\4\32\4\0\14\32\1\u0192\14\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\12\32"+
    "\1\u0193\16\32\2\0\1\32\44\0\1\u0194\41\0\1\32"+
    "\1\0\4\32\4\0\7\32\1\u0195\21\32\2\0\1\32"+
    "\41\0\1\u0196\53\0\1\u0197\1\0\1\u0198\72\0\1\u0199"+
    "\104\0\1\u019a\46\0\1\u019b\74\0\1\u019c\4\0\1\u019d"+
    "\51\0\1\u019e\101\0\1\u019f\60\0\1\u01a0\56\0\1\u01a1"+
    "\3\0\1\u0185\25\0\1\u0185\17\0\4\u0119\114\0\1\u01a2"+
    "\43\0\1\u01a3\107\0\1\u01a4\31\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u01a5\24\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u01a6\6\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\4\32\1\u01a7\24\32"+
    "\2\0\1\32\54\0\1\u01a8\31\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u01a9\6\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\14\32\1\u01aa\14\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\13\32\1\u01ab\15\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\27\32"+
    "\1\u01ac\1\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u01ad\20\32\2\0\1\32\2\0\1\u01ae"+
    "\15\0\1\32\1\0\4\32\4\0\14\32\1\u01af\14\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u01b0\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\15\32\1\u01b1\13\32\2\0\1\32\46\0\1\u01b2"+
    "\71\0\1\u01b3\62\0\1\u01b4\36\0\1\32\1\0\4\32"+
    "\4\0\12\32\1\u01b5\16\32\2\0\1\32\44\0\1\u01b6"+
    "\41\0\1\32\1\0\4\32\4\0\4\32\1\u01b7\13\32"+
    "\1\u01b8\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\6\32\1\u01b9\22\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\10\32\1\u01ba\4\32\1\u01bb\3\32"+
    "\1\u01bc\7\32\2\0\1\32\2\0\1\u01bd\1\u01be\14\0"+
    "\1\32\1\0\4\32\4\0\21\32\1\u01bf\7\32\2\0"+
    "\1\32\3\0\1\u01c0\47\0\1\u01c0\15\0\1\u01c0\14\0"+
    "\1\32\1\0\4\32\4\0\1\u01c1\30\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\10\32\1\u01c2\20\32"+
    "\2\0\1\32\2\0\1\u01c3\15\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u01c4\6\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\10\32\1\u01c5\20\32\2\0\1\32"+
    "\2\0\1\u01c6\51\0\1\u01c7\31\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u01c8\24\32\2\0\1\32\36\0\1\u01c9"+
    "\47\0\1\32\1\0\4\32\4\0\22\32\1\u01ca\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\22\32"+
    "\1\u01cb\6\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u01cc\6\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\15\32\1\u01cd\13\32\2\0\1\32"+
    "\54\0\1\u01ce\31\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u01cf\10\32\2\0\1\32\52\0\1\u01d0\33\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u01d1\6\32\2\0\1\32"+
    "\54\0\1\u01d2\31\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\u01d3\14\32\2\0\1\32\46\0\1\u01d4\37\0\1\32"+
    "\1\0\4\32\4\0\20\32\1\u01d5\10\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\21\32\1\u01d6\7\32"+
    "\2\0\1\32\3\0\1\u01d7\14\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u01d8\24\32\2\0\1\32\36\0\1\u01d9"+
    "\47\0\1\32\1\0\4\32\4\0\24\32\1\u01da\4\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\1\u01db"+
    "\30\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\1\u01dc\30\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\3\32\1\u01dd\25\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\26\32\1\u01de\2\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\22\32\1\u01df\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u01e0\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\1\u01e1\30\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\12\32\1\u01e2\16\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\u01e3\24\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\10\32\1\u01e4"+
    "\20\32\2\0\1\32\2\0\1\u01e5\15\0\1\32\1\0"+
    "\4\32\4\0\12\32\1\u01e6\16\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\20\32\1\u01e7\10\32\2\0"+
    "\1\32\42\0\1\u01e5\25\0\1\u01e5\15\0\1\32\1\0"+
    "\4\32\4\0\1\u01e8\30\32\2\0\1\32\32\0\1\u01e9"+
    "\53\0\1\32\1\0\4\32\4\0\15\32\1\u01ea\13\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\1\u01eb"+
    "\30\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\20\32\1\u01ec\10\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\15\32\1\u01ed\13\32\2\0\1\32\47\0"+
    "\1\u01ee\36\0\1\32\1\0\4\32\4\0\20\32\1\u01ef"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\23\32\1\u01f0\5\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\4\32\1\u01f1\24\32\2\0\1\32\36\0"+
    "\1\u01f2\47\0\1\32\1\0\4\32\4\0\4\32\1\u01f3"+
    "\24\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\u01f4\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\4\32\1\u01f5\24\32\2\0\1\32\36\0"+
    "\1\u01f6\47\0\1\32\1\0\4\32\4\0\1\u01f7\26\32"+
    "\1\u01f8\1\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u01f9\20\32\2\0\1\32\2\0\1\u01fa"+
    "\15\0\1\32\1\0\4\32\4\0\23\32\1\u01fb\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u01fc\10\32\2\0\1\32\55\0\1\u01fd\30\0\1\32"+
    "\1\0\4\32\4\0\10\32\1\u01fe\20\32\2\0\1\32"+
    "\2\0\1\u01ff\15\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\u0200\14\32\2\0\1\32\46\0\1\u0201\37\0\1\32"+
    "\1\0\4\32\4\0\2\32\1\u0202\26\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\1\u0203\30\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\2\32\1\u0204"+
    "\26\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\1\u0205\30\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\2\32\1\u0206\26\32\2\0\1\32\34\0\1\u0207"+
    "\63\0\1\u0208\53\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u0209\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\12\32\1\u020a\16\32\2\0\1\32\44\0\1\u020b"+
    "\41\0\1\32\1\0\4\32\4\0\20\32\1\u020c\10\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\6\32"+
    "\1\u020d\22\32\2\0\1\32\40\0\1\u020e\45\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u020f\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\10\32\1\u0210\20\32"+
    "\2\0\1\32\2\0\1\u0211\37\0\1\u0211\25\0\1\u0211"+
    "\15\0\1\32\1\0\4\32\4\0\4\32\1\u0212\24\32"+
    "\2\0\1\32\36\0\1\u0213\107\0\1\u0214\61\0\1\u0215"+
    "\63\0\1\u0216\45\0\1\u0217\67\0\1\u0218\65\0\1\u0219"+
    "\63\0\1\u021a\105\0\1\u021b\66\0\1\u021c\15\0\1\u021c"+
    "\35\0\1\u021d\44\0\1\32\1\0\4\32\4\0\24\32"+
    "\1\u021e\4\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u021f\20\32\2\0\1\32\2\0\1\u0220"+
    "\15\0\1\32\1\0\4\32\4\0\21\32\1\u0221\7\32"+
    "\2\0\1\32\3\0\1\u0222\36\0\1\u0220\25\0\1\u0220"+
    "\15\0\1\32\1\0\4\32\4\0\1\u0223\30\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\3\32\1\u0224"+
    "\25\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\u0225\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\1\32\1\u0226\27\32\2\0\1\32\33\0"+
    "\1\u0227\52\0\1\32\1\0\4\32\4\0\3\32\1\u0228"+
    "\25\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\20\32\1\u0229\10\32\2\0\1\32\35\0\1\u022a\102\0"+
    "\1\u022b\33\0\1\32\1\0\4\32\4\0\4\32\1\u022c"+
    "\24\32\2\0\1\32\36\0\1\u022d\47\0\1\32\1\0"+
    "\4\32\4\0\20\32\1\u022e\10\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\u022f\24\32\2\0"+
    "\1\32\20\0\1\32\1\0\4\32\4\0\4\32\1\u0230"+
    "\24\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\14\32\1\u0231\14\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\23\32\1\u0232\5\32\2\0\1\32\46\0"+
    "\1\u0233\37\0\1\32\1\0\4\32\4\0\20\32\1\u0234"+
    "\10\32\2\0\1\32\20\0\1\32\1\0\4\32\4\0"+
    "\22\32\1\u0235\6\32\2\0\1\32\54\0\1\u0236\31\0"+
    "\1\32\1\0\4\32\4\0\1\u0237\30\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\14\32\1\u0238\14\32"+
    "\2\0\1\32\46\0\1\u0239\51\0\1\u023a\53\0\1\32"+
    "\1\0\4\32\4\0\21\32\1\u023b\7\32\2\0\1\32"+
    "\3\0\1\u023c\47\0\1\u023c\15\0\1\u023c\14\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u023d\14\32\1\u023e\7\32"+
    "\2\0\1\32\3\0\1\u023f\14\0\1\32\1\0\4\32"+
    "\4\0\27\32\1\u0240\1\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\20\32\1\u0241\10\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\20\32\1\u0242\10\32"+
    "\2\0\1\32\52\0\1\u0243\33\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u0244\20\32\2\0\1\32\2\0\1\u0245"+
    "\37\0\1\u0245\25\0\1\u0245\15\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u0246\7\32\2\0\1\32\3\0\1\u0247"+
    "\47\0\1\u0247\15\0\1\u0247\14\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u0248\24\32\2\0\1\32\36\0\1\u0249"+
    "\47\0\1\32\1\0\4\32\4\0\22\32\1\u024a\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u024b\24\32\2\0\1\32\36\0\1\u024c\47\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u024d\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\22\32\1\u024e\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u024f\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\16\32\1\u0250\12\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u0251\6\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\14\32\1\u0252\14\32"+
    "\2\0\1\32\46\0\1\u0253\37\0\1\32\1\0\4\32"+
    "\4\0\6\32\1\u0254\22\32\2\0\1\32\40\0\1\u0255"+
    "\45\0\1\32\1\0\4\32\4\0\3\32\1\u0256\25\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\12\32"+
    "\1\u0257\16\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u0258\20\32\2\0\1\32\2\0\1\u0259"+
    "\15\0\1\32\1\0\4\32\4\0\14\32\1\u025a\14\32"+
    "\2\0\1\32\46\0\1\u025b\37\0\1\32\1\0\4\32"+
    "\4\0\25\32\1\u025c\3\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u025d\6\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\3\32\1\u025e\25\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\2\32"+
    "\1\u025f\26\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\20\32\1\u0260\10\32\2\0\1\32\52\0\1\u0261"+
    "\33\0\1\32\1\0\4\32\4\0\20\32\1\u0262\10\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\u0263\14\32\2\0\1\32\52\0\1\u0264\33\0\1\32"+
    "\1\0\4\32\4\0\14\32\1\u0265\14\32\2\0\1\32"+
    "\46\0\1\u0266\37\0\1\32\1\0\4\32\4\0\22\32"+
    "\1\u0267\6\32\2\0\1\32\54\0\1\u0268\31\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u0269\6\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\12\32\1\u026a\16\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u026b\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\13\32\1\u026c\15\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u026d\6\32\2\0\1\32"+
    "\54\0\1\u026e\55\0\1\u026f\41\0\1\32\1\0\4\32"+
    "\4\0\15\32\1\u0270\13\32\2\0\1\32\47\0\1\u0271"+
    "\66\0\1\u0272\71\0\1\u0273\65\0\1\u0274\47\0\1\u0275"+
    "\74\0\1\u0276\62\0\1\u0277\25\0\1\u0277\50\0\1\u0278"+
    "\15\0\1\u0278\43\0\1\u0279\36\0\1\32\1\0\4\32"+
    "\4\0\15\32\1\u027a\13\32\2\0\1\32\47\0\1\u027b"+
    "\36\0\1\32\1\0\4\32\4\0\21\32\1\u027c\7\32"+
    "\2\0\1\32\3\0\1\u027d\47\0\1\u027d\15\0\1\u027d"+
    "\14\0\1\32\1\0\4\32\4\0\22\32\1\u027e\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\14\32"+
    "\1\u027f\14\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\23\32\1\u0280\5\32\2\0\1\32\55\0\1\u0281"+
    "\30\0\1\32\1\0\4\32\4\0\21\32\1\u0282\7\32"+
    "\2\0\1\32\3\0\1\u0283\47\0\1\u0283\15\0\1\u0283"+
    "\14\0\1\32\1\0\4\32\4\0\21\32\1\u0284\7\32"+
    "\2\0\1\32\3\0\1\u0285\14\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u0286\6\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0287\24\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\10\32\1\u0288\20\32"+
    "\2\0\1\32\2\0\1\u0289\37\0\1\u0289\25\0\1\u0289"+
    "\15\0\1\32\1\0\4\32\4\0\14\32\1\u028a\14\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\23\32"+
    "\1\u028b\5\32\2\0\1\32\55\0\1\u028c\56\0\1\u028d"+
    "\37\0\1\32\1\0\4\32\4\0\20\32\1\u028e\10\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\22\32"+
    "\1\u028f\6\32\2\0\1\32\54\0\1\u0290\31\0\1\32"+
    "\1\0\4\32\4\0\16\32\1\u0291\12\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\3\32\1\u0292\25\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\16\32"+
    "\1\u0293\12\32\2\0\1\32\50\0\1\u0294\35\0\1\32"+
    "\1\0\4\32\4\0\4\32\1\u0295\24\32\2\0\1\32"+
    "\36\0\1\u0296\47\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u0297\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\20\32\1\u0298\10\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\3\32\1\u0299\25\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\20\32\1\u029a\10\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u029b\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u029c\24\32\2\0\1\32\36\0\1\u029d"+
    "\47\0\1\32\1\0\4\32\4\0\2\32\1\u029e\26\32"+
    "\2\0\1\32\34\0\1\u029f\51\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u02a0\7\32\2\0\1\32\3\0\1\u02a1"+
    "\47\0\1\u02a1\15\0\1\u02a1\14\0\1\32\1\0\4\32"+
    "\4\0\10\32\1\u02a2\20\32\2\0\1\32\2\0\1\u02a3"+
    "\15\0\1\32\1\0\4\32\4\0\23\32\1\u02a4\5\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u02a5\24\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u02a6\24\32\2\0\1\32\36\0\1\u02a7"+
    "\47\0\1\32\1\0\4\32\4\0\2\32\1\u02a8\26\32"+
    "\2\0\1\32\34\0\1\u02a9\51\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u02aa\24\32\2\0\1\32\36\0\1\u02ab"+
    "\47\0\1\32\1\0\4\32\4\0\10\32\1\u02ac\20\32"+
    "\2\0\1\32\2\0\1\u02ad\37\0\1\u02ad\25\0\1\u02ad"+
    "\15\0\1\32\1\0\4\32\4\0\14\32\1\u02ae\14\32"+
    "\2\0\1\32\46\0\1\u02af\71\0\1\u02b0\51\0\1\u02b1"+
    "\62\0\1\u02b2\67\0\1\u02b3\50\0\1\32\1\0\4\32"+
    "\4\0\14\32\1\u02b4\14\32\2\0\1\32\46\0\1\u02b5"+
    "\37\0\1\32\1\0\4\32\4\0\4\32\1\u02b6\24\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\22\32"+
    "\1\u02b7\6\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\22\32\1\u02b8\6\32\2\0\1\32\54\0\1\u02b9"+
    "\31\0\1\32\1\0\4\32\4\0\21\32\1\u02ba\7\32"+
    "\2\0\1\32\3\0\1\u02bb\47\0\1\u02bb\15\0\1\u02bb"+
    "\14\0\1\32\1\0\4\32\4\0\22\32\1\u02bc\6\32"+
    "\2\0\1\32\54\0\1\u02bd\31\0\1\32\1\0\4\32"+
    "\4\0\15\32\1\u02be\13\32\2\0\1\32\47\0\1\u02bf"+
    "\36\0\1\32\1\0\4\32\4\0\22\32\1\u02c0\6\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\4\32"+
    "\1\u02c1\24\32\2\0\1\32\36\0\1\u02c2\103\0\1\u02c3"+
    "\31\0\1\32\1\0\4\32\4\0\20\32\1\u02c4\10\32"+
    "\2\0\1\32\52\0\1\u02c5\33\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u02c6\24\32\2\0\1\32\20\0\1\32"+
    "\1\0\4\32\4\0\22\32\1\u02c7\6\32\2\0\1\32"+
    "\54\0\1\u02c8\31\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u02c9\10\32\2\0\1\32\52\0\1\u02ca\33\0\1\32"+
    "\1\0\4\32\4\0\26\32\1\u02cb\2\32\2\0\1\32"+
    "\20\0\1\32\1\0\4\32\4\0\4\32\1\u02cc\24\32"+
    "\2\0\1\32\20\0\1\32\1\0\4\32\4\0\21\32"+
    "\1\u02cd\7\32\2\0\1\32\3\0\1\u02ce\47\0\1\u02ce"+
    "\15\0\1\u02ce\14\0\1\32\1\0\4\32\4\0\20\32"+
    "\1\u02cf\10\32\2\0\1\32\20\0\1\32\1\0\4\32"+
    "\4\0\21\32\1\u02d0\7\32\2\0\1\32\3\0\1\u02d1"+
    "\47\0\1\u02d1\15\0\1\u02d1\14\0\1\32\1\0\4\32"+
    "\4\0\4\32\1\u02d2\24\32\2\0\1\32\36\0\1\u02d3"+
    "\47\0\1\32\1\0\4\32\4\0\5\32\1\u02d4\23\32"+
    "\2\0\1\32\37\0\1\u02d5\64\0\1\u02d6\104\0\1\u02d7"+
    "\30\0\1\32\1\0\4\32\4\0\1\u02d8\30\32\2\0"+
    "\1\32\32\0\1\u02d9\53\0\1\32\1\0\4\32\4\0"+
    "\21\32\1\u02da\7\32\2\0\1\32\3\0\1\u02db\14\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\u02dc\24\32\2\0"+
    "\1\32\36\0\1\u02dd\47\0\1\32\1\0\4\32\4\0"+
    "\20\32\1\u02de\10\32\2\0\1\32\52\0\1\u02df\33\0"+
    "\1\32\1\0\4\32\4\0\14\32\1\u02e0\14\32\2\0"+
    "\1\32\46\0\1\u02e1\37\0\1\32\1\0\4\32\4\0"+
    "\10\32\1\u02e2\20\32\2\0\1\32\2\0\1\u02e3\37\0"+
    "\1\u02e3\25\0\1\u02e3\15\0\1\32\1\0\4\32\4\0"+
    "\10\32\1\u02e4\20\32\2\0\1\32\2\0\1\u02e5\37\0"+
    "\1\u02e5\25\0\1\u02e5\15\0\1\32\1\0\4\32\4\0"+
    "\22\32\1\u02e6\6\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\22\32\1\u02e7\6\32\2\0\1\32\20\0"+
    "\1\32\1\0\4\32\4\0\4\32\1\u02e8\24\32\2\0"+
    "\1\32\36\0\1\u02e9\47\0\1\32\1\0\4\32\4\0"+
    "\4\32\1\u02ea\24\32\2\0\1\32\20\0\1\32\1\0"+
    "\4\32\4\0\10\32\1\u02eb\20\32\2\0\1\32\2\0"+
    "\1\u02ec\37\0\1\u02ec\25\0\1\u02ec\51\0\1\u02ed\65\0"+
    "\1\u02ee\31\0\1\32\1\0\4\32\4\0\12\32\1\u02ef"+
    "\16\32\2\0\1\32\44\0\1\u02f0\41\0\1\32\1\0"+
    "\4\32\4\0\15\32\1\u02f1\13\32\2\0\1\32\47\0"+
    "\1\u02f2\36\0\1\32\1\0\4\32\4\0\14\32\1\u02f3"+
    "\14\32\2\0\1\32\46\0\1\u02f4\37\0\1\32\1\0"+
    "\4\32\4\0\2\32\1\u02f5\26\32\2\0\1\32\34\0"+
    "\1\u02f6\67\0\1\u02f7\47\0\1\32\1\0\4\32\4\0"+
    "\14\32\1\u02f8\14\32\2\0\1\32\46\0\1\u02f9\37\0"+
    "\1\32\1\0\4\32\4\0\6\32\1\u02fa\22\32\2\0"+
    "\1\32\40\0\1\u02fb\31\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30618];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\44\1\1\11\2\1\1\0"+
    "\1\11\1\1\1\11\1\0\1\11\2\1\5\0\2\11"+
    "\1\1\2\11\11\1\1\0\14\1\1\0\17\1\1\0"+
    "\27\1\1\0\6\1\1\0\4\1\1\0\1\11\1\1"+
    "\1\11\1\1\3\11\11\0\2\1\3\0\1\1\1\11"+
    "\2\1\1\11\10\1\1\0\4\1\1\0\14\1\1\0"+
    "\2\1\1\0\1\1\1\0\5\1\1\0\16\1\1\0"+
    "\2\1\1\0\15\1\1\0\2\1\1\0\4\1\1\0"+
    "\3\1\1\0\5\1\1\0\7\1\1\0\1\11\5\1"+
    "\1\0\1\1\1\0\1\1\4\0\1\11\5\0\2\1"+
    "\3\0\1\11\3\1\1\0\10\1\3\0\7\1\1\0"+
    "\4\1\1\0\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\3\1\1\11"+
    "\1\1\1\0\20\1\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\11\2\1\1\0\4\1\1\0"+
    "\2\1\1\0\6\1\2\0\4\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\3\11\3\0\1\11"+
    "\3\0\1\11\4\0\3\1\1\0\5\1\1\0\3\1"+
    "\1\0\1\11\1\0\1\1\1\0\6\1\1\0\1\11"+
    "\1\1\1\11\2\1\1\0\2\1\2\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\13\1\1\0\3\1\1\0"+
    "\4\1\1\0\3\1\1\11\3\1\1\11\3\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\5\1\2\0"+
    "\2\1\1\11\2\1\1\11\2\1\1\0\1\1\3\11"+
    "\10\0\2\1\1\0\1\1\1\0\4\1\1\0\2\1"+
    "\2\11\1\1\1\0\5\1\1\11\2\1\1\0\2\1"+
    "\2\0\1\1\1\11\2\1\1\0\3\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\1\11\6\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\2\11\1\1\3\0\3\11\1\0\1\11\1\0\1\1"+
    "\1\0\1\1\1\11\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\2\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\6\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\1\11\1\0"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\2\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\11\1\1"+
    "\1\11\1\1\3\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\2\1\1\0\1\11\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\2\11\1\1"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[763];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _RexxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 163: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 164: break;
          case 3:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 165: break;
          case 4:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 166: break;
          case 5:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 167: break;
          case 6:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 168: break;
          case 7:
            { return DOT;
            }
          // fall through
          case 169: break;
          case 8:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 170: break;
          case 9:
            { return NUMBER_INT;
            }
          // fall through
          case 171: break;
          case 10:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 172: break;
          case 11:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 173: break;
          case 12:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 174: break;
          case 13:
            { return IDENTIFIER;
            }
          // fall through
          case 175: break;
          case 14:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 176: break;
          case 15:
            { return OPERATOR_OR;
            }
          // fall through
          case 177: break;
          case 16:
            { return TILDE;
            }
          // fall through
          case 178: break;
          case 17:
            { return STRING;
            }
          // fall through
          case 179: break;
          case 18:
            { return SHEBANG;
            }
          // fall through
          case 180: break;
          case 19:
            { return OPERATOR_AND;
            }
          // fall through
          case 181: break;
          case 20:
            { return OPERATOR_POWER;
            }
          // fall through
          case 182: break;
          case 21:
            { return LINE_COMMENT;
            }
          // fall through
          case 183: break;
          case 22:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 184: break;
          case 23:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 185: break;
          case 24:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 186: break;
          case 25:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 187: break;
          case 26:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 188: break;
          case 27:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 189: break;
          case 28:
            { return SUBKEY_BY;
            }
          // fall through
          case 190: break;
          case 29:
            { return KEYWORD_DO;
            }
          // fall through
          case 191: break;
          case 30:
            { return KEYWORD_IF;
            }
          // fall through
          case 192: break;
          case 31:
            { return SUBKEY_ON;
            }
          // fall through
          case 193: break;
          case 32:
            { return SUBKEY_TO;
            }
          // fall through
          case 194: break;
          case 33:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 195: break;
          case 34:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 196: break;
          case 35:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 197: break;
          case 36:
            { return OPERATOR_XOR;
            }
          // fall through
          case 198: break;
          case 37:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 199: break;
          case 38:
            { return NUMBER_BINARY;
            }
          // fall through
          case 200: break;
          case 39:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 201: break;
          case 40:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 202: break;
          case 41:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 203: break;
          case 42:
            { return BUILTIN_ABS;
            }
          // fall through
          case 204: break;
          case 43:
            { return BUILTIN_ARG;
            }
          // fall through
          case 205: break;
          case 44:
            { return BUILTIN_B2X;
            }
          // fall through
          case 206: break;
          case 45:
            { return BUILTIN_C2D;
            }
          // fall through
          case 207: break;
          case 46:
            { return BUILTIN_C2X;
            }
          // fall through
          case 208: break;
          case 47:
            { return BUILTIN_D2C;
            }
          // fall through
          case 209: break;
          case 48:
            { return BUILTIN_D2X;
            }
          // fall through
          case 210: break;
          case 49:
            { return KEYWORD_END;
            }
          // fall through
          case 211: break;
          case 50:
            { return SUBKEY_FOR;
            }
          // fall through
          case 212: break;
          case 51:
            { return KEYWORD_NOP;
            }
          // fall through
          case 213: break;
          case 52:
            { return SUBKEY_OFF;
            }
          // fall through
          case 214: break;
          case 53:
            { return KEYWORD_SAY;
            }
          // fall through
          case 215: break;
          case 54:
            { return KEYWORD_USE;
            }
          // fall through
          case 216: break;
          case 55:
            { return SUBKEY_VAR;
            }
          // fall through
          case 217: break;
          case 56:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 218: break;
          case 57:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 219: break;
          case 58:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 220: break;
          case 59:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 221: break;
          case 60:
            { return KEYWORD_CALL;
            }
          // fall through
          case 222: break;
          case 61:
            { return SUBKEY_CASE;
            }
          // fall through
          case 223: break;
          case 62:
            { return BUILTIN_DATE;
            }
          // fall through
          case 224: break;
          case 63:
            { return KEYWORD_DROP;
            }
          // fall through
          case 225: break;
          case 64:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 226: break;
          case 65:
            { return SUBKEY_EXIT;
            }
          // fall through
          case 227: break;
          case 66:
            { return BUILTIN_FORM;
            }
          // fall through
          case 228: break;
          case 67:
            { return BUILTIN_FUZZ;
            }
          // fall through
          case 229: break;
          case 68:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 230: break;
          case 69:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 231: break;
          case 70:
            { return SUBKEY_NAME;
            }
          // fall through
          case 232: break;
          case 71:
            { return SUBKEY_OVER;
            }
          // fall through
          case 233: break;
          case 72:
            { return SUBKEY_PULL;
            }
          // fall through
          case 234: break;
          case 73:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 235: break;
          case 74:
            { return SUBKEY_STEM;
            }
          // fall through
          case 236: break;
          case 75:
            { return SUBKEY_THEN;
            }
          // fall through
          case 237: break;
          case 76:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 238: break;
          case 77:
            { return SUBKEY_WHEN;
            }
          // fall through
          case 239: break;
          case 78:
            { return SUBKEY_WITH;
            }
          // fall through
          case 240: break;
          case 79:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 241: break;
          case 80:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 242: break;
          case 81:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 243: break;
          case 82:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 244: break;
          case 83:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 245: break;
          case 84:
            { return SUBKEY_CLASS;
            }
          // fall through
          case 246: break;
          case 85:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 247: break;
          case 86:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 248: break;
          case 87:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 249: break;
          case 88:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 250: break;
          case 89:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 251: break;
          case 90:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 252: break;
          case 91:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 253: break;
          case 92:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 254: break;
          case 93:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 255: break;
          case 94:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 256: break;
          case 95:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 257: break;
          case 96:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 258: break;
          case 97:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 259: break;
          case 98:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 260: break;
          case 99:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 261: break;
          case 100:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 262: break;
          case 101:
            { return SUBKEY_USING;
            }
          // fall through
          case 263: break;
          case 102:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 264: break;
          case 103:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 265: break;
          case 104:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 266: break;
          case 105:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 267: break;
          case 106:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 268: break;
          case 107:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 269: break;
          case 108:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 270: break;
          case 109:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 271: break;
          case 110:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 272: break;
          case 111:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 273: break;
          case 112:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 274: break;
          case 113:
            { return BUILTIN_DIGITS;
            }
          // fall through
          case 275: break;
          case 114:
            { return SUBKEY_EXPOSE;
            }
          // fall through
          case 276: break;
          case 115:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 277: break;
          case 116:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 278: break;
          case 117:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 279: break;
          case 118:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 280: break;
          case 119:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 281: break;
          case 120:
            { return SUBKEY_RETURN;
            }
          // fall through
          case 282: break;
          case 121:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 283: break;
          case 122:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 284: break;
          case 123:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 285: break;
          case 124:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 286: break;
          case 125:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 287: break;
          case 126:
            { return KEYWORD_CLASS;
            }
          // fall through
          case 288: break;
          case 127:
            { return BUILTIN_ADDRESS;
            }
          // fall through
          case 289: break;
          case 128:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 290: break;
          case 129:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 291: break;
          case 130:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 292: break;
          case 131:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 293: break;
          case 132:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 294: break;
          case 133:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 295: break;
          case 134:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 296: break;
          case 135:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 297: break;
          case 136:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 298: break;
          case 137:
            { return KEYWORD_OPTIONS;
            }
          // fall through
          case 299: break;
          case 138:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 300: break;
          case 139:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 301: break;
          case 140:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 302: break;
          case 141:
            { return KEYWORD_METHOD;
            }
          // fall through
          case 303: break;
          case 142:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 304: break;
          case 143:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 305: break;
          case 144:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 306: break;
          case 145:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 307: break;
          case 146:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 308: break;
          case 147:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 309: break;
          case 148:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 310: break;
          case 149:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 311: break;
          case 150:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 312: break;
          case 151:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 313: break;
          case 152:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 314: break;
          case 153:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 315: break;
          case 154:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 316: break;
          case 155:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 317: break;
          case 156:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 318: break;
          case 157:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 319: break;
          case 158:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 320: break;
          case 159:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 321: break;
          case 160:
            { return KEYWORD_ATTRIBUTE;
            }
          // fall through
          case 322: break;
          case 161:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 323: break;
          case 162:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 324: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
