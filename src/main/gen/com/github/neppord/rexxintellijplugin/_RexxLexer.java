// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/rexx.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\32\0\1\2\1\3\1\4\2\0\1\5"+
    "\1\6\1\0\1\7\1\0\1\10\2\0\1\11\11\0"+
    "\1\12\1\13\1\14\2\0\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\50\263\0"+
    "\2\25\115\0\1\36\u01aa\0\1\26\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\26\0\1\12\1\0\1\13\1\14"+
    "\1\0\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\0\1\24\12\0\1\25\13\0\1\26\15\0\1\27"+
    "\31\0\1\30\13\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\0\1\42\1\0"+
    "\1\43\1\0\1\44\2\0\1\45\1\0\1\46\1\47"+
    "\11\0\1\50\1\51\6\0\1\52\7\0\1\53\1\0"+
    "\1\54\23\0\1\55\2\0\1\56\3\0\1\57\5\0"+
    "\1\60\6\0\1\61\22\0\1\62\2\0\1\63\20\0"+
    "\1\64\2\0\1\65\5\0\1\66\1\67\1\70\1\0"+
    "\1\71\1\72\1\73\14\0\1\74\1\75\13\0\1\76"+
    "\5\0\1\77\1\100\3\0\1\101\5\0\1\102\1\0"+
    "\1\103\1\0\1\104\5\0\1\105\4\0\1\106\4\0"+
    "\1\107\6\0\1\110\12\0\1\111\10\0\1\112\1\113"+
    "\20\0\1\114\2\0\1\115\7\0\1\116\1\117\2\0"+
    "\1\120\5\0\1\121\4\0\1\122\1\0\1\123\1\124"+
    "\1\0\1\125\1\126\7\0\1\127\2\0\1\130\7\0"+
    "\1\131\1\132\16\0\1\133\3\0\1\134\3\0\1\135"+
    "\1\136\1\0\1\137\3\0\1\140\1\0\1\141\4\0"+
    "\1\142\1\143\1\0\1\144\21\0\1\145\7\0\1\146"+
    "\1\147\2\0\1\150\4\0\1\151\10\0\1\152\2\0"+
    "\1\153\5\0\1\154\1\0\1\155\2\0\1\156\1\157"+
    "\1\0\1\160\1\161\2\0\1\162\3\0\1\163\1\0"+
    "\1\164\4\0\1\165\2\0\1\166\1\167\1\0\1\170"+
    "\1\171\1\0\1\172\5\0\1\173\4\0\1\174\2\0"+
    "\1\175\3\0\1\176\3\0\1\177\3\0\1\200\3\0"+
    "\1\201\1\0\1\202\4\0\1\203\4\0\1\204\6\0"+
    "\1\205\4\0\1\206\2\0\1\207\1\0\1\210\1\211"+
    "\3\0\1\212\5\0\1\213\1\0\1\214\1\215\1\216"+
    "\1\217\1\0\1\220\1\0\1\221\1\222\3\0\1\223"+
    "\1\224\4\0\1\225\2\0\1\226\5\0\1\227\1\230"+
    "\3\0\1\231\3\0\1\232\5\0\1\233\1\234\1\235"+
    "\1\236\1\237\1\0\1\240\1\241\1\242\1\243\1\0"+
    "\1\244\7\0\1\245\1\246\1\247\1\0\1\250\1\251"+
    "\1\252\3\0\1\253\1\254\2\0\1\255\1\256\3\0"+
    "\1\257\4\0\1\260\3\0\1\261\2\0\1\262\1\263"+
    "\1\0\1\264\2\0\1\265\2\0\1\266\1\267\1\270"+
    "\1\271\1\272\1\0\1\273\2\0\1\274\5\0\1\275"+
    "\1\276\1\277\1\300\4\0\1\301\1\302\4\0\1\303"+
    "\1\0\1\304\6\0\1\305\1\306\1\307\1\310\2\0"+
    "\1\311\1\312\1\0\1\313\1\0\1\314\1\315\1\316"+
    "\1\317\1\320\1\321\4\0\1\322\1\323\1\0\1\324"+
    "\1\0\1\325\2\0\1\326\1\327\1\330\1\0\1\331"+
    "\1\332\1\0\1\333\1\334\1\335\1\336\1\337";

  private static int [] zzUnpackAction() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\51\0\51\0\51"+
    "\0\315\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec"+
    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334"+
    "\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c"+
    "\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\51\0\u0549\0\u0572\0\51"+
    "\0\51\0\51\0\u059b\0\51\0\51\0\u05c4\0\u05ed\0\u0616"+
    "\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\51\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\51\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\51\0\u0a92\0\u0abb"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\51\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\51\0\u10a8\0\u10d1"+
    "\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219"+
    "\0\u1242\0\51\0\u126b\0\51\0\51\0\51\0\51\0\u1294"+
    "\0\u12bd\0\u12e6\0\u130f\0\u1338\0\51\0\u1361\0\51\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\51\0\u142e\0\51\0\51\0\u1457"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f"+
    "\0\51\0\51\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695"+
    "\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd"+
    "\0\u1806\0\u182f\0\51\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc"+
    "\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44"+
    "\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\51\0\u1b63"+
    "\0\u1b8c\0\51\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82"+
    "\0\u1cab\0\u1cd4\0\u1cfd\0\51\0\u1d26\0\u1d4f\0\u1d78\0\u1da1"+
    "\0\u1dca\0\u1df3\0\51\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0"+
    "\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008"+
    "\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5\0\51\0\u20fe\0\u2127"+
    "\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f"+
    "\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7"+
    "\0\u23e0\0\u2409\0\u2432\0\u245b\0\51\0\u2484\0\u24ad\0\u24d6"+
    "\0\u24ff\0\u2528\0\51\0\51\0\51\0\u2551\0\u257a\0\51"+
    "\0\51\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699"+
    "\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\51\0\u278f\0\u27b8"+
    "\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900"+
    "\0\u2929\0\u2952\0\51\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f"+
    "\0\51\0\51\0\u2a48\0\u2a71\0\u2a9a\0\51\0\u2ac3\0\u2aec"+
    "\0\u2b15\0\u2b3e\0\u2b67\0\u2b90\0\u2bb9\0\51\0\u2be2\0\51"+
    "\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\51\0\u2cd8\0\u2d01"+
    "\0\u2d2a\0\u2d53\0\51\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\51"+
    "\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f"+
    "\0\u2f68\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087"+
    "\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf"+
    "\0\u31f8\0\u3221\0\51\0\51\0\u324a\0\u3273\0\u329c\0\u32c5"+
    "\0\u32ee\0\u3317\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d"+
    "\0\u3436\0\u345f\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\51"+
    "\0\u3555\0\u357e\0\u35a7\0\u35d0\0\u35f9\0\u3622\0\u364b\0\51"+
    "\0\51\0\u3674\0\u369d\0\51\0\u36c6\0\u36ef\0\u3718\0\u3741"+
    "\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e\0\u3837\0\51\0\u3860"+
    "\0\51\0\u3889\0\u38b2\0\51\0\51\0\u38db\0\u3904\0\u392d"+
    "\0\u3956\0\u397f\0\u39a8\0\u39d1\0\51\0\u39fa\0\u3a23\0\51"+
    "\0\u3a4c\0\u3a75\0\u3a9e\0\u3ac7\0\u3af0\0\u3b19\0\u3b42\0\51"+
    "\0\51\0\u3b6b\0\u3b94\0\u3bbd\0\u3be6\0\u3c0f\0\u3c38\0\u3c61"+
    "\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05\0\u3d2e\0\u3d57\0\u3d80\0\u3da9"+
    "\0\u3dd2\0\u3dfb\0\u3e24\0\51\0\u3e4d\0\u3e76\0\u3e9f\0\u3ec8"+
    "\0\51\0\u3ef1\0\51\0\u3f1a\0\u3f43\0\u3f6c\0\51\0\u3f95"+
    "\0\51\0\u3fbe\0\u3fe7\0\u4010\0\u4039\0\51\0\51\0\u4062"+
    "\0\51\0\u408b\0\u40b4\0\u40dd\0\u4106\0\u412f\0\u4158\0\u4181"+
    "\0\u41aa\0\u41d3\0\u41fc\0\u4225\0\u424e\0\u4277\0\u42a0\0\u42c9"+
    "\0\u42f2\0\u431b\0\51\0\u4344\0\u436d\0\u4396\0\u43bf\0\u43e8"+
    "\0\u4411\0\u443a\0\u4463\0\51\0\u448c\0\u44b5\0\51\0\u44de"+
    "\0\u4507\0\u4530\0\u4559\0\51\0\u4582\0\u45ab\0\u45d4\0\u45fd"+
    "\0\u4626\0\u464f\0\u4678\0\u46a1\0\51\0\u46ca\0\u46f3\0\51"+
    "\0\u471c\0\u4745\0\u476e\0\u4797\0\u47c0\0\51\0\u47e9\0\51"+
    "\0\u4812\0\u483b\0\51\0\51\0\u4864\0\51\0\51\0\u488d"+
    "\0\u48b6\0\51\0\u48df\0\u4908\0\u4931\0\51\0\u495a\0\51"+
    "\0\u4983\0\u49ac\0\u49d5\0\u49fe\0\51\0\u4a27\0\u4a50\0\51"+
    "\0\51\0\u4a79\0\51\0\51\0\u4aa2\0\51\0\u4acb\0\u4af4"+
    "\0\u4b1d\0\u4b46\0\u4b6f\0\51\0\u4b98\0\u4bc1\0\u4bea\0\u4c13"+
    "\0\51\0\u4c3c\0\u4c65\0\51\0\u4c8e\0\u4cb7\0\u4ce0\0\51"+
    "\0\u4d09\0\u4d32\0\u4d5b\0\51\0\u4d84\0\u4dad\0\u4dd6\0\51"+
    "\0\u4dff\0\u4e28\0\u4e51\0\51\0\u4e7a\0\51\0\u4ea3\0\u4ecc"+
    "\0\u4ef5\0\u4f1e\0\51\0\u4f47\0\u4f70\0\u4f99\0\u4fc2\0\51"+
    "\0\u4feb\0\u5014\0\u503d\0\u5066\0\u508f\0\u50b8\0\51\0\u50e1"+
    "\0\u510a\0\u5133\0\u515c\0\51\0\u5185\0\u51ae\0\51\0\u51d7"+
    "\0\51\0\51\0\u5200\0\u5229\0\u5252\0\51\0\u527b\0\u52a4"+
    "\0\u52cd\0\u52f6\0\u531f\0\51\0\u5348\0\51\0\u5371\0\51"+
    "\0\51\0\u539a\0\51\0\u53c3\0\51\0\51\0\u53ec\0\u5415"+
    "\0\u543e\0\51\0\51\0\u5467\0\u5490\0\u54b9\0\u54e2\0\51"+
    "\0\u550b\0\u5534\0\51\0\u555d\0\u5586\0\u55af\0\u55d8\0\u5601"+
    "\0\51\0\51\0\u562a\0\u5653\0\u567c\0\51\0\u56a5\0\u56ce"+
    "\0\u56f7\0\51\0\u5720\0\u5749\0\u5772\0\u579b\0\u57c4\0\51"+
    "\0\51\0\51\0\51\0\51\0\u57ed\0\51\0\51\0\51"+
    "\0\51\0\u5816\0\51\0\u583f\0\u5868\0\u5891\0\u58ba\0\u58e3"+
    "\0\u590c\0\u5935\0\51\0\51\0\51\0\u595e\0\51\0\51"+
    "\0\51\0\u5987\0\u59b0\0\u59d9\0\51\0\51\0\u5a02\0\u5a2b"+
    "\0\51\0\51\0\u5a54\0\u5a7d\0\u5aa6\0\51\0\u5acf\0\u5af8"+
    "\0\u5b21\0\u5b4a\0\51\0\u5b73\0\u5b9c\0\u5bc5\0\51\0\u5bee"+
    "\0\u5c17\0\51\0\51\0\u5c40\0\51\0\u5c69\0\u5c92\0\51"+
    "\0\u5cbb\0\u5ce4\0\51\0\51\0\51\0\51\0\51\0\u5d0d"+
    "\0\51\0\u5d36\0\u5d5f\0\51\0\u5d88\0\u5db1\0\u5dda\0\u5e03"+
    "\0\u5e2c\0\51\0\51\0\51\0\51\0\u5e55\0\u5e7e\0\u5ea7"+
    "\0\u5ed0\0\51\0\51\0\u5ef9\0\u5f22\0\u5f4b\0\u5f74\0\51"+
    "\0\u5f9d\0\51\0\u5fc6\0\u5fef\0\u6018\0\u6041\0\u606a\0\u6093"+
    "\0\51\0\51\0\51\0\51\0\u60bc\0\u60e5\0\51\0\51"+
    "\0\u610e\0\51\0\u6137\0\51\0\51\0\51\0\51\0\51"+
    "\0\51\0\u6160\0\u6189\0\u61b2\0\u61db\0\51\0\51\0\u6204"+
    "\0\51\0\u622d\0\51\0\u6256\0\u627f\0\51\0\51\0\51"+
    "\0\u62a8\0\51\0\51\0\u62d1\0\51\0\51\0\51\0\51"+
    "\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\0\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\0\1\42\1\43\1\44\54\0"+
    "\1\45\46\0\1\46\2\0\1\47\51\0\1\50\57\0"+
    "\1\51\46\0\1\52\1\53\47\0\1\54\1\55\53\0"+
    "\1\56\1\0\1\57\6\0\1\60\1\0\1\61\1\0"+
    "\1\62\1\0\1\63\1\0\1\64\22\0\1\65\13\0"+
    "\1\66\16\0\1\67\15\0\1\70\3\0\1\71\3\0"+
    "\1\72\2\0\1\73\2\0\1\74\2\0\1\75\27\0"+
    "\1\76\3\0\1\77\3\0\1\100\3\0\1\101\4\0"+
    "\1\102\2\0\1\103\42\0\1\104\1\0\1\105\3\0"+
    "\1\106\5\0\1\107\22\0\1\110\14\0\1\111\5\0"+
    "\1\112\31\0\1\113\16\0\1\114\25\0\1\115\55\0"+
    "\1\116\6\0\1\117\5\0\1\120\26\0\1\121\3\0"+
    "\1\122\3\0\1\123\4\0\1\124\33\0\1\125\3\0"+
    "\1\126\3\0\1\127\40\0\1\130\14\0\1\131\5\0"+
    "\1\132\32\0\1\133\6\0\1\134\1\0\1\135\3\0"+
    "\1\136\1\137\1\140\24\0\1\141\14\0\1\142\2\0"+
    "\1\143\2\0\1\144\50\0\1\145\25\0\1\146\3\0"+
    "\1\147\3\0\1\150\4\0\1\151\10\0\1\152\22\0"+
    "\1\153\1\0\1\154\1\0\1\155\3\0\1\156\4\0"+
    "\1\157\1\160\3\0\1\161\1\162\3\0\1\163\30\0"+
    "\1\164\1\165\4\0\1\166\2\0\1\167\44\0\1\170"+
    "\1\0\1\171\2\0\1\172\27\0\1\173\3\0\1\174"+
    "\53\0\1\175\1\176\4\0\1\177\27\0\1\200\23\0"+
    "\1\201\25\0\1\202\1\203\1\204\31\0\1\205\51\0"+
    "\1\206\51\0\1\207\4\0\1\47\50\0\1\4\56\0"+
    "\1\210\1\0\1\211\52\0\1\212\17\0\1\213\32\0"+
    "\1\214\57\0\1\215\52\0\1\216\12\0\1\217\37\0"+
    "\1\220\40\0\1\221\11\0\1\222\52\0\1\223\54\0"+
    "\1\224\44\0\1\225\31\0\1\226\22\0\1\227\34\0"+
    "\1\230\6\0\1\231\43\0\1\232\34\0\1\233\50\0"+
    "\1\234\63\0\1\235\1\236\1\0\1\237\4\0\1\240"+
    "\27\0\1\241\23\0\1\242\44\0\1\243\40\0\1\244"+
    "\6\0\1\245\35\0\1\246\57\0\1\247\54\0\1\250"+
    "\32\0\1\251\2\0\1\252\62\0\1\253\40\0\1\254"+
    "\5\0\1\255\3\0\1\256\36\0\1\257\1\0\1\260"+
    "\56\0\1\261\60\0\1\262\42\0\1\263\26\0\1\264"+
    "\62\0\1\265\41\0\1\266\3\0\1\267\6\0\1\270"+
    "\2\0\1\271\1\272\32\0\1\273\45\0\1\274\17\0"+
    "\1\275\27\0\1\276\4\0\1\277\6\0\1\300\35\0"+
    "\1\301\12\0\1\302\36\0\1\303\12\0\1\304\3\0"+
    "\1\305\3\0\1\306\51\0\1\307\43\0\1\310\1\311"+
    "\42\0\1\312\11\0\1\313\35\0\1\314\50\0\1\315"+
    "\2\0\1\316\1\0\1\317\1\320\1\321\1\0\1\322"+
    "\37\0\1\323\42\0\1\324\65\0\1\325\35\0\1\326"+
    "\63\0\1\327\32\0\1\330\46\0\1\331\15\0\1\332"+
    "\51\0\1\333\37\0\1\334\4\0\1\335\34\0\1\336"+
    "\10\0\1\337\6\0\1\340\27\0\1\341\3\0\1\342"+
    "\54\0\1\343\3\0\1\344\52\0\1\345\1\346\1\0"+
    "\1\347\1\350\1\0\1\351\32\0\1\352\65\0\1\353"+
    "\32\0\1\354\11\0\1\355\60\0\1\356\31\0\1\357"+
    "\52\0\1\360\7\0\1\361\34\0\1\362\65\0\1\363"+
    "\25\0\1\364\54\0\1\365\13\0\1\366\31\0\1\367"+
    "\62\0\1\370\1\371\40\0\1\372\57\0\1\373\35\0"+
    "\1\374\22\0\1\375\33\0\1\376\7\0\1\377\3\0"+
    "\1\u0100\44\0\1\u0101\36\0\1\u0102\3\0\1\u0103\52\0"+
    "\1\u0104\5\0\1\u0105\50\0\1\u0106\34\0\1\u0107\3\0"+
    "\1\u0108\62\0\1\u0109\46\0\1\u010a\31\0\1\u010b\1\u010c"+
    "\1\u010d\45\0\1\u010e\46\0\1\u010f\50\0\1\u0110\50\0"+
    "\1\u0111\72\0\1\u0112\52\0\1\u0113\36\0\1\u0114\7\0"+
    "\1\u0115\45\0\1\u0116\37\0\1\u0117\67\0\1\u0118\25\0"+
    "\1\u0119\70\0\1\u011a\30\0\1\u011b\14\0\1\u011c\10\0"+
    "\1\u011d\34\0\1\u011e\42\0\1\u011f\66\0\1\u0120\42\0"+
    "\1\u0121\3\0\1\u0122\51\0\1\u0123\45\0\1\u0124\35\0"+
    "\1\u0125\15\0\1\u0126\1\u0127\36\0\1\u0128\54\0\1\u0129"+
    "\34\0\1\u012a\3\0\1\u012b\50\0\1\u012c\14\0\1\u012d"+
    "\3\0\1\u012e\25\0\1\u012f\56\0\1\u0130\56\0\1\u0131"+
    "\36\0\1\u0132\56\0\1\u0133\46\0\1\u0134\55\0\1\u0135"+
    "\55\0\1\u0136\43\0\1\u0137\37\0\1\u0138\56\0\1\u0139"+
    "\57\0\1\u013a\33\0\1\u013b\6\0\1\u013c\11\0\1\u013d"+
    "\53\0\1\u013e\40\0\1\u013f\52\0\1\u0140\32\0\1\u0141"+
    "\50\0\1\u0142\67\0\1\u0143\31\0\1\u0144\50\0\1\u0145"+
    "\57\0\1\u0146\4\0\1\u0147\34\0\1\u0148\66\0\1\u0149"+
    "\52\0\1\u014a\46\0\1\u014b\34\0\1\u014c\62\0\1\u014d"+
    "\34\0\1\u014e\44\0\1\u014f\66\0\1\u0150\54\0\1\u0151"+
    "\32\0\1\u0152\65\0\1\u0153\27\0\1\u0154\6\0\1\u0155"+
    "\51\0\1\u0156\44\0\1\u0157\50\0\1\u0158\64\0\1\u0159"+
    "\43\0\1\u015a\57\0\1\u015b\46\0\1\u015c\30\0\1\u015d"+
    "\54\0\1\u015e\54\0\1\u015f\44\0\1\u0160\62\0\1\u0161"+
    "\52\0\1\u0162\41\0\1\u0163\60\0\1\u0164\53\0\1\u0165"+
    "\26\0\1\u0166\7\0\1\u0167\3\0\1\u0168\3\0\1\u0169"+
    "\40\0\1\u016a\50\0\1\u016b\45\0\1\u016c\53\0\1\u016d"+
    "\61\0\1\u016e\46\0\1\u016f\32\0\1\u0170\57\0\1\u0171"+
    "\61\0\1\u0172\42\0\1\u0173\56\0\1\u0174\31\0\1\u0175"+
    "\53\0\1\u0176\63\0\1\u0177\51\0\1\u0178\50\0\1\u0179"+
    "\31\0\1\u017a\50\0\1\u017b\56\0\1\u017c\52\0\1\u017d"+
    "\54\0\1\u017e\32\0\1\u017f\61\0\1\u0180\41\0\1\u0181"+
    "\3\0\1\u0182\42\0\1\u0183\16\0\1\u0184\3\0\1\u0185"+
    "\24\0\1\u0186\71\0\1\u0187\42\0\1\u0188\40\0\1\u0189"+
    "\46\0\1\u018a\11\0\1\u018b\40\0\1\u018c\7\0\1\u018d"+
    "\57\0\1\u018e\45\0\1\u018f\40\0\1\u0190\44\0\1\u0191"+
    "\64\0\1\u0192\44\0\1\u0193\57\0\1\u0194\35\0\1\u0195"+
    "\10\0\1\u0196\43\0\1\u0197\46\0\1\u0198\45\0\1\u0199"+
    "\44\0\1\u019a\61\0\1\u019b\31\0\1\u019c\1\0\1\u019d"+
    "\55\0\1\u019e\64\0\1\u019f\52\0\1\u01a0\32\0\1\u01a1"+
    "\66\0\1\u01a2\42\0\1\u01a3\47\0\1\u01a4\64\0\1\u01a5"+
    "\31\0\1\u01a6\54\0\1\u01a7\54\0\1\u01a8\45\0\1\u01a9"+
    "\45\0\1\u01aa\42\0\1\u01ab\13\0\1\u01ac\36\0\1\u01ad"+
    "\52\0\1\u01ae\4\0\1\u01af\3\0\1\u01b0\50\0\1\u01b1"+
    "\27\0\1\u01b2\60\0\1\u01b3\62\0\1\u01b4\36\0\1\u01b5"+
    "\44\0\1\u01b6\66\0\1\u01b7\50\0\1\u01b8\34\0\1\u01b9"+
    "\64\0\1\u01ba\43\0\1\u01bb\53\0\1\u01bc\52\0\1\u01bd"+
    "\43\0\1\u01be\47\0\1\u01bf\54\0\1\u01c0\51\0\1\u01c1"+
    "\47\0\1\u01c2\53\0\1\u01c3\31\0\1\u01c4\70\0\1\u01c5"+
    "\24\0\1\u01c6\50\0\1\u01c7\53\0\1\u01c8\73\0\1\u01c9"+
    "\42\0\1\u01ca\52\0\1\u01cb\46\0\1\u01cc\50\0\1\u01cd"+
    "\30\0\1\u01ce\62\0\1\u01cf\54\0\1\u01d0\36\0\1\u01d1"+
    "\66\0\1\u01d2\26\0\1\u01d3\60\0\1\u01d4\4\0\1\u01d5"+
    "\3\0\1\u01d6\41\0\1\u01d7\41\0\1\u01d8\65\0\1\u01d9"+
    "\30\0\1\u01da\52\0\1\u01db\63\0\1\u01dc\47\0\1\u01dd"+
    "\55\0\1\u01de\51\0\1\u01df\43\0\1\u01e0\33\0\1\u01e1"+
    "\70\0\1\u01e2\34\0\1\u01e3\56\0\1\u01e4\56\0\1\u01e5"+
    "\45\0\1\u01e6\53\0\1\u01e7\53\0\1\u01e8\37\0\1\u01e9"+
    "\36\0\1\u01ea\54\0\1\u01eb\44\0\1\u01ec\54\0\1\u01ed"+
    "\61\0\1\u01ee\33\0\1\u01ef\54\0\1\u01f0\54\0\1\u01f1"+
    "\50\0\1\u01f2\44\0\1\u01f3\50\0\1\u01f4\61\0\1\u01f5"+
    "\33\0\1\u01f6\26\0\1\u01f7\31\0\1\u01f8\63\0\1\u01f9"+
    "\45\0\1\u01fa\50\0\1\u01fb\52\0\1\u01fc\36\0\1\u01fd"+
    "\54\0\1\u01fe\40\0\1\u01ff\60\0\1\u0200\36\0\1\u0201"+
    "\63\0\1\u0202\33\0\1\u0203\52\0\1\u0204\52\0\1\u0205"+
    "\44\0\1\u0206\52\0\1\u0207\13\0\1\u0208\44\0\1\u0209"+
    "\60\0\1\u020a\43\0\1\u020b\50\0\1\u020c\33\0\1\u020d"+
    "\54\0\1\u020e\65\0\1\u020f\31\0\1\u0210\46\0\1\u0211"+
    "\65\0\1\u0212\45\0\1\u0213\56\0\1\u0214\40\0\1\u0215"+
    "\46\0\1\u0216\46\0\1\u0217\51\0\1\u0218\53\0\1\u0219"+
    "\44\0\1\u021a\54\0\1\u021b\1\0\1\u021c\3\0\1\u021d"+
    "\2\0\1\u021e\35\0\1\u021f\66\0\1\u0220\24\0\1\u0221"+
    "\60\0\1\u0222\61\0\1\u0223\27\0\1\u0224\53\0\1\u0225"+
    "\51\0\1\u0226\45\0\1\u0227\52\0\1\u0228\65\0\1\u0229"+
    "\34\0\1\u022a\64\0\1\u022b\34\0\1\u022c\50\0\1\u022d"+
    "\60\0\1\u022e\57\0\1\u022f\45\0\1\u0230\52\0\1\u0231"+
    "\26\0\1\u0232\64\0\1\u0233\55\0\1\u0234\33\0\1\u0235"+
    "\14\0\1\u0236\56\0\1\u0237\21\0\1\u0238\70\0\1\u0239"+
    "\50\0\1\u023a\40\0\1\u023b\61\0\1\u023c\31\0\1\u023d"+
    "\52\0\1\u023e\66\0\1\u023f\32\0\1\u0240\60\0\1\u0241"+
    "\54\0\1\u0242\34\0\1\u0243\66\0\1\u0244\46\0\1\u0245"+
    "\34\0\1\u0246\54\0\1\u0247\62\0\1\u0248\44\0\1\u0249"+
    "\54\0\1\u024a\43\0\1\u024b\42\0\1\u024c\61\0\1\u024d"+
    "\44\0\1\u024e\57\0\1\u024f\35\0\1\u0250\46\0\1\u0251"+
    "\54\0\1\u0252\41\0\1\u0253\47\0\1\u0254\64\0\1\u0255"+
    "\41\0\1\u0256\53\0\1\u0257\50\0\1\u0258\46\0\1\u0259"+
    "\40\0\1\u025a\73\0\1\u025b\35\0\1\u025c\54\0\1\u025d"+
    "\61\0\1\u025e\45\0\1\u025f\26\0\1\u0260\56\0\1\u0261"+
    "\64\0\1\u0262\31\0\1\u0263\53\0\1\u0264\50\0\1\u0265"+
    "\44\0\1\u0266\50\0\1\u0267\53\0\1\u0268\46\0\1\u0269"+
    "\60\0\1\u026a\37\0\1\u026b\66\0\1\u026c\50\0\1\u026d"+
    "\44\0\1\u026e\55\0\1\u026f\43\0\1\u0270\36\0\1\u0271"+
    "\71\0\1\u0272\47\0\1\u0273\50\0\1\u0274\30\0\1\u0275"+
    "\60\0\1\u0276\42\0\1\u0277\57\0\1\u0278\57\0\1\u0279"+
    "\26\0\1\u027a\70\0\1\u027b\50\0\1\u027c\42\0\1\u027d"+
    "\64\0\1\u027e\34\0\1\u027f\56\0\1\u0280\52\0\1\u0281"+
    "\31\0\1\u0282\74\0\1\u0283\36\0\1\u0284\47\0\1\u0285"+
    "\40\0\1\u0286\61\0\1\u0287\37\0\1\u0288\46\0\1\u0289"+
    "\63\0\1\u028a\54\0\1\u028b\51\0\1\u028c\42\0\1\u028d"+
    "\57\0\1\u028e\46\0\1\u028f\50\0\1\u0290\51\0\1\u0291"+
    "\32\0\1\u0292\54\0\1\u0293\54\0\1\u0294\57\0\1\u0295"+
    "\45\0\1\u0296\52\0\1\u0297\44\0\1\u0298\54\0\1\u0299"+
    "\31\0\1\u029a\63\0\1\u029b\32\0\1\u029c\54\0\1\u029d"+
    "\50\0\1\u029e\44\0\1\u029f\54\0\1\u02a0\64\0\1\u02a1"+
    "\33\0\1\u02a2\50\0\1\u02a3\67\0\1\u02a4\46\0\1\u02a5"+
    "\34\0\1\u02a6\65\0\1\u02a7\56\0\1\u02a8\43\0\1\u02a9"+
    "\34\0\1\u02aa\46\0\1\u02ab\44\0\1\u02ac\62\0\1\u02ad"+
    "\36\0\1\u02ae\65\0\1\u02af\50\0\1\u02b0\47\0\1\u02b1"+
    "\37\0\1\u02b2\51\0\1\u02b3\46\0\1\u02b4\67\0\1\u02b5"+
    "\37\0\1\u02b6\67\0\1\u02b7\25\0\1\u02b8\50\0\1\u02b9"+
    "\67\0\1\u02ba\25\0\1\u02bb\72\0\1\u02bc\55\0\1\u02bd"+
    "\25\0\1\u02be\50\0\1\u02bf\46\0\1\u02c0\52\0\1\u02c1"+
    "\50\0\1\u02c2\44\0\1\u02c3\2\0\1\u02c4\13\0\1\u02c5"+
    "\35\0\1\u02c6\54\0\1\u02c7\40\0\1\u02c8\62\0\1\u02c9"+
    "\57\0\1\u02ca\32\0\1\u02cb\45\0\1\u02cc\53\0\1\u02cd"+
    "\51\0\1\u02ce\60\0\1\u02cf\37\0\1\u02d0\61\0\1\u02d1"+
    "\55\0\1\u02d2\51\0\1\u02d3\42\0\1\u02d4\40\0\1\u02d5"+
    "\66\0\1\u02d6\50\0\1\u02d7\47\0\1\u02d8\51\0\1\u02d9"+
    "\43\0\1\u02da\55\0\1\u02db\32\0\1\u02dc\64\0\1\u02dd"+
    "\34\0\1\u02de\50\0\1\u02df\66\0\1\u02e0\40\0\1\u02e1"+
    "\56\0\1\u02e2\56\0\1\u02e3\34\0\1\u02e4\42\0\1\u02e5"+
    "\54\0\1\u02e6\61\0\1\u02e7\27\0\1\u02e8\52\0\1\u02e9"+
    "\51\0\1\u02ea\53\0\1\u02eb\50\0\1\u02ec\71\0\1\u02ed"+
    "\42\0\1\u02ee\47\0\1\u02ef\52\0\1\u02f0\32\0\1\u02f1"+
    "\65\0\1\u02f2\33\0\1\u02f3\47\0\1\u02f4\65\0\1\u02f5"+
    "\53\0\1\u02f6\32\0\1\u02f7\55\0\1\u02f8\46\0\1\u02f9"+
    "\61\0\1\u02fa\51\0\1\u02fb\32\0\1\u02fc\46\0\1\u02fd"+
    "\52\0\1\u02fe\52\0\1\u02ff\42\0\1\u0300\71\0\1\u0301"+
    "\33\0\1\u0302\64\0\1\u0303\44\0\1\u0304\44\0\1\u0305"+
    "\50\0\1\u0306\62\0\1\u0307\50\0\1\u0308\50\0\1\u0309"+
    "\47\0\1\u030a\50\0\1\u030b\33\0\1\u030c\50\0\1\u030d"+
    "\50\0\1\u030e\50\0\1\u030f\47\0\1\u0310\50\0\1\u0311"+
    "\62\0\1\u0312\37\0\1\u0313\54\0\1\u0314\54\0\1\u0315"+
    "\40\0\1\u0316\47\0\1\u0317\67\0\1\u0318\54\0\1\u0319"+
    "\44\0\1\u031a\40\0\1\u031b\53\0\1\u031c\47\0\1\u031d"+
    "\55\0\1\u031e\50\0\1\u031f\45\0\1\u0320\52\0\1\u0321"+
    "\32\0\1\u0322\52\0\1\u0323\50\0\1\u0324\53\0\1\u0325"+
    "\55\0\1\u0326\42\0\1\u0327\71\0\1\u0328\24\0\1\u0329"+
    "\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25338];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\0\1\1\3\11\3\1\26\0"+
    "\1\1\1\0\1\1\1\11\1\0\1\1\3\11\1\1"+
    "\2\11\11\0\1\11\12\0\1\11\13\0\1\11\15\0"+
    "\1\11\31\0\1\11\13\0\1\11\1\1\4\11\2\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\1\0\1\1"+
    "\2\0\1\11\1\0\2\11\11\0\2\11\6\0\1\1"+
    "\7\0\1\1\1\0\1\11\23\0\1\11\2\0\1\11"+
    "\3\0\1\1\5\0\1\11\6\0\1\11\22\0\1\11"+
    "\2\0\1\1\20\0\1\1\2\0\1\11\5\0\3\11"+
    "\1\0\1\1\2\11\14\0\1\11\1\1\13\0\1\11"+
    "\5\0\2\11\3\0\1\11\5\0\1\1\1\0\1\11"+
    "\1\0\1\11\5\0\1\11\4\0\1\11\4\0\1\11"+
    "\6\0\1\1\12\0\1\1\10\0\2\11\20\0\1\1"+
    "\2\0\1\11\7\0\2\11\2\0\1\11\5\0\1\1"+
    "\4\0\1\11\1\0\1\11\1\1\1\0\2\11\7\0"+
    "\1\11\2\0\1\11\7\0\2\11\16\0\1\1\3\0"+
    "\1\11\3\0\1\1\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\11\21\0\1\11"+
    "\7\0\1\1\1\11\2\0\1\11\4\0\1\11\10\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\2\11\1\0\2\11\2\0\1\11\3\0\1\11\1\0"+
    "\1\11\4\0\1\11\2\0\2\11\1\0\2\11\1\0"+
    "\1\11\5\0\1\11\4\0\1\11\2\0\1\11\3\0"+
    "\1\11\3\0\1\11\3\0\1\11\3\0\1\11\1\0"+
    "\1\11\4\0\1\11\4\0\1\11\6\0\1\11\4\0"+
    "\1\11\2\0\1\11\1\0\2\11\3\0\1\11\5\0"+
    "\1\11\1\0\1\11\1\1\2\11\1\0\1\11\1\0"+
    "\2\11\3\0\2\11\4\0\1\11\2\0\1\11\5\0"+
    "\2\11\3\0\1\11\3\0\1\11\5\0\5\11\1\0"+
    "\4\11\1\0\1\11\7\0\3\11\1\0\3\11\3\0"+
    "\2\11\2\0\2\11\3\0\1\11\4\0\1\11\3\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\5\11\1\0\1\11\2\0\1\11\5\0\4\11\4\0"+
    "\2\11\4\0\1\11\1\0\1\11\6\0\4\11\2\0"+
    "\2\11\1\0\1\11\1\0\6\11\4\0\2\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\0\2\11\1\0"+
    "\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 224: break;
          case 2:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 225: break;
          case 3:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 226: break;
          case 4:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 227: break;
          case 5:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 228: break;
          case 6:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 229: break;
          case 7:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 230: break;
          case 8:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 231: break;
          case 9:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 232: break;
          case 10:
            { return OPERATOR_INTDIV;
            }
          // fall through
          case 233: break;
          case 11:
            { return OPERATOR_OR;
            }
          // fall through
          case 234: break;
          case 12:
            { return OPERATOR_AND;
            }
          // fall through
          case 235: break;
          case 13:
            { return WHITE_SPACE;
            }
          // fall through
          case 236: break;
          case 14:
            { return OPERATOR_POWER;
            }
          // fall through
          case 237: break;
          case 15:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 238: break;
          case 16:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 239: break;
          case 17:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 240: break;
          case 18:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 241: break;
          case 19:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 242: break;
          case 20:
            { return SUBKEY_BY;
            }
          // fall through
          case 243: break;
          case 21:
            { return KEYWORD_DO;
            }
          // fall through
          case 244: break;
          case 22:
            { return KEYWORD_IF;
            }
          // fall through
          case 245: break;
          case 23:
            { return SUBKEY_ON;
            }
          // fall through
          case 246: break;
          case 24:
            { return SUBKEY_TO;
            }
          // fall through
          case 247: break;
          case 25:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 248: break;
          case 26:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 249: break;
          case 27:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 250: break;
          case 28:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 251: break;
          case 29:
            { return OPERATOR_XOR;
            }
          // fall through
          case 252: break;
          case 30:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 253: break;
          case 31:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 254: break;
          case 32:
            { return OPERATOR_STRICT_GREATERTHAN;
            }
          // fall through
          case 255: break;
          case 33:
            { return BUILTIN_ABS;
            }
          // fall through
          case 256: break;
          case 34:
            { return SUBDIRECTIVE_ALL;
            }
          // fall through
          case 257: break;
          case 35:
            { return CONDITION_ANY;
            }
          // fall through
          case 258: break;
          case 36:
            { return KEYWORD_ARG;
            }
          // fall through
          case 259: break;
          case 37:
            { return BUILTIN_B2X;
            }
          // fall through
          case 260: break;
          case 38:
            { return BUILTIN_C2D;
            }
          // fall through
          case 261: break;
          case 39:
            { return BUILTIN_C2X;
            }
          // fall through
          case 262: break;
          case 40:
            { return BUILTIN_D2C;
            }
          // fall through
          case 263: break;
          case 41:
            { return BUILTIN_D2X;
            }
          // fall through
          case 264: break;
          case 42:
            { return KEYWORD_END;
            }
          // fall through
          case 265: break;
          case 43:
            { return SUBKEY_FOR;
            }
          // fall through
          case 266: break;
          case 44:
            { return SUBDIRECTIVE_GET;
            }
          // fall through
          case 267: break;
          case 45:
            { return BUILTIN_MAX;
            }
          // fall through
          case 268: break;
          case 46:
            { return BUILTIN_MIN;
            }
          // fall through
          case 269: break;
          case 47:
            { return KEYWORD_NOP;
            }
          // fall through
          case 270: break;
          case 48:
            { return SUBKEY_OFF;
            }
          // fall through
          case 271: break;
          case 49:
            { return BUILTIN_POS;
            }
          // fall through
          case 272: break;
          case 50:
            { return KEYWORD_SAY;
            }
          // fall through
          case 273: break;
          case 51:
            { return SUBDIRECTIVE_SET;
            }
          // fall through
          case 274: break;
          case 52:
            { return KEYWORD_USE;
            }
          // fall through
          case 275: break;
          case 53:
            { return SUBKEY_VAR;
            }
          // fall through
          case 276: break;
          case 54:
            { return BUILTIN_X2B;
            }
          // fall through
          case 277: break;
          case 55:
            { return BUILTIN_X2C;
            }
          // fall through
          case 278: break;
          case 56:
            { return BUILTIN_X2D;
            }
          // fall through
          case 279: break;
          case 57:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 280: break;
          case 58:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 281: break;
          case 59:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 282: break;
          case 60:
            { return KEYWORD_CALL;
            }
          // fall through
          case 283: break;
          case 61:
            { return SUBKEY_CASE;
            }
          // fall through
          case 284: break;
          case 62:
            { return BUILTIN_DATE;
            }
          // fall through
          case 285: break;
          case 63:
            { return KEYWORD_DROP;
            }
          // fall through
          case 286: break;
          case 64:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 287: break;
          case 65:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 288: break;
          case 66:
            { return SUBKEY_FORM;
            }
          // fall through
          case 289: break;
          case 67:
            { return SUBKEY_FUZZ;
            }
          // fall through
          case 290: break;
          case 68:
            { return CONDITION_HALT;
            }
          // fall through
          case 291: break;
          case 69:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 292: break;
          case 70:
            { return BUILTIN_LEFT;
            }
          // fall through
          case 293: break;
          case 71:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 294: break;
          case 72:
            { return SUBKEY_NAME;
            }
          // fall through
          case 295: break;
          case 73:
            { return SUBKEY_OVER;
            }
          // fall through
          case 296: break;
          case 74:
            { return KEYWORD_PULL;
            }
          // fall through
          case 297: break;
          case 75:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 298: break;
          case 76:
            { return BUILTIN_SIGN;
            }
          // fall through
          case 299: break;
          case 77:
            { return SUBKEY_STEM;
            }
          // fall through
          case 300: break;
          case 78:
            { return KEYWORD_THEN;
            }
          // fall through
          case 301: break;
          case 79:
            { return BUILTIN_TIME;
            }
          // fall through
          case 302: break;
          case 80:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 303: break;
          case 81:
            { return CONDITION_USER;
            }
          // fall through
          case 304: break;
          case 82:
            { return KEYWORD_WHEN;
            }
          // fall through
          case 305: break;
          case 83:
            { return SUBKEY_WITH;
            }
          // fall through
          case 306: break;
          case 84:
            { return BUILTIN_WORD;
            }
          // fall through
          case 307: break;
          case 85:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 308: break;
          case 86:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 309: break;
          case 87:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 310: break;
          case 88:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 311: break;
          case 89:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 312: break;
          case 90:
            { return DIRECTIVE_CLASS;
            }
          // fall through
          case 313: break;
          case 91:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 314: break;
          case 92:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 315: break;
          case 93:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 316: break;
          case 94:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 317: break;
          case 95:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 318: break;
          case 96:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 319: break;
          case 97:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 320: break;
          case 98:
            { return BUILTIN_LINES;
            }
          // fall through
          case 321: break;
          case 99:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 322: break;
          case 100:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 323: break;
          case 101:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 324: break;
          case 102:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 325: break;
          case 103:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 326: break;
          case 104:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 327: break;
          case 105:
            { return BUILTIN_RIGHT;
            }
          // fall through
          case 328: break;
          case 106:
            { return BUILTIN_SPACE;
            }
          // fall through
          case 329: break;
          case 107:
            { return BUILTIN_STRIP;
            }
          // fall through
          case 330: break;
          case 108:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 331: break;
          case 109:
            { return BUILTIN_TRUNC;
            }
          // fall through
          case 332: break;
          case 110:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 333: break;
          case 111:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 334: break;
          case 112:
            { return SUBKEY_USING;
            }
          // fall through
          case 335: break;
          case 113:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 336: break;
          case 114:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 337: break;
          case 115:
            { return BUILTIN_WORDS;
            }
          // fall through
          case 338: break;
          case 116:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 339: break;
          case 117:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 340: break;
          case 118:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 341: break;
          case 119:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 342: break;
          case 120:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 343: break;
          case 121:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 344: break;
          case 122:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 345: break;
          case 123:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 346: break;
          case 124:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 347: break;
          case 125:
            { return SUBKEY_DIGITS;
            }
          // fall through
          case 348: break;
          case 126:
            { return KEYWORD_EXPOSE;
            }
          // fall through
          case 349: break;
          case 127:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 350: break;
          case 128:
            { return BUILTIN_INSERT;
            }
          // fall through
          case 351: break;
          case 129:
            { return BUILTIN_LENGTH;
            }
          // fall through
          case 352: break;
          case 130:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 353: break;
          case 131:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 354: break;
          case 132:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 355: break;
          case 133:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 356: break;
          case 134:
            { return SUBDIRECTIVE_PROLOG;
            }
          // fall through
          case 357: break;
          case 135:
            { return SUBDIRECTIVE_PUBLIC;
            }
          // fall through
          case 358: break;
          case 136:
            { return BUILTIN_QUEUED;
            }
          // fall through
          case 359: break;
          case 137:
            { return BUILTIN_RANDOM;
            }
          // fall through
          case 360: break;
          case 138:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 361: break;
          case 139:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 362: break;
          case 140:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 363: break;
          case 141:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 364: break;
          case 142:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 365: break;
          case 143:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 366: break;
          case 144:
            { return BUILTIN_SUBSTR;
            }
          // fall through
          case 367: break;
          case 145:
            { return BUILTIN_SYMBOL;
            }
          // fall through
          case 368: break;
          case 146:
            { return CONDITION_SYNTAX;
            }
          // fall through
          case 369: break;
          case 147:
            { return BUILTIN_USERID;
            }
          // fall through
          case 370: break;
          case 148:
            { return BUILTIN_VERIFY;
            }
          // fall through
          case 371: break;
          case 149:
            { return BUILTIN_XRANGE;
            }
          // fall through
          case 372: break;
          case 150:
            { return KEYWORD_ADDRESS;
            }
          // fall through
          case 373: break;
          case 151:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 374: break;
          case 152:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 375: break;
          case 153:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 376: break;
          case 154:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 377: break;
          case 155:
            { return CONDITION_FAILURE;
            }
          // fall through
          case 378: break;
          case 156:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 379: break;
          case 157:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 380: break;
          case 158:
            { return SUBDIRECTIVE_GUARDED;
            }
          // fall through
          case 381: break;
          case 159:
            { return SUBDIRECTIVE_INHERIT;
            }
          // fall through
          case 382: break;
          case 160:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 383: break;
          case 161:
            { return BUILTIN_LASTPOS;
            }
          // fall through
          case 384: break;
          case 162:
            { return SUBDIRECTIVE_LIBRARY;
            }
          // fall through
          case 385: break;
          case 163:
            { return BUILTIN_LINEOUT;
            }
          // fall through
          case 386: break;
          case 164:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 387: break;
          case 165:
            { return CONDITION_NOVALUE;
            }
          // fall through
          case 388: break;
          case 166:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 389: break;
          case 167:
            { return DIRECTIVE_OPTIONS;
            }
          // fall through
          case 390: break;
          case 168:
            { return BUILTIN_OVERLAY;
            }
          // fall through
          case 391: break;
          case 169:
            { return SUBDIRECTIVE_PACKAGE;
            }
          // fall through
          case 392: break;
          case 170:
            { return SUBDIRECTIVE_PRIVATE;
            }
          // fall through
          case 393: break;
          case 171:
            { return BUILTIN_QUALIFY;
            }
          // fall through
          case 394: break;
          case 172:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 395: break;
          case 173:
            { return BUILTIN_REVERSE;
            }
          // fall through
          case 396: break;
          case 174:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 397: break;
          case 175:
            { return BUILTIN_RXQUEUE;
            }
          // fall through
          case 398: break;
          case 176:
            { return BUILTIN_SUBWORD;
            }
          // fall through
          case 399: break;
          case 177:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 400: break;
          case 178:
            { return BUILTIN_WORDPOS;
            }
          // fall through
          case 401: break;
          case 179:
            { return SUBDIRECTIVE_ABSTRACT;
            }
          // fall through
          case 402: break;
          case 180:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 403: break;
          case 181:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 404: break;
          case 182:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 405: break;
          case 183:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 406: break;
          case 184:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 407: break;
          case 185:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 408: break;
          case 186:
            { return SUBDIRECTIVE_DELEGATE;
            }
          // fall through
          case 409: break;
          case 187:
            { return BUILTIN_ENDLOCAL;
            }
          // fall through
          case 410: break;
          case 188:
            { return SUBDIRECTIVE_EXTERNAL;
            }
          // fall through
          case 411: break;
          case 189:
            { return CONDITION_NOMETHOD;
            }
          // fall through
          case 412: break;
          case 190:
            { return SUBDIRECTIVE_NOPROLOG;
            }
          // fall through
          case 413: break;
          case 191:
            { return CONDITION_NOSTRING;
            }
          // fall through
          case 414: break;
          case 192:
            { return CONDITION_NOTREADY;
            }
          // fall through
          case 415: break;
          case 193:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 416: break;
          case 194:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 417: break;
          case 195:
            { return BUILTIN_SETLOCAL;
            }
          // fall through
          case 418: break;
          case 196:
            { return SUBDIRECTIVE_SUBCLASS;
            }
          // fall through
          case 419: break;
          case 197:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 420: break;
          case 198:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 421: break;
          case 199:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 422: break;
          case 200:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 423: break;
          case 201:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 424: break;
          case 202:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 425: break;
          case 203:
            { return SUBDIRECTIVE_METACLASS;
            }
          // fall through
          case 426: break;
          case 204:
            { return SUBDIRECTIVE_NAMESPACE;
            }
          // fall through
          case 427: break;
          case 205:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 428: break;
          case 206:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 429: break;
          case 207:
            { return CONDITION_PROPAGATE;
            }
          // fall through
          case 430: break;
          case 208:
            { return SUBDIRECTIVE_PROTECTED;
            }
          // fall through
          case 431: break;
          case 209:
            { return BUILTIN_RXFUNCADD;
            }
          // fall through
          case 432: break;
          case 210:
            { return BUILTIN_TRANSLATE;
            }
          // fall through
          case 433: break;
          case 211:
            { return SUBDIRECTIVE_UNGUARDED;
            }
          // fall through
          case 434: break;
          case 212:
            { return BUILTIN_WORDINDEX;
            }
          // fall through
          case 435: break;
          case 213:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 436: break;
          case 214:
            { return CONDITION_LOSTDIGITS;
            }
          // fall through
          case 437: break;
          case 215:
            { return SUBDIRECTIVE_MIXINCLASS;
            }
          // fall through
          case 438: break;
          case 216:
            { return BUILTIN_RXFUNCDROP;
            }
          // fall through
          case 439: break;
          case 217:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 440: break;
          case 218:
            { return BUILTIN_SOURCELINE;
            }
          // fall through
          case 441: break;
          case 219:
            { return BUILTIN_WORDLENGTH;
            }
          // fall through
          case 442: break;
          case 220:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 443: break;
          case 221:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 444: break;
          case 222:
            { return BUILTIN_RXFUNCQUERY;
            }
          // fall through
          case 445: break;
          case 223:
            { return SUBDIRECTIVE_UNPROTECTED;
            }
          // fall through
          case 446: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
