// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/rexx.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.lang.invoke.StringConcatFactory;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\3"+
    "\1\4\1\5\1\0\1\6\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\7\21\2\0\1\22\1\23\1\24\2\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\57\1\0\1\60\1\61\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\62\263\0\2\63\115\0\1\64\u01aa\0\1\65"+
    "\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\1\2\1\3\1\0\1\4\1\5"+
    "\1\6\1\0\1\7\2\10\1\11\1\12\1\13\27\14"+
    "\1\15\1\0\1\16\2\0\1\17\1\20\1\21\1\17"+
    "\1\22\1\23\1\24\3\0\1\25\1\26\1\27\1\30"+
    "\1\31\11\14\1\32\1\0\12\14\1\33\1\14\1\0"+
    "\12\14\1\34\6\14\1\0\3\14\1\0\4\14\1\35"+
    "\16\14\1\0\11\14\1\0\2\14\1\36\1\14\1\0"+
    "\3\14\1\0\5\14\1\0\2\14\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\34\14\0\1\45\1\46\1\47"+
    "\1\50\1\14\2\51\1\14\1\52\1\14\1\53\1\14"+
    "\1\54\2\14\1\55\1\14\1\0\1\56\1\57\2\14"+
    "\1\0\7\14\1\60\1\61\3\14\1\0\2\14\1\0"+
    "\1\14\1\0\1\62\5\14\1\0\2\14\1\0\1\63"+
    "\1\14\1\64\7\14\1\0\3\14\1\0\11\14\3\0"+
    "\1\65\2\14\1\0\1\66\1\14\1\66\1\0\2\14"+
    "\1\67\4\14\1\0\1\14\1\70\6\14\2\71\2\14"+
    "\1\0\3\14\1\0\4\14\1\0\5\14\1\0\4\14"+
    "\1\0\1\72\1\14\1\0\1\14\1\73\10\14\1\0"+
    "\4\14\1\0\4\14\1\74\1\14\1\0\1\74\1\14"+
    "\1\75\3\14\1\0\2\14\1\0\1\76\1\77\1\100"+
    "\1\14\1\101\5\0\1\72\1\0\1\73\10\0\1\102"+
    "\1\103\1\104\1\105\2\14\1\0\2\14\1\0\10\14"+
    "\3\0\1\106\2\107\4\14\1\0\4\14\1\0\1\14"+
    "\1\0\2\14\1\110\3\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\111\2\112\2\14\1\0\1\14\1\113\2\14"+
    "\1\113\2\14\2\0\1\14\1\114\1\14\1\115\1\14"+
    "\1\116\5\14\1\0\1\117\3\14\1\0\1\14\1\120"+
    "\4\14\1\121\2\14\3\0\1\14\1\0\3\14\1\0"+
    "\1\122\6\14\1\0\2\14\1\0\2\14\1\123\1\14"+
    "\1\0\1\14\1\0\5\14\1\0\1\14\1\124\2\125"+
    "\3\14\1\0\6\14\1\0\4\14\1\0\1\14\1\0"+
    "\2\14\1\126\2\14\1\127\2\14\1\0\3\14\1\0"+
    "\2\14\1\126\1\130\1\131\2\14\1\132\1\14\1\131"+
    "\3\14\1\0\1\14\1\133\1\14\1\0\1\133\3\14"+
    "\2\0\1\134\1\14\1\0\1\135\1\136\1\135\1\14"+
    "\1\137\1\140\4\0\1\117\5\0\1\127\5\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\141\1\14\1\0\1\14"+
    "\1\142\1\14\1\0\1\142\1\0\1\14\1\0\5\14"+
    "\1\143\1\0\1\143\2\144\2\14\1\0\2\14\2\0"+
    "\1\14\1\0\5\14\1\0\1\14\1\0\1\14\1\0"+
    "\2\14\1\0\1\145\1\14\1\0\2\14\2\146\1\0"+
    "\3\14\1\147\1\150\1\14\1\151\2\14\1\0\1\14"+
    "\1\152\1\14\1\0\1\153\4\14\1\154\1\0\1\154"+
    "\1\155\1\14\1\156\3\0\1\14\1\0\3\14\1\0"+
    "\1\14\1\0\6\14\1\0\2\14\1\0\4\14\1\0"+
    "\2\157\5\14\1\0\1\14\1\0\1\14\1\0\1\160"+
    "\2\161\2\14\1\162\1\14\1\0\3\14\1\0\1\163"+
    "\1\14\1\0\2\14\1\163\1\14\1\0\4\14\1\164"+
    "\2\14\1\165\1\0\1\165\3\14\1\0\2\14\1\0"+
    "\1\166\1\14\1\0\1\167\2\14\2\170\1\171\1\14"+
    "\1\0\2\172\1\173\2\14\2\0\2\174\3\14\1\175"+
    "\1\0\1\175\1\14\1\150\1\0\1\151\5\0\1\164"+
    "\5\0\1\176\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\177\2\14\1\0\1\200\1\201\1\200\1\201"+
    "\1\14\1\0\1\202\1\203\1\14\1\204\1\14\1\204"+
    "\2\14\1\0\2\14\2\0\2\205\2\14\1\0\2\14"+
    "\1\206\1\14\1\206\1\14\1\0\2\207\2\14\1\0"+
    "\1\14\2\210\2\14\1\0\1\14\1\211\3\14\1\0"+
    "\1\212\1\14\1\212\2\14\1\0\1\213\1\14\1\214"+
    "\1\14\1\214\1\14\3\0\1\14\1\0\1\14\1\215"+
    "\1\14\1\0\1\14\1\0\2\14\1\216\1\14\1\0"+
    "\3\14\1\0\1\14\1\0\1\14\1\217\2\14\1\0"+
    "\2\14\1\220\2\14\1\0\2\221\1\14\1\0\1\222"+
    "\1\223\2\14\1\0\1\14\1\224\1\14\2\0\1\14"+
    "\1\0\3\14\1\0\1\225\1\14\1\226\1\227\1\230"+
    "\2\231\1\14\1\232\1\14\1\232\1\233\1\234\1\226"+
    "\1\14\1\0\2\14\2\235\1\236\1\14\1\0\1\236"+
    "\3\14\1\0\1\237\2\0\1\225\1\0\1\227\1\230"+
    "\2\0\1\233\1\234\1\14\1\0\1\14\1\0\2\240"+
    "\3\14\1\0\1\14\1\0\1\14\1\0\1\241\1\242"+
    "\1\14\1\0\2\14\2\0\1\243\1\14\1\0\2\14"+
    "\1\244\1\14\1\0\2\14\1\0\2\14\2\245\1\246"+
    "\1\247\1\250\2\251\1\14\1\252\2\253\1\254\1\255"+
    "\1\14\1\0\1\254\1\255\2\256\2\14\1\0\1\14"+
    "\1\0\3\14\1\0\1\14\1\257\2\260\2\261\1\14"+
    "\1\0\1\262\2\263\1\264\3\14\1\264\2\265\1\266"+
    "\1\14\1\0\1\14\2\267\1\0\2\270\3\14\1\271"+
    "\1\14\1\0\3\14\1\0\1\272\1\14\1\0\2\14"+
    "\2\273\2\14\2\274\2\0\1\252\2\0\1\272\2\275"+
    "\1\14\1\0\1\276\2\14\1\0\2\277\1\14\1\0"+
    "\1\14\1\0\1\300\2\301\1\300\2\302\1\303\1\304"+
    "\1\14\1\0\1\305\1\14\1\0\1\14\1\306\2\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\307"+
    "\1\310\2\311\1\312\1\14\1\0\3\14\2\313\2\314"+
    "\4\14\1\0\1\315\1\14\1\0\2\316\1\14\1\0"+
    "\4\14\2\0\1\315\1\14\1\0\2\317\2\320\2\321"+
    "\2\322\1\14\1\0\1\14\1\0\1\323\1\324\1\14"+
    "\1\0\2\325\1\14\1\0\2\326\2\327\1\330\1\331"+
    "\1\332\1\333\3\14\1\0\1\14\1\0\2\334\1\335"+
    "\1\14\1\336\1\14\1\336\1\324\2\337\1\14\1\0"+
    "\1\14\1\0\2\340\2\341\1\342\1\14\2\343\2\344"+
    "\1\14\1\345\2\346\2\347\1\350\1\351";

  private static int [] zzUnpackAction() {
    int [] result = new int[1182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\330\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\154\0\u0948\0\330"+
    "\0\330\0\330\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\330"+
    "\0\330\0\u0a8c\0\330\0\330\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0546\0\u0ca8\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0546\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u0546\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u0546\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u0546\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\330\0\u1d52\0\330\0\330\0\330\0\330\0\330"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u0a20\0\u0a56\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u0546\0\u2154\0\u0546\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u0546\0\u2262\0\u2298\0\u0546\0\u0546"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u0546\0\u0546\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u0546\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66"+
    "\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16"+
    "\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u0546\0\u2e68\0\u2e9e\0\u2ed4\0\u0546\0\u2f0a"+
    "\0\330\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u3126\0\u0546\0\u315c\0\u3192\0\u31c8\0\u31fe"+
    "\0\u3234\0\u326a\0\u0546\0\330\0\u32a0\0\u32d6\0\u330c\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u0546\0\u377a\0\u37b0\0\u37e6\0\u381c"+
    "\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc"+
    "\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c"+
    "\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u0546"+
    "\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u0546"+
    "\0\u0546\0\u0546\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4"+
    "\0\u3fea\0\330\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e"+
    "\0\u4164\0\u419a\0\u41d0\0\u4206\0\u4206\0\u09ea\0\330\0\330"+
    "\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6"+
    "\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566"+
    "\0\u459c\0\u0546\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0"+
    "\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890"+
    "\0\u48c6\0\u48fc\0\u0546\0\u4932\0\u4968\0\u499e\0\u49d4\0\u4a0a"+
    "\0\u4a40\0\u4a76\0\u4aac\0\u0546\0\u0546\0\330\0\u4ae2\0\u4b18"+
    "\0\u4b4e\0\u4b84\0\u0546\0\u4bba\0\u4bf0\0\330\0\u4c26\0\u4c5c"+
    "\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u0546\0\u4da0\0\u0546"+
    "\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae\0\u4ee4\0\u0546\0\u4f1a"+
    "\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u0546\0\u5028\0\u505e\0\u5094"+
    "\0\u50ca\0\u0546\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e"+
    "\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be"+
    "\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e"+
    "\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e"+
    "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u0546\0\u0546"+
    "\0\330\0\u5898\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc"+
    "\0\u5a12\0\u5a48\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c"+
    "\0\u0546\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\u0546\0\u0546\0\u5f8e\0\u5fc4\0\u0546"+
    "\0\u5ffa\0\330\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108\0\u613e"+
    "\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee"+
    "\0\u0546\0\u6324\0\u635a\0\u0546\0\u6390\0\330\0\u63c6\0\330"+
    "\0\330\0\u63fc\0\u6432\0\u6468\0\u649e\0\330\0\u64d4\0\u650a"+
    "\0\u6540\0\u6576\0\u65ac\0\330\0\u65e2\0\u6618\0\u664e\0\u6684"+
    "\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe\0\u6834"+
    "\0\u686a\0\u68a0\0\u0546\0\u68d6\0\u690c\0\u6942\0\u0546\0\u6978"+
    "\0\u69ae\0\330\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2"+
    "\0\u6b28\0\u6b5e\0\u0546\0\u6b94\0\330\0\u0546\0\330\0\u6bca"+
    "\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a"+
    "\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a"+
    "\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e\0\u70a4\0\u70da"+
    "\0\u7110\0\u7146\0\u0546\0\330\0\u717c\0\u71b2\0\u71e8\0\u721e"+
    "\0\u7254\0\u0546\0\u728a\0\u0546\0\u72c0\0\u72f6\0\u732c\0\u7362"+
    "\0\u0546\0\u7398\0\u73ce\0\u0546\0\u7404\0\u743a\0\u7470\0\u74a6"+
    "\0\u0546\0\u74dc\0\330\0\u0546\0\u7512\0\u0546\0\u7548\0\u757e"+
    "\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e"+
    "\0\u7764\0\u779a\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de"+
    "\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec\0\u7a22\0\u7a58\0\u7a8e"+
    "\0\u0546\0\330\0\u7ac4\0\u7afa\0\u7b30\0\u7b66\0\u7b9c\0\u7bd2"+
    "\0\u7c08\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u0546\0\330\0\u7d16"+
    "\0\u7d4c\0\u0546\0\u7d82\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90"+
    "\0\u0546\0\u7ec6\0\u7efc\0\u7f32\0\u7f68\0\330\0\u7f9e\0\u7fd4"+
    "\0\u800a\0\u8040\0\u8076\0\u80ac\0\u0546\0\u80e2\0\u8118\0\u0546"+
    "\0\u814e\0\330\0\u8184\0\u81ba\0\u81f0\0\u8226\0\u825c\0\u8292"+
    "\0\u82c8\0\u0546\0\u82fe\0\u8334\0\u0546\0\u836a\0\u83a0\0\u0546"+
    "\0\330\0\u0546\0\u83d6\0\u840c\0\u0546\0\330\0\u0546\0\u8442"+
    "\0\u8478\0\u84ae\0\u84e4\0\u0546\0\330\0\u851a\0\u8550\0\u8586"+
    "\0\u0546\0\u85bc\0\330\0\u85f2\0\330\0\u8628\0\330\0\u865e"+
    "\0\u8694\0\u86ca\0\u8700\0\u8736\0\330\0\u876c\0\u87a2\0\u87d8"+
    "\0\u880e\0\u8844\0\u0546\0\u887a\0\u88b0\0\u88e6\0\u891c\0\u8952"+
    "\0\u8988\0\u89be\0\u0546\0\u89f4\0\u8a2a\0\u8a60\0\u0546\0\u0546"+
    "\0\330\0\330\0\u8a96\0\u8acc\0\u0546\0\u0546\0\u8b02\0\u0546"+
    "\0\u8b38\0\330\0\u8b6e\0\u8ba4\0\u8bda\0\u8c10\0\u8c46\0\u8c7c"+
    "\0\u8cb2\0\u0546\0\330\0\u8ce8\0\u8d1e\0\u8d54\0\u8d8a\0\u8dc0"+
    "\0\u0546\0\u8df6\0\330\0\u8e2c\0\u8e62\0\u0546\0\330\0\u8e98"+
    "\0\u8ece\0\u8f04\0\u8f3a\0\u0546\0\330\0\u8f70\0\u8fa6\0\u8fdc"+
    "\0\u9012\0\u0546\0\u9048\0\u907e\0\u90b4\0\u90ea\0\u0546\0\u9120"+
    "\0\330\0\u9156\0\u918c\0\u91c2\0\u0546\0\u91f8\0\u0546\0\u922e"+
    "\0\330\0\u9264\0\u929a\0\u92d0\0\u9306\0\u933c\0\u9372\0\u93a8"+
    "\0\u0546\0\u93de\0\u9414\0\u944a\0\u9480\0\u94b6\0\u94ec\0\u0546"+
    "\0\u9522\0\u9558\0\u958e\0\u95c4\0\u95fa\0\u9630\0\u9666\0\u969c"+
    "\0\u96d2\0\u0546\0\u9708\0\u973e\0\u9774\0\u97aa\0\u97e0\0\u0546"+
    "\0\u9816\0\u984c\0\u9882\0\u0546\0\330\0\u98b8\0\u98ee\0\u0546"+
    "\0\u0546\0\u9924\0\u995a\0\u9990\0\u99c6\0\u0546\0\u99fc\0\u9a32"+
    "\0\u9a68\0\u9a9e\0\u9ad4\0\u9b0a\0\u9b40\0\u9b76\0\u9bac\0\u0546"+
    "\0\u9be2\0\u0546\0\u9c18\0\u0546\0\u0546\0\330\0\u9c4e\0\u0546"+
    "\0\u9c84\0\330\0\u0546\0\u0546\0\330\0\u9cba\0\u9cf0\0\u9d26"+
    "\0\u9d5c\0\u0546\0\330\0\u0546\0\u9d92\0\u9dc8\0\330\0\u9dfe"+
    "\0\u9e34\0\u9e6a\0\u9ea0\0\u0546\0\u9ed6\0\u9f0c\0\330\0\u9f42"+
    "\0\u9f78\0\330\0\u9fae\0\u9fe4\0\330\0\330\0\ua01a\0\ua050"+
    "\0\ua086\0\ua0bc\0\u0546\0\330\0\ua0f2\0\ua128\0\ua15e\0\ua194"+
    "\0\ua1ca\0\ua200\0\ua236\0\ua26c\0\u0546\0\u0546\0\ua2a2\0\ua2d8"+
    "\0\ua30e\0\ua344\0\ua37a\0\ua3b0\0\u0546\0\ua3e6\0\ua41c\0\ua452"+
    "\0\ua488\0\u0546\0\ua4be\0\ua4f4\0\ua52a\0\ua560\0\ua596\0\ua5cc"+
    "\0\ua602\0\u0546\0\330\0\u0546\0\u0546\0\u0546\0\u0546\0\330"+
    "\0\ua638\0\u0546\0\u0546\0\330\0\u0546\0\u0546\0\ua66e\0\ua6a4"+
    "\0\330\0\330\0\u0546\0\330\0\ua6da\0\ua710\0\ua746\0\ua77c"+
    "\0\ua7b2\0\ua7e8\0\ua81e\0\ua854\0\ua88a\0\ua8c0\0\u0546\0\u0546"+
    "\0\330\0\u0546\0\330\0\ua8f6\0\ua92c\0\u0546\0\u0546\0\330"+
    "\0\u0546\0\ua962\0\ua998\0\ua9ce\0\330\0\u0546\0\330\0\u0546"+
    "\0\uaa04\0\uaa3a\0\uaa70\0\u0546\0\330\0\uaaa6\0\u0546\0\330"+
    "\0\uaadc\0\uab12\0\uab48\0\u0546\0\uab7e\0\uabb4\0\uabea\0\uac20"+
    "\0\uac56\0\uac8c\0\u0546\0\uacc2\0\uacf8\0\uad2e\0\uad64\0\u0546"+
    "\0\330\0\uad9a\0\uadd0\0\u0546\0\330\0\uae06\0\uae3c\0\330"+
    "\0\uae72\0\uaea8\0\330\0\u0546\0\330\0\uaede\0\uaf14\0\u0546"+
    "\0\uaf4a\0\uaf80\0\uafb6\0\u0546\0\330\0\uafec\0\ub022\0\ub058"+
    "\0\ub08e\0\u0546\0\u0546\0\330\0\330\0\u0546\0\330\0\u0546"+
    "\0\u0546\0\ub0c4\0\ub0fa\0\u0546\0\ub130\0\ub166\0\ub19c\0\u0546"+
    "\0\ub1d2\0\ub208\0\ub23e\0\ub274\0\ub2aa\0\ub2e0\0\ub316\0\ub34c"+
    "\0\ub382\0\u0546\0\u0546\0\u0546\0\330\0\u0546\0\ub3b8\0\ub3ee"+
    "\0\ub424\0\ub45a\0\ub490\0\u0546\0\330\0\u0546\0\330\0\ub4c6"+
    "\0\ub4fc\0\ub532\0\ub568\0\ub59e\0\u0546\0\ub5d4\0\ub60a\0\u0546"+
    "\0\330\0\ub640\0\ub676\0\ub6ac\0\ub6e2\0\ub718\0\ub74e\0\ub784"+
    "\0\ub7ba\0\330\0\ub7f0\0\ub826\0\u0546\0\330\0\u0546\0\330"+
    "\0\u0546\0\330\0\u0546\0\330\0\ub85c\0\ub892\0\ub8c8\0\ub8fe"+
    "\0\u0546\0\u0546\0\ub934\0\ub96a\0\u0546\0\330\0\ub9a0\0\ub9d6"+
    "\0\u0546\0\330\0\u0546\0\330\0\u0546\0\u0546\0\u0546\0\u0546"+
    "\0\uba0c\0\uba42\0\uba78\0\ubaae\0\ubae4\0\ubb1a\0\u0546\0\330"+
    "\0\u0546\0\ubb50\0\u0546\0\ubb86\0\330\0\330\0\u0546\0\330"+
    "\0\ubbbc\0\ubbf2\0\ubc28\0\ubc5e\0\u0546\0\330\0\u0546\0\330"+
    "\0\u0546\0\ubc94\0\u0546\0\330\0\u0546\0\330\0\ubcca\0\u0546"+
    "\0\u0546\0\330\0\u0546\0\330\0\u0546\0\u0546";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\33\1\51\1\52\1\0\1\53\1\54\1\55"+
    "\2\0\2\2\63\0\2\3\1\0\1\3\1\56\52\3"+
    "\1\0\6\3\3\0\1\57\157\0\1\60\56\0\10\7"+
    "\1\61\55\7\11\0\1\62\67\0\1\63\70\0\4\64"+
    "\55\0\1\65\70\0\1\13\1\0\4\16\4\0\1\66"+
    "\25\0\1\67\25\0\1\13\1\0\4\16\70\0\1\70"+
    "\63\0\1\71\1\72\64\0\1\73\1\74\56\0\1\33"+
    "\1\0\4\33\3\0\1\33\1\75\1\33\1\76\7\33"+
    "\1\77\1\33\1\100\1\33\1\101\1\33\1\102\1\33"+
    "\1\103\6\33\2\0\1\33\20\0\1\33\1\0\2\33"+
    "\1\104\1\33\3\0\10\33\1\105\17\33\1\106\1\33"+
    "\2\0\1\33\1\0\1\107\16\0\1\33\1\0\2\33"+
    "\1\110\1\33\3\0\1\111\3\33\1\112\2\33\1\113"+
    "\3\33\1\114\2\33\1\115\13\33\2\0\1\33\20\0"+
    "\1\33\1\0\2\33\1\116\1\33\3\0\1\117\3\33"+
    "\1\120\3\33\1\121\5\33\1\122\2\33\1\123\10\33"+
    "\2\0\1\33\1\0\1\124\16\0\1\33\1\0\4\33"+
    "\3\0\13\33\1\125\1\33\1\126\3\33\1\127\5\33"+
    "\1\130\2\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\1\131\15\33\1\132\5\33\1\133\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\134"+
    "\17\33\1\135\5\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\136\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\5\33\1\137\7\33\1\140\5\33"+
    "\1\141\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\32\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\1\142\3\33\1\143\3\33\1\144\5\33\1\145"+
    "\13\33\2\0\1\33\1\0\1\146\16\0\1\33\1\0"+
    "\4\33\3\0\1\147\3\33\1\150\3\33\1\151\21\33"+
    "\2\0\1\33\1\0\1\152\16\0\1\33\1\0\4\33"+
    "\3\0\1\153\15\33\1\154\5\33\1\155\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\5\33\1\156"+
    "\7\33\1\157\1\33\1\160\3\33\1\161\1\162\1\163"+
    "\4\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\164\15\33\1\165\2\33\1\166\2\33\1\167\5\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\24\33"+
    "\1\170\5\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\1\171\3\33\1\172\3\33\1\173\5\33\1\174"+
    "\10\33\1\175\2\33\2\0\1\33\1\0\1\176\16\0"+
    "\1\33\1\0\4\33\3\0\1\177\1\33\1\200\1\33"+
    "\1\201\3\33\1\202\5\33\1\203\1\204\3\33\1\205"+
    "\1\206\3\33\1\207\1\33\2\0\1\33\1\0\1\210"+
    "\16\0\1\33\1\0\4\33\3\0\7\33\1\211\1\212"+
    "\5\33\1\213\2\33\1\214\10\33\2\0\1\33\1\0"+
    "\1\215\16\0\1\33\1\0\4\33\3\0\15\33\1\216"+
    "\1\33\1\217\2\33\1\220\7\33\2\0\1\33\2\0"+
    "\1\221\15\0\1\33\1\0\4\33\3\0\1\222\3\33"+
    "\1\223\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\7\33\1\224\1\225\5\33\1\226\13\33\2\0"+
    "\1\33\1\0\1\227\16\0\1\33\1\0\2\33\1\230"+
    "\1\33\3\0\21\33\1\231\10\33\2\0\1\33\26\0"+
    "\1\232\1\233\1\234\32\0\1\235\66\0\1\236\67\0"+
    "\1\237\35\0\1\240\7\0\1\241\5\0\1\242\42\0"+
    "\1\243\1\0\1\244\1\0\1\245\3\0\1\210\5\0"+
    "\1\246\1\247\3\0\1\250\1\251\3\0\1\252\5\0"+
    "\1\210\2\0\2\57\1\0\63\57\2\63\1\0\63\63"+
    "\16\0\4\64\7\0\1\253\34\0\11\65\1\254\54\65"+
    "\16\0\2\255\64\0\4\256\3\0\6\256\55\0\1\257"+
    "\1\0\1\260\55\0\1\33\1\0\4\33\3\0\1\33"+
    "\1\261\20\33\1\262\7\33\2\0\1\33\2\0\1\263"+
    "\15\0\1\33\1\0\4\33\3\0\3\33\1\264\26\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\265\16\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\266\12\33\1\267\1\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\17\33\1\270\12\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\6\33"+
    "\1\271\12\33\1\272\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\273\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\27\33\1\274\2\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\275\6\33\2\0\1\33\54\0\1\276\31\0\1\33"+
    "\1\0\4\33\3\0\3\33\1\277\23\33\1\300\2\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\301\6\33\1\302\7\33\2\0\1\33\2\0\1\303"+
    "\15\0\1\33\1\0\4\33\3\0\15\33\1\304\14\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\305"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\306\31\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\14\33\1\307\1\310\1\33\1\311\4\33\1\312"+
    "\5\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\2\33\1\313\24\33\1\314\2\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\23\33\1\315\6\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\13\33\1\316"+
    "\6\33\1\317\7\33\2\0\1\33\2\0\1\320\15\0"+
    "\1\33\1\0\4\33\3\0\6\33\1\321\23\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\16\33\1\322"+
    "\13\33\2\0\1\33\37\0\1\323\46\0\1\33\1\0"+
    "\4\33\3\0\22\33\1\324\7\33\2\0\1\33\2\0"+
    "\1\325\15\0\1\33\1\0\4\33\3\0\3\33\1\326"+
    "\2\33\1\327\23\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\330\10\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\10\33\1\331\6\33\1\332"+
    "\3\33\1\333\6\33\2\0\1\33\1\0\1\334\16\0"+
    "\1\33\1\0\4\33\3\0\10\33\1\335\2\33\1\336"+
    "\16\33\2\0\1\33\1\0\1\337\16\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\340\10\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\31\33\1\341\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\342\6\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\343"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\344\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\3\33\1\345\3\33\1\346\7\33\1\347"+
    "\2\33\1\350\1\351\6\33\2\0\1\33\2\0\1\352"+
    "\15\0\1\33\1\0\4\33\3\0\4\33\1\353\25\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\33"+
    "\1\354\20\33\1\355\7\33\2\0\1\33\2\0\1\356"+
    "\15\0\1\33\1\0\4\33\3\0\1\357\4\33\1\360"+
    "\7\33\1\361\14\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\33\1\362\13\33\1\363\14\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\2\33\1\364"+
    "\13\33\1\365\3\33\1\366\3\33\1\367\3\33\2\0"+
    "\1\33\2\0\1\370\27\0\1\371\13\0\1\372\37\0"+
    "\1\33\1\0\4\33\3\0\27\33\1\373\2\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\22\33\1\374"+
    "\1\375\6\33\2\0\1\33\2\0\1\376\15\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\377\11\33\1\u0100\2\33"+
    "\2\0\1\33\46\0\1\u0101\11\0\1\u0102\25\0\1\33"+
    "\1\0\4\33\3\0\14\33\1\u0103\15\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\14\33\1\u0104\2\33"+
    "\1\u0105\1\33\1\u0106\1\u0107\1\u0108\1\33\1\u0109\4\33"+
    "\2\0\1\33\2\0\1\u010a\15\0\1\33\1\0\4\33"+
    "\3\0\14\33\1\u010b\15\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\5\33\1\u010c\24\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u010d\6\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\7\33"+
    "\1\u010e\22\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u010f\6\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0110\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\2\33\1\u0111\16\33"+
    "\1\u0112\10\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u0113\7\33\2\0\1\33\2\0\1\u0114"+
    "\15\0\1\33\1\0\4\33\3\0\10\33\1\u0115\5\33"+
    "\1\u0116\13\33\2\0\1\33\1\0\1\u0117\16\0\1\33"+
    "\1\0\4\33\3\0\1\33\1\u0118\11\33\1\u0119\6\33"+
    "\1\u011a\7\33\2\0\1\33\2\0\1\u011b\15\0\1\33"+
    "\1\0\4\33\3\0\1\u011c\3\33\1\u011d\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\10\33\1\u011e"+
    "\4\33\1\u011f\14\33\2\0\1\33\1\0\1\u0120\16\0"+
    "\1\33\1\0\4\33\3\0\17\33\1\u0121\1\u0122\1\33"+
    "\1\u0123\1\u0124\1\33\1\u0125\4\33\2\0\1\33\2\0"+
    "\1\u0126\15\0\1\33\1\0\4\33\3\0\6\33\1\u0127"+
    "\23\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\24\33\1\u0128\5\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\5\33\1\u0129\12\33\1\u012a\11\33\2\0"+
    "\1\33\37\0\1\u012b\46\0\1\33\1\0\4\33\3\0"+
    "\30\33\1\u012c\1\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\10\33\1\u012d\21\33\2\0\1\33\1\0"+
    "\1\u012e\16\0\1\33\1\0\4\33\3\0\13\33\1\u012f"+
    "\7\33\1\u0130\6\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\6\33\1\u0131\23\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u0132\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\1\u0133\31\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u0134\14\33\1\u0135\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\33\1\u0136\30\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\14\33\1\u0137\1\u0138"+
    "\14\33\2\0\1\33\37\0\1\u0139\46\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u013a\25\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\14\33\1\u013b\15\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\1\u013c\23\33"+
    "\1\u013d\5\33\2\0\1\33\45\0\1\u013e\40\0\1\33"+
    "\1\0\4\33\3\0\6\33\1\u013f\10\33\1\u0140\3\33"+
    "\1\u0141\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\17\33\1\u0142\12\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0143\3\33\1\u0144\21\33"+
    "\2\0\1\33\1\0\1\u0145\33\0\1\u0146\3\0\1\u0145"+
    "\25\0\1\u0145\16\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\u0147\5\33\1\u0148\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0149\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\4\33\1\u014a\3\33"+
    "\1\u014b\21\33\2\0\1\33\1\0\1\u014c\16\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u014d\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\21\33\1\u014e\10\33"+
    "\2\0\1\33\54\0\1\u014f\31\0\1\33\1\0\4\33"+
    "\3\0\1\33\1\u0150\1\u0151\1\u0152\26\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\1\u0153\31\33\2\0"+
    "\1\33\27\0\1\u0154\72\0\1\u0155\3\0\1\u0156\7\0"+
    "\1\u0157\2\0\1\352\1\u0158\13\0\1\352\32\0\1\u0159"+
    "\111\0\1\u015a\45\0\1\u012e\25\0\1\u012e\42\0\1\u015b"+
    "\7\0\1\u015c\66\0\1\u015d\41\0\1\u015e\71\0\1\u015f"+
    "\14\0\1\u0160\45\0\1\u0161\100\0\1\u0162\1\u0163\35\0"+
    "\2\u0164\2\0\4\u0165\55\0\1\254\3\0\1\u0166\73\0"+
    "\1\u0167\65\0\1\u0168\56\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u0169\10\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u016a\6\33\2\0\1\33\54\0"+
    "\1\u016b\31\0\1\33\1\0\4\33\3\0\10\33\1\u016c"+
    "\10\33\1\u016d\10\33\2\0\1\33\1\0\1\u016e\16\0"+
    "\1\33\1\0\4\33\3\0\16\33\1\u016f\13\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u0170"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\24\33\1\u0171\5\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\u0172\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0173\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\1\u0174\15\33\1\u0175"+
    "\10\33\1\u0176\2\33\2\0\1\33\31\0\1\u0177\15\0"+
    "\1\u0178\10\0\1\u0179\25\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u017a\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u017b\25\33\2\0\1\33\35\0"+
    "\1\u017c\50\0\1\33\1\0\4\33\3\0\23\33\1\u017d"+
    "\6\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\15\33\1\u017e\3\33\1\u017f\10\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\22\33\1\u0180\7\33\2\0"+
    "\1\33\2\0\1\u0181\15\0\1\33\1\0\4\33\3\0"+
    "\17\33\1\u0182\12\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\3\33\1\u0183\16\33\1\u0184\1\u0185\6\33"+
    "\2\0\1\33\2\0\1\u0186\15\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0187\21\33\2\0\1\33\1\0\1\u0188"+
    "\16\0\1\33\1\0\4\33\3\0\15\33\1\u0189\14\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\u018a"+
    "\3\33\1\u018b\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u018c\15\33\1\u018d\3\33\1\u018e"+
    "\3\33\2\0\1\33\2\0\1\u018f\15\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u0190\27\33\2\0\1\33\33\0"+
    "\1\u0191\52\0\1\33\1\0\4\33\3\0\10\33\1\u0192"+
    "\21\33\2\0\1\33\1\0\1\u0193\16\0\1\33\1\0"+
    "\4\33\3\0\17\33\1\u0194\12\33\2\0\1\33\41\0"+
    "\1\u0193\25\0\1\u0193\16\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u0195\25\33\2\0\1\33\35\0\1\u0196\50\0"+
    "\1\33\1\0\4\33\3\0\13\33\1\u0197\16\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\10\33\1\u0198"+
    "\21\33\2\0\1\33\1\0\1\u0199\16\0\1\33\1\0"+
    "\4\33\3\0\16\33\1\u019a\13\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\23\33\1\u019b\6\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\16\33\1\u019c"+
    "\13\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u019d\25\33\2\0\1\33\54\0\1\u019e\31\0"+
    "\1\33\1\0\4\33\3\0\13\33\1\u019f\16\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\22\33\1\u01a0"+
    "\7\33\2\0\1\33\2\0\1\u01a1\41\0\1\u01a2\41\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u01a3\7\33\1\u01a4"+
    "\11\33\1\u01a5\3\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\31\33\1\u01a6\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u01a7\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u01a8\6\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u01a9\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u01aa\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\24\33\1\u01ab\5\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\4\33\1\u01ac\25\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u01ad\25\33\2\0\1\33\35\0\1\u01ae\50\0\1\33"+
    "\1\0\4\33\3\0\14\33\1\u01af\4\33\1\u01b0\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u01b1\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u01b2\6\33\2\0\1\33\54\0\1\u01b3"+
    "\31\0\1\33\1\0\4\33\3\0\25\33\1\u01b4\4\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u01b5\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\6\33\1\u01b6\23\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u01b7\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\4\33\1\u01b8\25\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\u01b9"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\17\33\1\u01ba\12\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u01bb\6\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u01bc\25\33\2\0"+
    "\1\33\54\0\1\u01bd\63\0\1\u01be\50\0\1\u01bf\50\0"+
    "\1\33\1\0\4\33\3\0\22\33\1\u01c0\7\33\2\0"+
    "\1\33\2\0\1\u01c1\15\0\1\33\1\0\4\33\3\0"+
    "\1\u01c2\6\33\1\u01c3\22\33\2\0\1\33\53\0\1\u01c1"+
    "\14\0\1\u01c1\15\0\1\33\1\0\4\33\3\0\10\33"+
    "\1\u01c4\21\33\2\0\1\33\1\0\1\u01c5\37\0\1\u01c5"+
    "\25\0\1\u01c5\16\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u01c6\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u01c7\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u01c8\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\14\33\1\u01c9\15\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u01ca\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u01cb\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\u01cc\31\33\2\0\1\33\54\0"+
    "\1\u01cd\31\0\1\33\1\0\4\33\3\0\4\33\1\u01ce"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\10\33\1\u01cf\21\33\2\0\1\33\1\0\1\u01d0\16\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u01d1\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\17\33\1\u01d2"+
    "\12\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u01d3\10\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\12\33\1\u01d4\17\33\2\0\1\33\3\0"+
    "\1\u01d5\14\0\1\33\1\0\4\33\3\0\22\33\1\u01d6"+
    "\7\33\2\0\1\33\2\0\1\u01d7\15\0\1\33\1\0"+
    "\4\33\3\0\25\33\1\u01d8\4\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u01d9\10\33\1\u01da"+
    "\3\33\1\u01db\3\33\1\u01dc\6\33\2\0\1\33\56\0"+
    "\1\u01dd\27\0\1\33\1\0\4\33\3\0\13\33\1\u01de"+
    "\16\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u01df\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\7\33\1\u01e0\22\33\2\0\1\33\40\0"+
    "\1\u01e1\45\0\1\33\1\0\4\33\3\0\13\33\1\u01e2"+
    "\16\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\24\33\1\u01e3\5\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\22\33\1\u01e4\7\33\2\0\1\33\2\0"+
    "\1\u01e5\15\0\1\33\1\0\4\33\3\0\3\33\1\u01e6"+
    "\26\33\2\0\1\33\53\0\1\u01e5\14\0\1\u01e5\15\0"+
    "\1\33\1\0\4\33\3\0\13\33\1\u01e7\16\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\24\33\1\u01e8"+
    "\5\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\16\33\1\u01e9\13\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\24\33\1\u01ea\5\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u01eb\25\33\2\0"+
    "\1\33\47\0\1\u01ec\36\0\1\33\1\0\4\33\3\0"+
    "\7\33\1\u01ed\22\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u01ee\6\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u01ef\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\24\33\1\u01f0"+
    "\5\33\2\0\1\33\40\0\1\u01f1\45\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u01f2\25\33\2\0\1\33\35\0"+
    "\1\u01f3\50\0\1\33\1\0\4\33\3\0\4\33\1\u01f4"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u01f5\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\15\33\1\u01f6\14\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\21\33\1\u01f7\10\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\2\33\1\u01f8"+
    "\27\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\14\33\1\u01f9\15\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u01fa\3\33\1\u01fb\21\33\2\0"+
    "\1\33\1\0\1\u01fc\16\0\1\33\1\0\4\33\3\0"+
    "\2\33\1\u01fd\17\33\1\u01fe\3\33\1\u01ff\3\33\2\0"+
    "\1\33\2\0\1\u0200\15\0\1\33\1\0\4\33\3\0"+
    "\1\33\1\u0201\30\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u0202\6\33\2\0\1\33\46\0"+
    "\1\u0203\37\0\1\33\1\0\4\33\3\0\15\33\1\u0204"+
    "\14\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u0205\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u0206\12\33\1\u0207\14\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u0208"+
    "\10\33\1\u0209\14\33\2\0\1\33\35\0\1\u020a\50\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u020b\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\21\33\1\u020c"+
    "\10\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\10\33\1\u020d\21\33\2\0\1\33\1\0\1\u020e\16\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u020f\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\21\33\1\u0210"+
    "\10\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\15\33\1\u0211\14\33\2\0\1\33\46\0\1\u0212\71\0"+
    "\1\u0213\33\0\1\33\1\0\4\33\3\0\24\33\1\u0214"+
    "\5\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\10\33\1\u0215\11\33\1\u0216\7\33\2\0\1\33\1\0"+
    "\1\u0217\1\u0218\15\0\1\33\1\0\4\33\3\0\15\33"+
    "\1\u0219\14\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\13\33\1\u021a\16\33\2\0\1\33\44\0\1\u021b"+
    "\41\0\1\33\1\0\4\33\3\0\7\33\1\u021c\22\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\3\33"+
    "\1\u021d\26\33\2\0\1\33\40\0\1\u021e\45\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\u021f\14\33\2\0\1\33"+
    "\26\0\1\u0220\1\0\1\u0221\72\0\1\u0222\65\0\1\u0223"+
    "\105\0\1\u0224\45\0\1\u0225\75\0\1\u0226\4\0\1\u0227"+
    "\50\0\1\u0228\74\0\1\u0229\73\0\1\u022a\46\0\1\u022b"+
    "\77\0\1\u022c\55\0\1\u022d\3\0\1\u01fc\25\0\1\u01fc"+
    "\31\0\1\u022e\17\0\1\u0200\3\0\1\u022f\10\0\1\u0200"+
    "\27\0\1\u0230\107\0\1\u0231\33\0\4\u0165\60\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0232\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\21\33\1\u0233\10\33"+
    "\2\0\1\33\52\0\1\u0234\33\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u0235\6\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0236\25\33\2\0\1\33"+
    "\54\0\1\u0237\31\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u0238\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u0239\14\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\14\33\1\u023a\15\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\30\33\1\u023b\1\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\10\33"+
    "\1\u023c\21\33\2\0\1\33\1\0\1\u023d\16\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\u023e\14\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\21\33\1\u023f\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\16\33"+
    "\1\u0240\13\33\2\0\1\33\46\0\1\u0241\71\0\1\u0242"+
    "\62\0\1\u0243\36\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\u0244\16\33\2\0\1\33\44\0\1\u0245\41\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0246\14\33\1\u0247\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\6\33"+
    "\1\u0248\23\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0249\5\33\1\u024a\3\33\1\u024b\7\33"+
    "\2\0\1\33\1\0\1\u024c\1\u024d\15\0\1\33\1\0"+
    "\4\33\3\0\22\33\1\u024e\7\33\2\0\1\33\2\0"+
    "\1\u024f\50\0\1\u024f\14\0\1\u024f\15\0\1\33\1\0"+
    "\4\33\3\0\1\u0250\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\10\33\1\u0251\21\33\2\0\1\33"+
    "\1\0\1\u0252\16\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u0253\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0254\21\33\2\0\1\33\1\0\1\u0255"+
    "\52\0\1\u0256\31\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u0257\25\33\2\0\1\33\35\0\1\u0258\50\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u0259\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u025a\6\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\6\33"+
    "\1\u025b\23\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u025c\6\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\16\33\1\u025d\13\33\2\0\1\33"+
    "\54\0\1\u025e\31\0\1\33\1\0\4\33\3\0\21\33"+
    "\1\u025f\10\33\2\0\1\33\52\0\1\u0260\33\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u0261\6\33\2\0\1\33"+
    "\54\0\1\u0262\31\0\1\33\1\0\4\33\3\0\16\33"+
    "\1\u0263\13\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u0264\14\33\2\0\1\33\46\0\1\u0265"+
    "\37\0\1\33\1\0\4\33\3\0\21\33\1\u0266\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\22\33"+
    "\1\u0267\7\33\2\0\1\33\2\0\1\u0268\15\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0269\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\24\33\1\u026a\5\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u026b\25\33\2\0\1\33\35\0\1\u026c\105\0\1\u026d"+
    "\30\0\1\33\1\0\4\33\3\0\25\33\1\u026e\4\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\u026f"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\u0270\31\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\3\33\1\u0271\26\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\27\33\1\u0272\2\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\21\33\1\u0273\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u0274\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u0275\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0276\10\33\2\0\1\33"+
    "\52\0\1\u0277\33\0\1\33\1\0\4\33\3\0\1\u0278"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u0279\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\17\33\1\u027a\12\33\2\0\1\33\50\0"+
    "\1\u027b\35\0\1\33\1\0\4\33\3\0\4\33\1\u027c"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\23\33\1\u027d\6\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\u027e\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\10\33\1\u027f\5\33\1\u0280\3\33"+
    "\1\u0281\7\33\2\0\1\33\1\0\1\u0282\1\u0283\15\0"+
    "\1\33\1\0\4\33\3\0\13\33\1\u0284\16\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\3\33\1\u0285"+
    "\26\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u0286\10\33\2\0\1\33\34\0\1\u0287\62\0"+
    "\1\u0288\75\0\1\u0282\5\0\1\u0289\3\0\1\u0283\13\0"+
    "\1\u0282\1\u0283\15\0\1\33\1\0\4\33\3\0\1\u028a"+
    "\31\33\2\0\1\33\31\0\1\u028b\54\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u028c\27\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\16\33\1\u028d\13\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\15\33\1\u028e"+
    "\14\33\2\0\1\33\46\0\1\u028f\37\0\1\33\1\0"+
    "\4\33\3\0\22\33\1\u0290\7\33\2\0\1\33\2\0"+
    "\1\u0291\15\0\1\33\1\0\4\33\3\0\23\33\1\u0292"+
    "\6\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\16\33\1\u0293\13\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\u0294\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0295\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\4\33\1\u0296\25\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\u0297\16\33\2\0\1\33\52\0\1\u0298\33\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0299\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\16\33\1\u029a\13\33"+
    "\2\0\1\33\47\0\1\u029b\36\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u029c\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\24\33\1\u029d\5\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\13\33\1\u029e\16\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\1\u029f"+
    "\31\33\2\0\1\33\31\0\1\u02a0\54\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u02a1\25\33\2\0\1\33\35\0"+
    "\1\u02a2\50\0\1\33\1\0\4\33\3\0\1\u02a3\31\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u02a4\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\16\33\1\u02a5\13\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\u02a6\31\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u02a7\25\33\2\0"+
    "\1\33\31\0\1\u02a8\54\0\1\33\1\0\4\33\3\0"+
    "\10\33\1\u02a9\21\33\2\0\1\33\1\0\1\u02aa\16\0"+
    "\1\33\1\0\4\33\3\0\10\33\1\u02ab\21\33\2\0"+
    "\1\33\1\0\1\u02ac\16\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u02ad\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u02ae\25\33\2\0\1\33\35\0"+
    "\1\u02af\50\0\1\33\1\0\4\33\3\0\16\33\1\u02b0"+
    "\13\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\u02b1\27\33\1\u02b2\1\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\10\33\1\u02b3\21\33\2\0\1\33"+
    "\1\0\1\u02b4\16\0\1\33\1\0\4\33\3\0\24\33"+
    "\1\u02b5\5\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u02b6\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u02b7\10\33\2\0\1\33"+
    "\55\0\1\u02b8\30\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u02b9\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u02ba\21\33\2\0\1\33\1\0\1\u02bb"+
    "\16\0\1\33\1\0\4\33\3\0\15\33\1\u02bc\14\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u02bd\25\33\2\0\1\33\54\0\1\u02be\31\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\u02bf\14\33\2\0\1\33"+
    "\46\0\1\u02c0\37\0\1\33\1\0\4\33\3\0\2\33"+
    "\1\u02c1\27\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\16\33\1\u02c2\13\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\u02c3\31\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u02c4\27\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u02c5"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\u02c6\31\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\2\33\1\u02c7\14\33\1\u02c8\12\33\2\0\1\33"+
    "\33\0\1\u02c9\14\0\1\u02ca\35\0\1\33\1\0\4\33"+
    "\3\0\13\33\1\u02cb\16\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u02cc\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\16\33\1\u02cd\13\33"+
    "\2\0\1\33\54\0\1\u02ce\31\0\1\33\1\0\4\33"+
    "\3\0\16\33\1\u02cf\13\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\u02d0\31\33\2\0\1\33\31\0"+
    "\1\u02d1\54\0\1\33\1\0\4\33\3\0\4\33\1\u02d2"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\22\33\1\u02d3\7\33\2\0\1\33\2\0\1\u02d4\15\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u02d5\27\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\1\u02d6\31\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\16\33"+
    "\1\u02d7\13\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\13\33\1\u02d8\16\33\2\0\1\33\44\0\1\u02d9"+
    "\41\0\1\33\1\0\4\33\3\0\21\33\1\u02da\10\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\10\33"+
    "\1\u02db\21\33\2\0\1\33\1\0\1\u02dc\16\0\1\33"+
    "\1\0\4\33\3\0\6\33\1\u02dd\23\33\2\0\1\33"+
    "\37\0\1\u02de\67\0\1\u02dc\25\0\1\u02dc\16\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u02df\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\5\33\1\u02e0\24\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\10\33"+
    "\1\u02e1\21\33\2\0\1\33\1\0\1\u02e2\34\0\1\u02e3"+
    "\70\0\1\u02e2\25\0\1\u02e2\16\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u02e4\25\33\2\0\1\33\35\0\1\u02e5"+
    "\50\0\1\33\1\0\4\33\3\0\10\33\1\u02e6\2\33"+
    "\1\u02e7\3\33\1\u02e8\2\33\1\u02e9\7\33\2\0\1\33"+
    "\1\0\1\u02ea\1\u02eb\15\0\1\33\1\0\4\33\3\0"+
    "\6\33\1\u02ec\23\33\2\0\1\33\60\0\1\u02ed\57\0"+
    "\1\u02ee\67\0\1\u02ef\63\0\1\u02f0\44\0\1\u02f1\67\0"+
    "\1\u02f2\101\0\1\u02f3\51\0\1\u02f4\67\0\1\u02f5\61\0"+
    "\1\u02f6\100\0\1\u02f7\70\0\1\u02f8\65\0\1\u02f9\47\0"+
    "\1\u02fa\54\0\1\33\1\0\4\33\3\0\25\33\1\u02fb"+
    "\4\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\1\u02fc\31\33\2\0\1\33\31\0\1\u02fd\54\0\1\33"+
    "\1\0\4\33\3\0\10\33\1\u02fe\21\33\2\0\1\33"+
    "\1\0\1\u02ff\16\0\1\33\1\0\4\33\3\0\22\33"+
    "\1\u0300\7\33\2\0\1\33\2\0\1\u0301\36\0\1\u02ff"+
    "\25\0\1\u02ff\16\0\1\33\1\0\4\33\3\0\1\u0302"+
    "\31\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\3\33\1\u0303\26\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u0304\25\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\1\33\1\u0305\30\33\2\0"+
    "\1\33\32\0\1\u0306\53\0\1\33\1\0\4\33\3\0"+
    "\3\33\1\u0307\26\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\u0308\10\33\2\0\1\33\34\0"+
    "\1\u0309\103\0\1\u030a\33\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u030b\25\33\2\0\1\33\35\0\1\u030c\50\0"+
    "\1\33\1\0\4\33\3\0\21\33\1\u030d\10\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u030e"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u030f\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\15\33\1\u0310\14\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u0311\5\33\2\0"+
    "\1\33\46\0\1\u0312\37\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u0313\10\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u0314\6\33\2\0\1\33\54\0"+
    "\1\u0315\31\0\1\33\1\0\4\33\3\0\1\u0316\31\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\15\33"+
    "\1\u0317\14\33\2\0\1\33\46\0\1\u0318\50\0\1\u0319"+
    "\54\0\1\33\1\0\4\33\3\0\22\33\1\u031a\7\33"+
    "\2\0\1\33\2\0\1\u031b\50\0\1\u031b\14\0\1\u031b"+
    "\15\0\1\33\1\0\4\33\3\0\4\33\1\u031c\15\33"+
    "\1\u031d\7\33\2\0\1\33\2\0\1\u031e\15\0\1\33"+
    "\1\0\4\33\3\0\30\33\1\u031f\1\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\1\u0320\31\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\21\33\1\u0321"+
    "\10\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u0322\10\33\2\0\1\33\52\0\1\u0323\33\0"+
    "\1\33\1\0\4\33\3\0\10\33\1\u0324\21\33\2\0"+
    "\1\33\1\0\1\u0325\37\0\1\u0325\25\0\1\u0325\16\0"+
    "\1\33\1\0\4\33\3\0\22\33\1\u0326\7\33\2\0"+
    "\1\33\2\0\1\u0327\50\0\1\u0327\14\0\1\u0327\15\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u0328\27\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u0329"+
    "\25\33\2\0\1\33\35\0\1\u032a\50\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u032b\6\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u032c\25\33\2\0"+
    "\1\33\35\0\1\u032d\50\0\1\33\1\0\4\33\3\0"+
    "\15\33\1\u032e\14\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\u032f\10\33\2\0\1\33\52\0"+
    "\1\u0330\33\0\1\33\1\0\4\33\3\0\4\33\1\u0331"+
    "\25\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\23\33\1\u0332\6\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\u0333\10\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u0334\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\10\33\1\u0335"+
    "\21\33\2\0\1\33\1\0\1\u0336\16\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u0337\6\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\17\33\1\u0338\12\33\2\0"+
    "\1\33\54\0\1\u0339\31\0\1\33\1\0\4\33\3\0"+
    "\23\33\1\u033a\6\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\16\33\1\u033b\13\33\2\0\1\33\47\0"+
    "\1\u033c\36\0\1\33\1\0\4\33\3\0\7\33\1\u033d"+
    "\22\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u033e\10\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\15\33\1\u033f\14\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u0340\5\33\2\0"+
    "\1\33\46\0\1\u0341\37\0\1\33\1\0\4\33\3\0"+
    "\10\33\1\u0342\21\33\2\0\1\33\1\0\1\u0343\37\0"+
    "\1\u0343\25\0\1\u0343\50\0\1\u0344\70\0\1\u0345\30\0"+
    "\1\33\1\0\4\33\3\0\6\33\1\u0346\23\33\2\0"+
    "\1\33\37\0\1\u0347\46\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u0348\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\3\33\1\u0349\26\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u034a\27\33\2\0"+
    "\1\33\33\0\1\u034b\52\0\1\33\1\0\4\33\3\0"+
    "\17\33\1\u034c\12\33\2\0\1\33\50\0\1\u034d\35\0"+
    "\1\33\1\0\4\33\3\0\7\33\1\u034e\22\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\13\33\1\u034f"+
    "\16\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\13\33\1\u0350\16\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\10\33\1\u0351\21\33\2\0\1\33\1\0"+
    "\1\u0352\16\0\1\33\1\0\4\33\3\0\1\u0353\31\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\24\33"+
    "\1\u0354\5\33\2\0\1\33\41\0\1\u0352\25\0\1\u0352"+
    "\16\0\1\33\1\0\4\33\3\0\10\33\1\u0355\21\33"+
    "\2\0\1\33\1\0\1\u0356\16\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u0357\14\33\2\0\1\33\46\0\1\u0358"+
    "\37\0\1\33\1\0\4\33\3\0\26\33\1\u0359\3\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u035a\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\1\u035b\31\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\6\33\1\u035c\23\33\2\0\1\33\37\0"+
    "\1\u035d\46\0\1\33\1\0\4\33\3\0\23\33\1\u035e"+
    "\6\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\3\33\1\u035f\26\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\6\33\1\u0360\23\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\6\33\1\u0361\23\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\2\33\1\u0362"+
    "\27\33\2\0\1\33\54\0\1\u0363\31\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u0364\27\33\2\0\1\33\33\0"+
    "\1\u0365\52\0\1\33\1\0\4\33\3\0\5\33\1\u0366"+
    "\24\33\2\0\1\33\36\0\1\u0367\47\0\1\33\1\0"+
    "\4\33\3\0\3\33\1\u0368\26\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\14\33\1\u0369\15\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\2\33\1\u036a"+
    "\27\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\21\33\1\u036b\10\33\2\0\1\33\52\0\1\u036c\33\0"+
    "\1\33\1\0\4\33\3\0\21\33\1\u036d\10\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\15\33\1\u036e"+
    "\14\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\22\33\1\u036f\7\33\2\0\1\33\2\0\1\u0370\47\0"+
    "\1\u0371\33\0\1\33\1\0\4\33\3\0\15\33\1\u0372"+
    "\14\33\2\0\1\33\46\0\1\u0373\37\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u0374\27\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u0375\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\23\33\1\u0376"+
    "\6\33\2\0\1\33\54\0\1\u0377\31\0\1\33\1\0"+
    "\4\33\3\0\23\33\1\u0378\6\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\2\33\1\u0379\27\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\13\33\1\u037a"+
    "\16\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u037b\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\14\33\1\u037c\15\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\23\33\1\u037d\6\33\2\0"+
    "\1\33\54\0\1\u037e\31\0\1\33\1\0\4\33\3\0"+
    "\1\u037f\31\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u0380\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u0381\10\33\2\0\1\33"+
    "\52\0\1\u0382\33\0\1\33\1\0\4\33\3\0\13\33"+
    "\1\u0383\16\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\27\33\1\u0384\2\33\2\0\1\33\44\0\1\u0385"+
    "\41\0\1\33\1\0\4\33\3\0\13\33\1\u0386\16\33"+
    "\2\0\1\33\44\0\1\u0387\41\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u0388\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u0389\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\3\33\1\u038a\26\33"+
    "\2\0\1\33\34\0\1\u038b\51\0\1\33\1\0\4\33"+
    "\3\0\30\33\1\u038c\1\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\16\33\1\u038d\13\33\2\0\1\33"+
    "\47\0\1\u038e\77\0\1\u038f\24\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u0390\14\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0391\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\16\33\1\u0392\13\33"+
    "\2\0\1\33\46\0\1\u0393\37\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u0394\25\33\2\0\1\33\41\0\1\u0336"+
    "\25\0\1\u0336\46\0\1\u0395\71\0\1\u0396\65\0\1\u0397"+
    "\44\0\1\u0398\67\0\1\u0399\75\0\1\u039a\51\0\1\u039b"+
    "\106\0\1\u039c\57\0\1\u039d\101\0\1\u039e\25\0\1\33"+
    "\1\0\4\33\3\0\2\33\1\u039f\27\33\2\0\1\33"+
    "\33\0\1\u03a0\52\0\1\33\1\0\4\33\3\0\16\33"+
    "\1\u03a1\13\33\2\0\1\33\47\0\1\u03a2\36\0\1\33"+
    "\1\0\4\33\3\0\22\33\1\u03a3\7\33\2\0\1\33"+
    "\2\0\1\u03a4\50\0\1\u03a4\14\0\1\u03a4\15\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u03a5\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\15\33\1\u03a6\14\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\24\33"+
    "\1\u03a7\5\33\2\0\1\33\55\0\1\u03a8\30\0\1\33"+
    "\1\0\4\33\3\0\22\33\1\u03a9\7\33\2\0\1\33"+
    "\2\0\1\u03aa\50\0\1\u03aa\14\0\1\u03aa\15\0\1\33"+
    "\1\0\4\33\3\0\22\33\1\u03ab\7\33\2\0\1\33"+
    "\2\0\1\u03ac\15\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u03ad\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u03ae\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\10\33\1\u03af\21\33\2\0\1\33"+
    "\1\0\1\u03b0\37\0\1\u03b0\25\0\1\u03b0\16\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\u03b1\14\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\24\33\1\u03b2\5\33"+
    "\2\0\1\33\55\0\1\u03b3\56\0\1\u03b4\37\0\1\33"+
    "\1\0\4\33\3\0\21\33\1\u03b5\10\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u03b6\6\33"+
    "\2\0\1\33\54\0\1\u03b7\31\0\1\33\1\0\4\33"+
    "\3\0\17\33\1\u03b8\12\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u03b9\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\3\33\1\u03ba\26\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\17\33"+
    "\1\u03bb\12\33\2\0\1\33\50\0\1\u03bc\35\0\1\33"+
    "\1\0\4\33\3\0\1\u03bd\31\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u03be\25\33\2\0"+
    "\1\33\35\0\1\u03bf\50\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u03c0\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\1\u03c1\31\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u03c2\25\33\2\0\1\33"+
    "\35\0\1\u03c3\50\0\1\33\1\0\4\33\3\0\21\33"+
    "\1\u03c4\10\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\3\33\1\u03c5\26\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\3\33\1\u03c6\26\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u03c7\6\33"+
    "\2\0\1\33\54\0\1\u03c8\31\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u03c9\10\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u03ca\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\22\33\1\u03cb\7\33"+
    "\2\0\1\33\2\0\1\u03cc\50\0\1\u03cc\14\0\1\u03cc"+
    "\15\0\1\33\1\0\4\33\3\0\30\33\1\u03cd\1\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u03ce\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\6\33\1\u03cf\23\33\2\0\1\33\37\0\1\u03d0"+
    "\107\0\1\u03d1\60\0\1\u03d2\31\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u03d3\25\33\2\0\1\33\35\0\1\u03d4"+
    "\50\0\1\33\1\0\4\33\3\0\1\u03d5\31\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\13\33\1\u03d6"+
    "\16\33\2\0\1\33\44\0\1\u03d7\41\0\1\33\1\0"+
    "\4\33\3\0\1\u03d8\31\33\2\0\1\33\31\0\1\u03d9"+
    "\54\0\1\33\1\0\4\33\3\0\16\33\1\u03da\13\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\16\33"+
    "\1\u03db\13\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u03dc\14\33\2\0\1\33\46\0\1\u03dd"+
    "\37\0\1\33\1\0\4\33\3\0\3\33\1\u03de\26\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u03df\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\2\33\1\u03e0\27\33\2\0\1\33\33\0\1\u03e1"+
    "\52\0\1\33\1\0\4\33\3\0\22\33\1\u03e2\7\33"+
    "\2\0\1\33\2\0\1\u03e3\50\0\1\u03e3\14\0\1\u03e3"+
    "\15\0\1\33\1\0\4\33\3\0\10\33\1\u03e4\21\33"+
    "\2\0\1\33\1\0\1\u03e5\16\0\1\33\1\0\4\33"+
    "\3\0\30\33\1\u03e6\1\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u03e7\25\33\2\0\1\33"+
    "\35\0\1\u03e8\50\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u03e9\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\24\33\1\u03ea\5\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\1\u03eb\31\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\23\33\1\u03ec\6\33\2\0"+
    "\1\33\35\0\1\u03ed\50\0\1\33\1\0\4\33\3\0"+
    "\30\33\1\u03ee\1\33\2\0\1\33\61\0\1\u03ef\24\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u03f0\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\4\33\1\u03f1"+
    "\25\33\2\0\1\33\35\0\1\u03f2\50\0\1\33\1\0"+
    "\4\33\3\0\2\33\1\u03f3\27\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u03f4\25\33\2\0"+
    "\1\33\35\0\1\u03f5\63\0\1\u03f6\52\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u03f7\25\33\2\0\1\33\35\0"+
    "\1\u03f8\50\0\1\33\1\0\4\33\3\0\1\u03f9\2\33"+
    "\1\u03fa\14\33\1\u03fb\11\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u03fc\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\10\33\1\u03fd\21\33"+
    "\2\0\1\33\1\0\1\u03fe\37\0\1\u03fe\25\0\1\u03fe"+
    "\16\0\1\33\1\0\4\33\3\0\1\u03ff\31\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\13\33\1\u0400"+
    "\16\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\22\33\1\u0401\7\33\2\0\1\33\2\0\1\u0402\15\0"+
    "\1\33\1\0\4\33\3\0\3\33\1\u0403\26\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\1\u0404\31\33"+
    "\2\0\1\33\31\0\1\u0405\54\0\1\33\1\0\4\33"+
    "\3\0\3\33\1\u0406\26\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0407\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\15\33\1\u0408\14\33"+
    "\2\0\1\33\46\0\1\u0409\37\0\1\33\1\0\4\33"+
    "\3\0\3\33\1\u040a\26\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\15\33\1\u040b\14\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\22\33\1\u040c\7\33"+
    "\2\0\1\33\2\0\1\u040d\31\0\1\u040e\103\0\1\u040f"+
    "\50\0\1\u0410\61\0\1\u0411\100\0\1\u0412\74\0\1\u0402"+
    "\14\0\1\u0402\31\0\1\u0413\51\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u0414\6\33\2\0\1\33\54\0\1\u0415"+
    "\31\0\1\33\1\0\4\33\3\0\15\33\1\u0416\14\33"+
    "\2\0\1\33\46\0\1\u0417\37\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u0418\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u0419\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u041a\6\33"+
    "\2\0\1\33\54\0\1\u041b\31\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u041c\7\33\2\0\1\33\2\0\1\u041d"+
    "\50\0\1\u041d\14\0\1\u041d\15\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u041e\6\33\2\0\1\33\54\0\1\u041f"+
    "\31\0\1\33\1\0\4\33\3\0\16\33\1\u0420\13\33"+
    "\2\0\1\33\47\0\1\u0421\36\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u0422\6\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0423\25\33\2\0\1\33"+
    "\35\0\1\u0424\104\0\1\u0425\31\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u0426\10\33\2\0\1\33\52\0\1\u0427"+
    "\33\0\1\33\1\0\4\33\3\0\4\33\1\u0428\25\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u0429\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u042a\6\33\2\0\1\33\54\0\1\u042b"+
    "\31\0\1\33\1\0\4\33\3\0\13\33\1\u042c\16\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\21\33"+
    "\1\u042d\10\33\2\0\1\33\52\0\1\u042e\33\0\1\33"+
    "\1\0\4\33\3\0\27\33\1\u042f\2\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\13\33\1\u0430\16\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\4\33"+
    "\1\u0431\25\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0432\21\33\2\0\1\33\1\0\1\u0433"+
    "\37\0\1\u0433\25\0\1\u0433\16\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u0434\7\33\2\0\1\33\2\0\1\u0435"+
    "\15\0\1\33\1\0\4\33\3\0\1\u0436\31\33\2\0"+
    "\1\33\31\0\1\u0437\54\0\1\33\1\0\4\33\3\0"+
    "\2\33\1\u0438\27\33\2\0\1\33\33\0\1\u0439\52\0"+
    "\1\33\1\0\4\33\3\0\3\33\1\u043a\26\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\6\33\1\u043b"+
    "\23\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\6\33\1\u043c\23\33\2\0\1\33\37\0\1\u043d\46\0"+
    "\1\33\1\0\4\33\3\0\30\33\1\u043e\1\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\22\33\1\u043f"+
    "\7\33\2\0\1\33\2\0\1\u0440\50\0\1\u0440\14\0"+
    "\1\u0440\15\0\1\33\1\0\4\33\3\0\21\33\1\u0441"+
    "\10\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\23\33\1\u0442\6\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\4\33\1\u0443\25\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\22\33\1\u0444\7\33\2\0"+
    "\1\33\2\0\1\u0445\50\0\1\u0445\14\0\1\u0445\15\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u0446\25\33\2\0"+
    "\1\33\35\0\1\u0447\50\0\1\33\1\0\4\33\3\0"+
    "\3\33\1\u0448\26\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\21\33\1\u0449\10\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\24\33\1\u044a\5\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\5\33\1\u044b"+
    "\24\33\2\0\1\33\36\0\1\u044c\47\0\1\33\1\0"+
    "\4\33\3\0\13\33\1\u044d\16\33\2\0\1\33\20\0"+
    "\1\33\1\0\4\33\3\0\10\33\1\u044e\21\33\2\0"+
    "\1\33\1\0\1\u044f\16\0\1\33\1\0\4\33\3\0"+
    "\22\33\1\u0450\7\33\2\0\1\33\2\0\1\u0451\50\0"+
    "\1\u0451\14\0\1\u0451\15\0\1\33\1\0\4\33\3\0"+
    "\23\33\1\u0452\6\33\2\0\1\33\54\0\1\u0453\31\0"+
    "\1\33\1\0\4\33\3\0\4\33\1\u0454\25\33\2\0"+
    "\1\33\20\0\1\33\1\0\4\33\3\0\2\33\1\u0455"+
    "\27\33\2\0\1\33\20\0\1\33\1\0\4\33\3\0"+
    "\4\33\1\u0456\25\33\2\0\1\33\20\0\1\33\1\0"+
    "\4\33\3\0\6\33\1\u0457\23\33\2\0\1\33\35\0"+
    "\1\u0458\65\0\1\u0459\74\0\1\u045a\62\0\1\u044f\25\0"+
    "\1\u044f\16\0\1\33\1\0\4\33\3\0\1\u045b\31\33"+
    "\2\0\1\33\31\0\1\u045c\54\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u045d\7\33\2\0\1\33\2\0\1\u045e"+
    "\15\0\1\33\1\0\4\33\3\0\4\33\1\u045f\25\33"+
    "\2\0\1\33\35\0\1\u0460\50\0\1\33\1\0\4\33"+
    "\3\0\21\33\1\u0461\10\33\2\0\1\33\52\0\1\u0462"+
    "\33\0\1\33\1\0\4\33\3\0\15\33\1\u0463\14\33"+
    "\2\0\1\33\46\0\1\u0464\37\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0465\21\33\2\0\1\33\1\0\1\u0466"+
    "\37\0\1\u0466\25\0\1\u0466\16\0\1\33\1\0\4\33"+
    "\3\0\10\33\1\u0467\21\33\2\0\1\33\1\0\1\u0468"+
    "\37\0\1\u0468\25\0\1\u0468\16\0\1\33\1\0\4\33"+
    "\3\0\23\33\1\u0469\6\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u046a\6\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\23\33\1\u046b\6\33"+
    "\2\0\1\33\54\0\1\u046c\31\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u046d\7\33\2\0\1\33\2\0\1\u046e"+
    "\50\0\1\u046e\14\0\1\u046e\15\0\1\33\1\0\4\33"+
    "\3\0\22\33\1\u046f\7\33\2\0\1\33\2\0\1\u0470"+
    "\50\0\1\u0470\14\0\1\u0470\15\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u0471\25\33\2\0\1\33\35\0\1\u0472"+
    "\50\0\1\33\1\0\4\33\3\0\4\33\1\u0473\25\33"+
    "\2\0\1\33\35\0\1\u0474\50\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u0475\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u0476\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\3\33\1\u0477\26\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\3\33"+
    "\1\u0478\26\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\16\33\1\u0479\13\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\4\33\1\u047a\25\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\10\33\1\u047b\21\33"+
    "\2\0\1\33\1\0\1\u047c\37\0\1\u047c\25\0\1\u047c"+
    "\16\0\1\33\1\0\4\33\3\0\15\33\1\u047d\14\33"+
    "\2\0\1\33\46\0\1\u047e\37\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u047f\25\33\2\0\1\33\35\0\1\u0480"+
    "\50\0\1\33\1\0\4\33\3\0\3\33\1\u0481\26\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\23\33"+
    "\1\u0482\6\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\27\33\1\u0483\2\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\23\33\1\u0484\6\33\2\0\1\33"+
    "\60\0\1\u0485\61\0\1\u0486\31\0\1\33\1\0\4\33"+
    "\3\0\13\33\1\u0487\16\33\2\0\1\33\44\0\1\u0488"+
    "\41\0\1\33\1\0\4\33\3\0\16\33\1\u0489\13\33"+
    "\2\0\1\33\47\0\1\u048a\36\0\1\33\1\0\4\33"+
    "\3\0\15\33\1\u048b\14\33\2\0\1\33\46\0\1\u048c"+
    "\37\0\1\33\1\0\4\33\3\0\22\33\1\u048d\7\33"+
    "\2\0\1\33\2\0\1\u048e\50\0\1\u048e\14\0\1\u048e"+
    "\15\0\1\33\1\0\4\33\3\0\22\33\1\u048f\7\33"+
    "\2\0\1\33\2\0\1\u0490\50\0\1\u0490\14\0\1\u0490"+
    "\15\0\1\33\1\0\4\33\3\0\17\33\1\u0491\12\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\21\33"+
    "\1\u0492\10\33\2\0\1\33\20\0\1\33\1\0\4\33"+
    "\3\0\2\33\1\u0493\27\33\2\0\1\33\33\0\1\u0494"+
    "\52\0\1\33\1\0\4\33\3\0\4\33\1\u0495\25\33"+
    "\2\0\1\33\35\0\1\u0496\50\0\1\33\1\0\4\33"+
    "\3\0\4\33\1\u0497\25\33\2\0\1\33\20\0\1\33"+
    "\1\0\4\33\3\0\7\33\1\u0498\22\33\2\0\1\33"+
    "\20\0\1\33\1\0\4\33\3\0\15\33\1\u0499\14\33"+
    "\2\0\1\33\46\0\1\u049a\37\0\1\33\1\0\4\33"+
    "\3\0\6\33\1\u049b\23\33\2\0\1\33\37\0\1\u049c"+
    "\46\0\1\33\1\0\4\33\3\0\30\33\1\u049d\1\33"+
    "\2\0\1\33\20\0\1\33\1\0\4\33\3\0\3\33"+
    "\1\u049e\26\33\2\0\1\33\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[48384];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\36\1\1\0\1\1\2\0\2\1\3\11"+
    "\2\1\3\0\2\11\1\1\2\11\12\1\1\0\14\1"+
    "\1\0\21\1\1\0\3\1\1\0\23\1\1\0\11\1"+
    "\1\0\4\1\1\0\3\1\1\0\5\1\1\0\2\1"+
    "\1\11\1\1\5\11\14\0\21\1\1\0\4\1\1\0"+
    "\14\1\1\0\2\1\1\0\1\1\1\0\6\1\1\0"+
    "\2\1\1\0\12\1\1\0\3\1\1\0\11\1\3\0"+
    "\3\1\1\0\2\1\1\11\1\0\7\1\1\0\11\1"+
    "\1\11\2\1\1\0\3\1\1\0\4\1\1\0\5\1"+
    "\1\0\4\1\1\0\2\1\1\0\12\1\1\0\4\1"+
    "\1\0\6\1\1\0\6\1\1\0\2\1\1\0\5\1"+
    "\5\0\1\11\1\0\1\1\10\0\2\1\2\11\2\1"+
    "\1\0\2\1\1\0\10\1\3\0\7\1\1\0\4\1"+
    "\1\0\1\1\1\0\6\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\4\1\1\11\2\1"+
    "\2\0\13\1\1\0\4\1\1\0\11\1\3\0\1\1"+
    "\1\0\3\1\1\0\7\1\1\0\2\1\1\0\4\1"+
    "\1\0\1\1\1\0\5\1\1\0\3\1\1\11\3\1"+
    "\1\0\6\1\1\0\4\1\1\0\1\1\1\0\10\1"+
    "\1\0\3\1\1\0\11\1\1\11\3\1\1\0\3\1"+
    "\1\0\4\1\2\0\2\1\1\0\2\1\1\11\1\1"+
    "\2\11\4\0\1\11\5\0\1\11\5\0\2\1\1\0"+
    "\2\1\1\0\5\1\1\0\3\1\1\0\1\11\1\0"+
    "\1\1\1\0\6\1\1\0\1\11\1\1\1\11\2\1"+
    "\1\0\2\1\2\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\3\1"+
    "\1\11\1\0\11\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\11\3\1\3\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\6\1\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\11\5\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\4\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\1\1\0\10\1\1\0\1\11\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\4\1\1\11\2\1\1\0"+
    "\1\1\1\11\3\1\2\0\1\1\1\11\4\1\1\0"+
    "\1\11\1\1\1\11\1\0\1\11\5\0\1\11\5\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\2\11\1\1\1\0\5\1\1\11\2\1\1\0"+
    "\2\1\2\0\1\1\1\11\2\1\1\0\4\1\1\11"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\2\1\1\11"+
    "\2\1\1\0\5\1\1\0\2\1\1\11\2\1\1\0"+
    "\4\1\1\11\1\1\3\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\4\1\1\0\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\5\1\1\0\1\1\1\11\1\1\1\0"+
    "\4\1\1\0\3\1\2\0\1\1\1\0\3\1\1\0"+
    "\6\1\1\11\3\1\1\11\2\1\1\11\1\1\1\0"+
    "\3\1\1\11\2\1\1\0\1\11\3\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\1\11\2\0\2\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\2\0\2\1"+
    "\1\0\4\1\1\0\2\1\1\0\3\1\1\11\4\1"+
    "\1\11\3\1\1\11\3\1\1\0\2\11\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\3\1\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\0\2\1\1\11\1\0\1\1"+
    "\1\11\5\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\11\3\1\1\11\2\0\1\11\2\0\1\11\1\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\2\11\1\1\1\11\3\1"+
    "\1\0\2\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\11\2\1\1\0\4\1"+
    "\1\11\1\1\1\11\4\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\4\1\2\0\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\7\1\1\0"+
    "\1\1\1\0\1\1\1\11\4\1\2\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 234: break;
          case 2:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 235: break;
          case 3:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 236: break;
          case 4:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 237: break;
          case 5:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 238: break;
          case 6:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 239: break;
          case 7:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 240: break;
          case 8:
            { return NUMBER_INT;
            }
          // fall through
          case 241: break;
          case 9:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 242: break;
          case 10:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 243: break;
          case 11:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 244: break;
          case 12:
            { return IDENTIFIER;
            }
          // fall through
          case 245: break;
          case 13:
            { return OPERATOR_INTDIV;
            }
          // fall through
          case 246: break;
          case 14:
            { return OPERATOR_OR;
            }
          // fall through
          case 247: break;
          case 15:
            { return STRING;
            }
          // fall through
          case 248: break;
          case 16:
            { return SHEBANG;
            }
          // fall through
          case 249: break;
          case 17:
            { return OPERATOR_AND;
            }
          // fall through
          case 250: break;
          case 18:
            { return OPERATOR_POWER;
            }
          // fall through
          case 251: break;
          case 19:
            { return LINE_COMMENT;
            }
          // fall through
          case 252: break;
          case 20:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 253: break;
          case 21:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 254: break;
          case 22:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 255: break;
          case 23:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 256: break;
          case 24:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 257: break;
          case 25:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 258: break;
          case 26:
            { return SUBKEY_BY;
            }
          // fall through
          case 259: break;
          case 27:
            { return KEYWORD_DO;
            }
          // fall through
          case 260: break;
          case 28:
            { return KEYWORD_IF;
            }
          // fall through
          case 261: break;
          case 29:
            { return SUBKEY_ON;
            }
          // fall through
          case 262: break;
          case 30:
            { return SUBKEY_TO;
            }
          // fall through
          case 263: break;
          case 31:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 264: break;
          case 32:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 265: break;
          case 33:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 266: break;
          case 34:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 267: break;
          case 35:
            { return OPERATOR_XOR;
            }
          // fall through
          case 268: break;
          case 36:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 269: break;
          case 37:
            { return NUMBER_BINARY;
            }
          // fall through
          case 270: break;
          case 38:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 271: break;
          case 39:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 272: break;
          case 40:
            { return OPERATOR_STRICT_GREATERTHAN;
            }
          // fall through
          case 273: break;
          case 41:
            { return BUILTIN_ABS;
            }
          // fall through
          case 274: break;
          case 42:
            { return SUBDIRECTIVE_ALL;
            }
          // fall through
          case 275: break;
          case 43:
            { return CONDITION_ANY;
            }
          // fall through
          case 276: break;
          case 44:
            { return KEYWORD_ARG;
            }
          // fall through
          case 277: break;
          case 45:
            { return BUILTIN_B2X;
            }
          // fall through
          case 278: break;
          case 46:
            { return BUILTIN_C2D;
            }
          // fall through
          case 279: break;
          case 47:
            { return BUILTIN_C2X;
            }
          // fall through
          case 280: break;
          case 48:
            { return BUILTIN_D2C;
            }
          // fall through
          case 281: break;
          case 49:
            { return BUILTIN_D2X;
            }
          // fall through
          case 282: break;
          case 50:
            { return KEYWORD_END;
            }
          // fall through
          case 283: break;
          case 51:
            { return SUBKEY_FOR;
            }
          // fall through
          case 284: break;
          case 52:
            { return SUBDIRECTIVE_GET;
            }
          // fall through
          case 285: break;
          case 53:
            { return BUILTIN_MAX;
            }
          // fall through
          case 286: break;
          case 54:
            { return BUILTIN_MIN;
            }
          // fall through
          case 287: break;
          case 55:
            { return KEYWORD_NOP;
            }
          // fall through
          case 288: break;
          case 56:
            { return SUBKEY_OFF;
            }
          // fall through
          case 289: break;
          case 57:
            { return BUILTIN_POS;
            }
          // fall through
          case 290: break;
          case 58:
            { return KEYWORD_SAY;
            }
          // fall through
          case 291: break;
          case 59:
            { return SUBDIRECTIVE_SET;
            }
          // fall through
          case 292: break;
          case 60:
            { return KEYWORD_USE;
            }
          // fall through
          case 293: break;
          case 61:
            { return SUBKEY_VAR;
            }
          // fall through
          case 294: break;
          case 62:
            { return BUILTIN_X2B;
            }
          // fall through
          case 295: break;
          case 63:
            { return BUILTIN_X2C;
            }
          // fall through
          case 296: break;
          case 64:
            { return BUILTIN_X2D;
            }
          // fall through
          case 297: break;
          case 65:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 298: break;
          case 66:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 299: break;
          case 67:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 300: break;
          case 68:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 301: break;
          case 69:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 302: break;
          case 70:
            { return KEYWORD_CALL;
            }
          // fall through
          case 303: break;
          case 71:
            { return SUBKEY_CASE;
            }
          // fall through
          case 304: break;
          case 72:
            { return BUILTIN_DATE;
            }
          // fall through
          case 305: break;
          case 73:
            { return KEYWORD_DROP;
            }
          // fall through
          case 306: break;
          case 74:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 307: break;
          case 75:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 308: break;
          case 76:
            { return SUBKEY_FORM;
            }
          // fall through
          case 309: break;
          case 77:
            { return SUBKEY_FUZZ;
            }
          // fall through
          case 310: break;
          case 78:
            { return CONDITION_HALT;
            }
          // fall through
          case 311: break;
          case 79:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 312: break;
          case 80:
            { return BUILTIN_LEFT;
            }
          // fall through
          case 313: break;
          case 81:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 314: break;
          case 82:
            { return SUBKEY_NAME;
            }
          // fall through
          case 315: break;
          case 83:
            { return SUBKEY_OVER;
            }
          // fall through
          case 316: break;
          case 84:
            { return KEYWORD_PULL;
            }
          // fall through
          case 317: break;
          case 85:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 318: break;
          case 86:
            { return BUILTIN_SIGN;
            }
          // fall through
          case 319: break;
          case 87:
            { return SUBKEY_STEM;
            }
          // fall through
          case 320: break;
          case 88:
            { return KEYWORD_THEN;
            }
          // fall through
          case 321: break;
          case 89:
            { return BUILTIN_TIME;
            }
          // fall through
          case 322: break;
          case 90:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 323: break;
          case 91:
            { return CONDITION_USER;
            }
          // fall through
          case 324: break;
          case 92:
            { return KEYWORD_WHEN;
            }
          // fall through
          case 325: break;
          case 93:
            { return SUBKEY_WITH;
            }
          // fall through
          case 326: break;
          case 94:
            { return BUILTIN_WORD;
            }
          // fall through
          case 327: break;
          case 95:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 328: break;
          case 96:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 329: break;
          case 97:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 330: break;
          case 98:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 331: break;
          case 99:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 332: break;
          case 100:
            { return DIRECTIVE_CLASS;
            }
          // fall through
          case 333: break;
          case 101:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 334: break;
          case 102:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 335: break;
          case 103:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 336: break;
          case 104:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 337: break;
          case 105:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 338: break;
          case 106:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 339: break;
          case 107:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 340: break;
          case 108:
            { return BUILTIN_LINES;
            }
          // fall through
          case 341: break;
          case 109:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 342: break;
          case 110:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 343: break;
          case 111:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 344: break;
          case 112:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 345: break;
          case 113:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 346: break;
          case 114:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 347: break;
          case 115:
            { return BUILTIN_RIGHT;
            }
          // fall through
          case 348: break;
          case 116:
            { return BUILTIN_SPACE;
            }
          // fall through
          case 349: break;
          case 117:
            { return BUILTIN_STRIP;
            }
          // fall through
          case 350: break;
          case 118:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 351: break;
          case 119:
            { return BUILTIN_TRUNC;
            }
          // fall through
          case 352: break;
          case 120:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 353: break;
          case 121:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 354: break;
          case 122:
            { return SUBKEY_USING;
            }
          // fall through
          case 355: break;
          case 123:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 356: break;
          case 124:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 357: break;
          case 125:
            { return BUILTIN_WORDS;
            }
          // fall through
          case 358: break;
          case 126:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 359: break;
          case 127:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 360: break;
          case 128:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 361: break;
          case 129:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 362: break;
          case 130:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 363: break;
          case 131:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 364: break;
          case 132:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 365: break;
          case 133:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 366: break;
          case 134:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 367: break;
          case 135:
            { return SUBKEY_DIGITS;
            }
          // fall through
          case 368: break;
          case 136:
            { return KEYWORD_EXPOSE;
            }
          // fall through
          case 369: break;
          case 137:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 370: break;
          case 138:
            { return BUILTIN_INSERT;
            }
          // fall through
          case 371: break;
          case 139:
            { return BUILTIN_LENGTH;
            }
          // fall through
          case 372: break;
          case 140:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 373: break;
          case 141:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 374: break;
          case 142:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 375: break;
          case 143:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 376: break;
          case 144:
            { return SUBDIRECTIVE_PROLOG;
            }
          // fall through
          case 377: break;
          case 145:
            { return SUBDIRECTIVE_PUBLIC;
            }
          // fall through
          case 378: break;
          case 146:
            { return BUILTIN_QUEUED;
            }
          // fall through
          case 379: break;
          case 147:
            { return BUILTIN_RANDOM;
            }
          // fall through
          case 380: break;
          case 148:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 381: break;
          case 149:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 382: break;
          case 150:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 383: break;
          case 151:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 384: break;
          case 152:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 385: break;
          case 153:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 386: break;
          case 154:
            { return BUILTIN_SUBSTR;
            }
          // fall through
          case 387: break;
          case 155:
            { return BUILTIN_SYMBOL;
            }
          // fall through
          case 388: break;
          case 156:
            { return CONDITION_SYNTAX;
            }
          // fall through
          case 389: break;
          case 157:
            { return BUILTIN_USERID;
            }
          // fall through
          case 390: break;
          case 158:
            { return BUILTIN_VERIFY;
            }
          // fall through
          case 391: break;
          case 159:
            { return BUILTIN_XRANGE;
            }
          // fall through
          case 392: break;
          case 160:
            { return KEYWORD_ADDRESS;
            }
          // fall through
          case 393: break;
          case 161:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 394: break;
          case 162:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 395: break;
          case 163:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 396: break;
          case 164:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 397: break;
          case 165:
            { return CONDITION_FAILURE;
            }
          // fall through
          case 398: break;
          case 166:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 399: break;
          case 167:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 400: break;
          case 168:
            { return SUBDIRECTIVE_GUARDED;
            }
          // fall through
          case 401: break;
          case 169:
            { return SUBDIRECTIVE_INHERIT;
            }
          // fall through
          case 402: break;
          case 170:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 403: break;
          case 171:
            { return BUILTIN_LASTPOS;
            }
          // fall through
          case 404: break;
          case 172:
            { return SUBDIRECTIVE_LIBRARY;
            }
          // fall through
          case 405: break;
          case 173:
            { return BUILTIN_LINEOUT;
            }
          // fall through
          case 406: break;
          case 174:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 407: break;
          case 175:
            { return CONDITION_NOVALUE;
            }
          // fall through
          case 408: break;
          case 176:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 409: break;
          case 177:
            { return DIRECTIVE_OPTIONS;
            }
          // fall through
          case 410: break;
          case 178:
            { return BUILTIN_OVERLAY;
            }
          // fall through
          case 411: break;
          case 179:
            { return SUBDIRECTIVE_PACKAGE;
            }
          // fall through
          case 412: break;
          case 180:
            { return SUBDIRECTIVE_PRIVATE;
            }
          // fall through
          case 413: break;
          case 181:
            { return BUILTIN_QUALIFY;
            }
          // fall through
          case 414: break;
          case 182:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 415: break;
          case 183:
            { return BUILTIN_REVERSE;
            }
          // fall through
          case 416: break;
          case 184:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 417: break;
          case 185:
            { return BUILTIN_RXQUEUE;
            }
          // fall through
          case 418: break;
          case 186:
            { return BUILTIN_SUBWORD;
            }
          // fall through
          case 419: break;
          case 187:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 420: break;
          case 188:
            { return BUILTIN_WORDPOS;
            }
          // fall through
          case 421: break;
          case 189:
            { return SUBDIRECTIVE_ABSTRACT;
            }
          // fall through
          case 422: break;
          case 190:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 423: break;
          case 191:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 424: break;
          case 192:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 425: break;
          case 193:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 426: break;
          case 194:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 427: break;
          case 195:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 428: break;
          case 196:
            { return SUBDIRECTIVE_DELEGATE;
            }
          // fall through
          case 429: break;
          case 197:
            { return BUILTIN_ENDLOCAL;
            }
          // fall through
          case 430: break;
          case 198:
            { return SUBDIRECTIVE_EXTERNAL;
            }
          // fall through
          case 431: break;
          case 199:
            { return CONDITION_NOMETHOD;
            }
          // fall through
          case 432: break;
          case 200:
            { return SUBDIRECTIVE_NOPROLOG;
            }
          // fall through
          case 433: break;
          case 201:
            { return CONDITION_NOSTRING;
            }
          // fall through
          case 434: break;
          case 202:
            { return CONDITION_NOTREADY;
            }
          // fall through
          case 435: break;
          case 203:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 436: break;
          case 204:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 437: break;
          case 205:
            { return BUILTIN_SETLOCAL;
            }
          // fall through
          case 438: break;
          case 206:
            { return SUBDIRECTIVE_SUBCLASS;
            }
          // fall through
          case 439: break;
          case 207:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 440: break;
          case 208:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 441: break;
          case 209:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 442: break;
          case 210:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 443: break;
          case 211:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 444: break;
          case 212:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 445: break;
          case 213:
            { return SUBDIRECTIVE_METACLASS;
            }
          // fall through
          case 446: break;
          case 214:
            { return SUBDIRECTIVE_NAMESPACE;
            }
          // fall through
          case 447: break;
          case 215:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 448: break;
          case 216:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 449: break;
          case 217:
            { return CONDITION_PROPAGATE;
            }
          // fall through
          case 450: break;
          case 218:
            { return SUBDIRECTIVE_PROTECTED;
            }
          // fall through
          case 451: break;
          case 219:
            { return BUILTIN_RXFUNCADD;
            }
          // fall through
          case 452: break;
          case 220:
            { return BUILTIN_TRANSLATE;
            }
          // fall through
          case 453: break;
          case 221:
            { return SUBDIRECTIVE_UNGUARDED;
            }
          // fall through
          case 454: break;
          case 222:
            { return BUILTIN_WORDINDEX;
            }
          // fall through
          case 455: break;
          case 223:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 456: break;
          case 224:
            { return CONDITION_LOSTDIGITS;
            }
          // fall through
          case 457: break;
          case 225:
            { return SUBDIRECTIVE_MIXINCLASS;
            }
          // fall through
          case 458: break;
          case 226:
            { return BUILTIN_RXFUNCDROP;
            }
          // fall through
          case 459: break;
          case 227:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 460: break;
          case 228:
            { return BUILTIN_SOURCELINE;
            }
          // fall through
          case 461: break;
          case 229:
            { return BUILTIN_WORDLENGTH;
            }
          // fall through
          case 462: break;
          case 230:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 463: break;
          case 231:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 464: break;
          case 232:
            { return BUILTIN_RXFUNCQUERY;
            }
          // fall through
          case 465: break;
          case 233:
            { return SUBDIRECTIVE_UNPROTECTED;
            }
          // fall through
          case 466: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
