// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/rexx.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.lang.invoke.StringConcatFactory;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\3"+
    "\1\4\1\5\1\0\1\6\1\7\1\10\2\0\1\11"+
    "\1\12\1\0\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\7\21\1\22\1\0\1\23\1\24\1\25\2\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\60\1\0\1\61\1\62\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\63\1\0\1\64\261\0\2\65\115\0"+
    "\1\66\u01aa\0\1\67\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\1\2\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\2\11\1\0\1\12\1\13\1\14"+
    "\27\15\1\16\1\0\1\17\1\20\2\0\1\21\1\22"+
    "\1\23\1\21\1\24\1\25\1\26\5\0\1\27\1\30"+
    "\1\31\1\32\1\33\11\15\1\34\1\0\12\15\1\35"+
    "\1\15\1\0\12\15\1\36\6\15\1\0\3\15\1\0"+
    "\4\15\1\37\16\15\1\0\11\15\1\0\2\15\1\40"+
    "\1\15\1\0\3\15\1\0\5\15\1\0\2\15\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\36\14\0\1\47"+
    "\1\50\3\0\1\51\1\52\1\15\2\53\1\15\1\54"+
    "\1\15\1\55\1\15\1\56\2\15\1\57\1\15\1\0"+
    "\1\60\1\61\2\15\1\0\7\15\1\62\1\63\3\15"+
    "\1\0\2\15\1\0\1\15\1\0\1\64\5\15\1\0"+
    "\2\15\1\0\1\65\1\15\1\66\7\15\1\0\3\15"+
    "\1\0\11\15\3\0\1\67\2\15\1\0\1\70\1\15"+
    "\1\70\1\0\2\15\1\71\4\15\1\0\1\15\1\72"+
    "\6\15\2\73\2\15\1\0\3\15\1\0\4\15\1\0"+
    "\5\15\1\0\4\15\1\0\1\74\1\15\1\0\1\15"+
    "\1\75\10\15\1\0\4\15\1\0\4\15\1\76\1\15"+
    "\1\0\1\76\1\15\1\77\3\15\1\0\2\15\1\0"+
    "\1\100\1\101\1\102\1\15\1\103\5\0\1\74\1\0"+
    "\1\75\10\0\1\104\1\105\3\0\1\106\1\107\2\15"+
    "\1\0\2\15\1\0\10\15\3\0\1\110\2\111\4\15"+
    "\1\0\4\15\1\0\1\15\1\0\2\15\1\112\3\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\113\2\114\2\15"+
    "\1\0\1\15\1\115\2\15\1\115\2\15\2\0\1\15"+
    "\1\116\1\15\1\117\1\15\1\120\5\15\1\0\1\121"+
    "\3\15\1\0\1\15\1\122\4\15\1\123\2\15\3\0"+
    "\1\15\1\0\3\15\1\0\1\124\6\15\1\0\2\15"+
    "\1\0\2\15\1\125\1\15\1\0\1\15\1\0\5\15"+
    "\1\0\1\15\1\126\2\127\3\15\1\0\6\15\1\0"+
    "\4\15\1\0\1\15\1\0\2\15\1\130\2\15\1\131"+
    "\2\15\1\0\3\15\1\0\2\15\1\130\1\132\1\133"+
    "\2\15\1\134\1\15\1\133\3\15\1\0\1\15\1\135"+
    "\1\15\1\0\1\135\3\15\2\0\1\136\1\15\1\0"+
    "\1\137\1\140\1\137\1\15\1\141\1\142\4\0\1\121"+
    "\5\0\1\131\10\0\2\15\1\0\2\15\1\0\3\15"+
    "\1\143\1\15\1\0\1\15\1\144\1\15\1\0\1\144"+
    "\1\0\1\15\1\0\5\15\1\145\1\0\1\145\2\146"+
    "\2\15\1\0\2\15\2\0\1\15\1\0\5\15\1\0"+
    "\1\15\1\0\1\15\1\0\2\15\1\0\1\147\1\15"+
    "\1\0\2\15\2\150\1\0\3\15\1\151\1\152\1\15"+
    "\1\153\2\15\1\0\1\15\1\154\1\15\1\0\1\155"+
    "\4\15\1\156\1\0\1\156\1\157\1\15\1\160\3\0"+
    "\1\15\1\0\3\15\1\0\1\15\1\0\6\15\1\0"+
    "\2\15\1\0\4\15\1\0\2\161\5\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\162\2\163\2\15\1\164\1\15"+
    "\1\0\3\15\1\0\1\165\1\15\1\0\2\15\1\165"+
    "\1\15\1\0\4\15\1\166\2\15\1\167\1\0\1\167"+
    "\3\15\1\0\2\15\1\0\1\170\1\15\1\0\1\171"+
    "\2\15\2\172\1\173\1\15\1\0\2\174\1\175\2\15"+
    "\2\0\2\176\3\15\1\177\1\0\1\177\1\15\1\152"+
    "\1\0\1\153\5\0\1\166\10\0\1\200\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\201\2\15\1\0"+
    "\1\202\1\203\1\202\1\203\1\15\1\0\1\204\1\205"+
    "\1\15\1\206\1\15\1\206\2\15\1\0\2\15\2\0"+
    "\2\207\2\15\1\0\2\15\1\210\1\15\1\210\1\15"+
    "\1\0\2\211\2\15\1\0\1\15\2\212\2\15\1\0"+
    "\1\15\1\213\3\15\1\0\1\214\1\15\1\214\2\15"+
    "\1\0\1\215\1\15\1\216\1\15\1\216\1\15\3\0"+
    "\1\15\1\0\1\15\1\217\1\15\1\0\1\15\1\0"+
    "\2\15\1\220\1\15\1\0\3\15\1\0\1\15\1\0"+
    "\1\15\1\221\2\15\1\0\2\15\1\222\2\15\1\0"+
    "\2\223\1\15\1\0\1\224\1\225\2\15\1\0\1\15"+
    "\1\226\1\15\2\0\1\15\1\0\3\15\1\0\1\227"+
    "\1\15\1\230\1\231\1\232\2\233\1\15\1\234\1\15"+
    "\1\234\1\235\1\236\1\230\1\15\1\0\2\15\2\237"+
    "\1\240\1\15\1\0\1\240\3\15\1\0\1\241\2\0"+
    "\1\227\1\0\1\231\1\232\2\0\1\235\1\236\1\0"+
    "\1\242\1\0\1\15\1\0\1\15\1\0\2\243\3\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\244\1\245\1\15"+
    "\1\0\2\15\2\0\1\246\1\15\1\0\2\15\1\247"+
    "\1\15\1\0\2\15\1\0\2\15\2\250\1\251\1\252"+
    "\1\253\2\254\1\15\1\255\2\256\1\257\1\260\1\15"+
    "\1\0\1\257\1\260\2\261\2\15\1\0\1\15\1\0"+
    "\3\15\1\0\1\15\1\262\2\263\2\264\1\15\1\0"+
    "\1\265\2\266\1\267\3\15\1\267\2\270\1\271\1\15"+
    "\1\0\1\15\2\272\1\0\2\273\3\15\1\274\1\15"+
    "\1\0\3\15\1\0\1\275\1\15\1\0\2\15\2\276"+
    "\2\15\2\277\2\0\1\255\2\0\1\275\1\0\1\300"+
    "\2\301\1\15\1\0\1\302\2\15\1\0\2\303\1\15"+
    "\1\0\1\15\1\0\1\304\2\305\1\304\2\306\1\307"+
    "\1\310\1\15\1\0\1\311\1\15\1\0\1\15\1\312"+
    "\2\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\1\313\1\314\2\315\1\316\1\15\1\0\3\15\2\317"+
    "\2\320\4\15\1\0\1\321\1\15\1\0\2\322\1\15"+
    "\1\0\4\15\2\0\1\321\1\0\1\15\1\0\2\323"+
    "\2\324\2\325\2\326\1\15\1\0\1\15\1\0\1\327"+
    "\1\330\1\15\1\0\2\331\1\15\1\0\2\332\2\333"+
    "\1\334\1\335\1\336\1\337\3\15\1\0\1\15\1\0"+
    "\2\340\1\341\1\15\1\342\1\15\1\342\1\330\1\0"+
    "\2\343\1\15\1\0\1\15\1\0\2\344\2\345\1\346"+
    "\1\15\2\347\2\350\1\15\1\351\1\352\2\353\2\354"+
    "\1\355\1\356";

  private static int [] zzUnpackAction() {
    int [] result = new int[1206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\340\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\340\0\u0968\0\u09a0\0\160"+
    "\0\u09d8\0\340\0\340\0\340\0\u0a10\0\u0a48\0\u0a80\0\u01f8"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\340\0\340\0\u0b60\0\340\0\340"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u05b0\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u05b0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u05b0\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u05b0\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u05b0\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\340\0\u1ed8\0\340"+
    "\0\340\0\340\0\340\0\340\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u0ab8\0\u0af0\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u05b0\0\u23a8\0\u05b0\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u05b0\0\u24c0\0\u24f8\0\u05b0\0\u05b0\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u05b0\0\u05b0\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u05b0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48"+
    "\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u05b0\0\u3138\0\u3170\0\u31a8\0\u05b0\0\u31e0\0\340"+
    "\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0"+
    "\0\u33d8\0\u3410\0\u05b0\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u3560\0\u05b0\0\340\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678"+
    "\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u05b0\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80"+
    "\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40"+
    "\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00"+
    "\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u05b0\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u05b0\0\u05b0"+
    "\0\u05b0\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360"+
    "\0\340\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\u4558\0\u4590\0\u4590\0\u0a80\0\u45c8\0\u4600\0\u4638"+
    "\0\340\0\340\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788"+
    "\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948"+
    "\0\u4980\0\u49b8\0\u49f0\0\u05b0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0"+
    "\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90"+
    "\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u05b0\0\u4da8\0\u4de0\0\u4e18"+
    "\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u05b0\0\u05b0\0\340"+
    "\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u05b0\0\u5048\0\u5080\0\340"+
    "\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0\0\u5208\0\u05b0"+
    "\0\u5240\0\u05b0\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390"+
    "\0\u05b0\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u05b0\0\u54e0"+
    "\0\u5518\0\u5550\0\u5588\0\u05b0\0\u55c0\0\u55f8\0\u5630\0\u5668"+
    "\0\u56a0\0\u56d8\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828"+
    "\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8"+
    "\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8"+
    "\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68"+
    "\0\u05b0\0\u05b0\0\340\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u5e80"+
    "\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040"+
    "\0\u6078\0\u60b0\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200"+
    "\0\u6238\0\u6270\0\u05b0\0\u62a8\0\u62e0\0\u6318\0\u6350\0\u6388"+
    "\0\u63c0\0\u63f8\0\u6430\0\u6468\0\u64a0\0\u05b0\0\u05b0\0\u64d8"+
    "\0\u6510\0\u05b0\0\u6548\0\340\0\u6580\0\u65b8\0\u65f0\0\u6628"+
    "\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778\0\u67b0\0\u67e8"+
    "\0\u6820\0\u6858\0\u05b0\0\u6890\0\u68c8\0\u05b0\0\u6900\0\340"+
    "\0\u6938\0\340\0\340\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\340"+
    "\0\u6a50\0\u6a88\0\u6ac0\0\u6af8\0\u6b30\0\340\0\u6b68\0\u6ba0"+
    "\0\u6bd8\0\u6c10\0\u6c48\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60"+
    "\0\u6d98\0\u6dd0\0\u6e08\0\u6e40\0\u6e78\0\u6eb0\0\u6ee8\0\u05b0"+
    "\0\u6f20\0\u6f58\0\u6f90\0\u05b0\0\u6fc8\0\u7000\0\340\0\u7038"+
    "\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188\0\u71c0\0\u05b0"+
    "\0\u71f8\0\340\0\u05b0\0\340\0\u7230\0\u7268\0\u72a0\0\u72d8"+
    "\0\u7310\0\u7348\0\u7380\0\u73b8\0\u73f0\0\u7428\0\u7460\0\u7498"+
    "\0\u74d0\0\u7508\0\u7540\0\u7578\0\u75b0\0\u75e8\0\u7620\0\u7658"+
    "\0\u7690\0\u76c8\0\u7700\0\u7738\0\u7770\0\u77a8\0\u77e0\0\u05b0"+
    "\0\340\0\u7818\0\u7850\0\u7888\0\u78c0\0\u78f8\0\u05b0\0\u7930"+
    "\0\u05b0\0\u7968\0\u79a0\0\u79d8\0\u7a10\0\u05b0\0\u7a48\0\u7a80"+
    "\0\u05b0\0\u7ab8\0\u7af0\0\u7b28\0\u7b60\0\u05b0\0\u7b98\0\340"+
    "\0\u05b0\0\u7bd0\0\u05b0\0\u7c08\0\u7c40\0\u7c78\0\u7cb0\0\u7ce8"+
    "\0\u7d20\0\u7d58\0\u7d90\0\u7dc8\0\u7e00\0\u7e38\0\u7e70\0\u7ea8"+
    "\0\u7ee0\0\u7f18\0\u7f50\0\u7f88\0\u7fc0\0\u7ff8\0\u8030\0\u8068"+
    "\0\u80a0\0\u80d8\0\u8110\0\u8148\0\u8180\0\u05b0\0\340\0\u81b8"+
    "\0\u81f0\0\u8228\0\u8260\0\u8298\0\u82d0\0\u8308\0\u8340\0\u8378"+
    "\0\u83b0\0\u83e8\0\u05b0\0\340\0\u8420\0\u8458\0\u05b0\0\u8490"+
    "\0\u84c8\0\u8500\0\u8538\0\u8570\0\u85a8\0\u05b0\0\u85e0\0\u8618"+
    "\0\u8650\0\u8688\0\340\0\u86c0\0\u86f8\0\u8730\0\u8768\0\u87a0"+
    "\0\u87d8\0\u05b0\0\u8810\0\u8848\0\u05b0\0\u8880\0\340\0\u88b8"+
    "\0\u88f0\0\u8928\0\u8960\0\u8998\0\u89d0\0\u8a08\0\u05b0\0\u8a40"+
    "\0\u8a78\0\u05b0\0\u8ab0\0\u8ae8\0\u05b0\0\340\0\u05b0\0\u8b20"+
    "\0\u8b58\0\u05b0\0\340\0\u05b0\0\u8b90\0\u8bc8\0\u8c00\0\u8c38"+
    "\0\u05b0\0\340\0\u8c70\0\u8ca8\0\u8ce0\0\u05b0\0\u8d18\0\340"+
    "\0\u8d50\0\340\0\u8d88\0\340\0\u8dc0\0\u8df8\0\u8e30\0\u8e68"+
    "\0\u8ea0\0\340\0\u8ed8\0\u8f10\0\u8f48\0\u8f80\0\u8fb8\0\u8ff0"+
    "\0\u9028\0\u9060\0\u05b0\0\u9098\0\u90d0\0\u9108\0\u9140\0\u9178"+
    "\0\u91b0\0\u91e8\0\u05b0\0\u9220\0\u9258\0\u9290\0\u05b0\0\u05b0"+
    "\0\340\0\340\0\u92c8\0\u9300\0\u05b0\0\u05b0\0\u9338\0\u05b0"+
    "\0\u9370\0\340\0\u93a8\0\u93e0\0\u9418\0\u9450\0\u9488\0\u94c0"+
    "\0\u94f8\0\u05b0\0\340\0\u9530\0\u9568\0\u95a0\0\u95d8\0\u9610"+
    "\0\u05b0\0\u9648\0\340\0\u9680\0\u96b8\0\u05b0\0\340\0\u96f0"+
    "\0\u9728\0\u9760\0\u9798\0\u05b0\0\340\0\u97d0\0\u9808\0\u9840"+
    "\0\u9878\0\u05b0\0\u98b0\0\u98e8\0\u9920\0\u9958\0\u05b0\0\u9990"+
    "\0\340\0\u99c8\0\u9a00\0\u9a38\0\u05b0\0\u9a70\0\u05b0\0\u9aa8"+
    "\0\340\0\u9ae0\0\u9b18\0\u9b50\0\u9b88\0\u9bc0\0\u9bf8\0\u9c30"+
    "\0\u05b0\0\u9c68\0\u9ca0\0\u9cd8\0\u9d10\0\u9d48\0\u9d80\0\u05b0"+
    "\0\u9db8\0\u9df0\0\u9e28\0\u9e60\0\u9e98\0\u9ed0\0\u9f08\0\u9f40"+
    "\0\u9f78\0\u05b0\0\u9fb0\0\u9fe8\0\ua020\0\ua058\0\ua090\0\u05b0"+
    "\0\ua0c8\0\ua100\0\ua138\0\u05b0\0\340\0\ua170\0\ua1a8\0\u05b0"+
    "\0\u05b0\0\ua1e0\0\ua218\0\ua250\0\ua288\0\u05b0\0\ua2c0\0\ua2f8"+
    "\0\ua330\0\ua368\0\ua3a0\0\ua3d8\0\ua410\0\ua448\0\ua480\0\u05b0"+
    "\0\ua4b8\0\u05b0\0\ua4f0\0\u05b0\0\u05b0\0\340\0\ua528\0\u05b0"+
    "\0\ua560\0\340\0\u05b0\0\u05b0\0\340\0\ua598\0\ua5d0\0\ua608"+
    "\0\ua640\0\u05b0\0\340\0\u05b0\0\ua678\0\ua6b0\0\340\0\ua6e8"+
    "\0\ua720\0\ua758\0\ua790\0\u05b0\0\ua7c8\0\ua800\0\340\0\ua838"+
    "\0\ua870\0\340\0\ua8a8\0\ua8e0\0\340\0\340\0\ua918\0\340"+
    "\0\ua950\0\ua988\0\ua9c0\0\ua9f8\0\uaa30\0\u05b0\0\340\0\uaa68"+
    "\0\uaaa0\0\uaad8\0\uab10\0\uab48\0\uab80\0\uabb8\0\uabf0\0\u05b0"+
    "\0\u05b0\0\uac28\0\uac60\0\uac98\0\uacd0\0\uad08\0\uad40\0\u05b0"+
    "\0\uad78\0\uadb0\0\uade8\0\uae20\0\u05b0\0\uae58\0\uae90\0\uaec8"+
    "\0\uaf00\0\uaf38\0\uaf70\0\uafa8\0\u05b0\0\340\0\u05b0\0\u05b0"+
    "\0\u05b0\0\u05b0\0\340\0\uafe0\0\u05b0\0\u05b0\0\340\0\u05b0"+
    "\0\u05b0\0\ub018\0\ub050\0\340\0\340\0\u05b0\0\340\0\ub088"+
    "\0\ub0c0\0\ub0f8\0\ub130\0\ub168\0\ub1a0\0\ub1d8\0\ub210\0\ub248"+
    "\0\ub280\0\u05b0\0\u05b0\0\340\0\u05b0\0\340\0\ub2b8\0\ub2f0"+
    "\0\u05b0\0\u05b0\0\340\0\u05b0\0\ub328\0\ub360\0\ub398\0\340"+
    "\0\u05b0\0\340\0\u05b0\0\ub3d0\0\ub408\0\ub440\0\u05b0\0\340"+
    "\0\ub478\0\u05b0\0\340\0\ub4b0\0\ub4e8\0\ub520\0\u05b0\0\ub558"+
    "\0\ub590\0\ub5c8\0\ub600\0\ub638\0\ub670\0\u05b0\0\ub6a8\0\ub6e0"+
    "\0\ub718\0\ub750\0\u05b0\0\340\0\ub788\0\ub7c0\0\u05b0\0\340"+
    "\0\ub7f8\0\ub830\0\340\0\ub868\0\ub8a0\0\340\0\ub8d8\0\340"+
    "\0\u05b0\0\340\0\ub910\0\ub948\0\u05b0\0\ub980\0\ub9b8\0\ub9f0"+
    "\0\u05b0\0\340\0\uba28\0\uba60\0\uba98\0\ubad0\0\u05b0\0\u05b0"+
    "\0\340\0\340\0\u05b0\0\340\0\u05b0\0\u05b0\0\ubb08\0\ubb40"+
    "\0\u05b0\0\ubb78\0\ubbb0\0\ubbe8\0\u05b0\0\ubc20\0\ubc58\0\ubc90"+
    "\0\ubcc8\0\ubd00\0\ubd38\0\ubd70\0\ubda8\0\ubde0\0\u05b0\0\u05b0"+
    "\0\u05b0\0\340\0\u05b0\0\ube18\0\ube50\0\ube88\0\ubec0\0\ubef8"+
    "\0\u05b0\0\340\0\u05b0\0\340\0\ubf30\0\ubf68\0\ubfa0\0\ubfd8"+
    "\0\uc010\0\u05b0\0\uc048\0\uc080\0\u05b0\0\340\0\uc0b8\0\uc0f0"+
    "\0\uc128\0\uc160\0\uc198\0\uc1d0\0\uc208\0\uc240\0\340\0\uc278"+
    "\0\uc2b0\0\uc2e8\0\u05b0\0\340\0\u05b0\0\340\0\u05b0\0\340"+
    "\0\u05b0\0\340\0\uc320\0\uc358\0\uc390\0\uc3c8\0\u05b0\0\u05b0"+
    "\0\uc400\0\uc438\0\u05b0\0\340\0\uc470\0\uc4a8\0\u05b0\0\340"+
    "\0\u05b0\0\340\0\u05b0\0\u05b0\0\u05b0\0\u05b0\0\uc4e0\0\uc518"+
    "\0\uc550\0\uc588\0\uc5c0\0\uc5f8\0\u05b0\0\340\0\u05b0\0\uc630"+
    "\0\u05b0\0\uc668\0\340\0\340\0\uc6a0\0\u05b0\0\340\0\uc6d8"+
    "\0\uc710\0\uc748\0\uc780\0\u05b0\0\340\0\u05b0\0\340\0\u05b0"+
    "\0\uc7b8\0\u05b0\0\340\0\u05b0\0\340\0\uc7f0\0\u05b0\0\340"+
    "\0\u05b0\0\340\0\u05b0\0\340\0\u05b0\0\u05b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\2\34\1\52\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\2\0\2\2\65\0\2\3\1\0\1\3"+
    "\1\60\53\3\1\0\7\3\3\0\1\61\163\0\1\62"+
    "\60\0\10\7\1\63\57\7\11\0\1\64\71\0\1\65"+
    "\72\0\4\66\57\0\1\67\72\0\1\70\1\0\4\16"+
    "\5\0\1\71\25\0\1\72\26\0\1\70\1\0\4\16"+
    "\70\0\1\73\72\0\1\74\65\0\1\75\1\76\66\0"+
    "\1\77\1\100\57\0\1\34\1\0\4\34\4\0\1\34"+
    "\1\101\1\34\1\102\7\34\1\103\1\34\1\104\1\34"+
    "\1\105\1\34\1\106\1\34\1\107\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\2\34\1\110\1\34\4\0\10\34"+
    "\1\111\17\34\1\112\1\34\2\0\1\34\2\0\1\113"+
    "\16\0\1\34\1\0\2\34\1\114\1\34\4\0\1\115"+
    "\3\34\1\116\2\34\1\117\3\34\1\120\2\34\1\121"+
    "\13\34\2\0\1\34\21\0\1\34\1\0\2\34\1\122"+
    "\1\34\4\0\1\123\3\34\1\124\3\34\1\125\5\34"+
    "\1\126\2\34\1\127\10\34\2\0\1\34\2\0\1\130"+
    "\16\0\1\34\1\0\4\34\4\0\13\34\1\131\1\34"+
    "\1\132\3\34\1\133\5\34\1\134\2\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\135\15\34\1\136"+
    "\5\34\1\137\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\140\17\34\1\141\5\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\142\31\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\5\34"+
    "\1\143\7\34\1\144\5\34\1\145\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\32\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\146\3\34\1\147"+
    "\3\34\1\150\5\34\1\151\13\34\2\0\1\34\2\0"+
    "\1\152\16\0\1\34\1\0\4\34\4\0\1\153\3\34"+
    "\1\154\3\34\1\155\21\34\2\0\1\34\2\0\1\156"+
    "\16\0\1\34\1\0\4\34\4\0\1\157\15\34\1\160"+
    "\5\34\1\161\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\5\34\1\162\7\34\1\163\1\34\1\164"+
    "\3\34\1\165\1\166\1\167\4\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\1\170\15\34\1\171\2\34"+
    "\1\172\2\34\1\173\5\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\24\34\1\174\5\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\175\3\34\1\176"+
    "\3\34\1\177\5\34\1\200\10\34\1\201\2\34\2\0"+
    "\1\34\2\0\1\202\16\0\1\34\1\0\4\34\4\0"+
    "\1\203\1\34\1\204\1\34\1\205\3\34\1\206\5\34"+
    "\1\207\1\210\3\34\1\211\1\212\3\34\1\213\1\34"+
    "\2\0\1\34\2\0\1\214\16\0\1\34\1\0\4\34"+
    "\4\0\7\34\1\215\1\216\5\34\1\217\2\34\1\220"+
    "\10\34\2\0\1\34\2\0\1\221\16\0\1\34\1\0"+
    "\4\34\4\0\15\34\1\222\1\34\1\223\2\34\1\224"+
    "\7\34\2\0\1\34\3\0\1\225\15\0\1\34\1\0"+
    "\4\34\4\0\1\226\3\34\1\227\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\7\34\1\230\1\231"+
    "\5\34\1\232\13\34\2\0\1\34\2\0\1\233\16\0"+
    "\1\34\1\0\2\34\1\234\1\34\4\0\21\34\1\235"+
    "\10\34\2\0\1\34\30\0\1\236\1\237\1\240\32\0"+
    "\1\241\70\0\1\242\71\0\1\243\37\0\1\244\7\0"+
    "\1\245\5\0\1\246\44\0\1\247\1\0\1\250\1\0"+
    "\1\251\3\0\1\214\5\0\1\252\1\253\3\0\1\254"+
    "\1\255\3\0\1\256\6\0\1\214\2\0\2\61\1\0"+
    "\65\61\2\65\1\0\65\65\16\0\4\66\10\0\1\257"+
    "\35\0\11\67\1\260\56\67\16\0\2\261\66\0\4\262"+
    "\4\0\6\262\62\0\1\263\1\0\1\264\11\0\1\265"+
    "\50\0\1\266\1\0\1\267\56\0\1\34\1\0\4\34"+
    "\4\0\1\34\1\270\20\34\1\271\7\34\2\0\1\34"+
    "\3\0\1\272\15\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\273\26\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\274\16\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\275\12\34\1\276\1\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\17\34"+
    "\1\277\12\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\6\34\1\300\12\34\1\301\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\302\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\27\34"+
    "\1\303\2\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\304\6\34\2\0\1\34\56\0\1\305"+
    "\32\0\1\34\1\0\4\34\4\0\3\34\1\306\23\34"+
    "\1\307\2\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\310\6\34\1\311\7\34\2\0\1\34"+
    "\3\0\1\312\15\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\313\14\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\314\31\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\1\315\31\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\14\34\1\316\1\317\1\34\1\320"+
    "\4\34\1\321\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\322\24\34\1\323\2\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\23\34\1\324"+
    "\6\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\325\6\34\1\326\7\34\2\0\1\34\3\0"+
    "\1\327\15\0\1\34\1\0\4\34\4\0\6\34\1\330"+
    "\23\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\16\34\1\331\13\34\2\0\1\34\41\0\1\332\47\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\333\7\34\2\0"+
    "\1\34\3\0\1\334\15\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\335\2\34\1\336\23\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\21\34\1\337\10\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\10\34\1\340"+
    "\6\34\1\341\3\34\1\342\6\34\2\0\1\34\2\0"+
    "\1\343\16\0\1\34\1\0\4\34\4\0\10\34\1\344"+
    "\2\34\1\345\16\34\2\0\1\34\2\0\1\346\16\0"+
    "\1\34\1\0\4\34\4\0\21\34\1\347\10\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\31\34\1\350"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\351\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\352\31\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\13\34\1\353\16\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\3\34\1\354\3\34\1\355"+
    "\7\34\1\356\2\34\1\357\1\360\6\34\2\0\1\34"+
    "\3\0\1\361\15\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\362\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\34\1\363\20\34\1\364\7\34\2\0\1\34"+
    "\3\0\1\365\15\0\1\34\1\0\4\34\4\0\1\366"+
    "\4\34\1\367\7\34\1\370\14\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\1\34\1\371\13\34\1\372"+
    "\14\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\373\13\34\1\374\3\34\1\375\3\34\1\376"+
    "\3\34\2\0\1\34\3\0\1\377\30\0\1\u0100\13\0"+
    "\1\u0101\40\0\1\34\1\0\4\34\4\0\27\34\1\u0102"+
    "\2\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\u0103\1\u0104\6\34\2\0\1\34\3\0\1\u0105"+
    "\15\0\1\34\1\0\4\34\4\0\15\34\1\u0106\11\34"+
    "\1\u0107\2\34\2\0\1\34\50\0\1\u0108\11\0\1\u0109"+
    "\26\0\1\34\1\0\4\34\4\0\14\34\1\u010a\15\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u010b\2\34\1\u010c\1\34\1\u010d\1\u010e\1\u010f\1\34"+
    "\1\u0110\4\34\2\0\1\34\3\0\1\u0111\15\0\1\34"+
    "\1\0\4\34\4\0\14\34\1\u0112\15\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\5\34\1\u0113\24\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u0114\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\7\34\1\u0115\22\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u0116\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u0117\25\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u0118\16\34\1\u0119\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u011a\7\34\2\0\1\34"+
    "\3\0\1\u011b\15\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u011c\5\34\1\u011d\13\34\2\0\1\34\2\0\1\u011e"+
    "\16\0\1\34\1\0\4\34\4\0\1\34\1\u011f\11\34"+
    "\1\u0120\6\34\1\u0121\7\34\2\0\1\34\3\0\1\u0122"+
    "\15\0\1\34\1\0\4\34\4\0\1\u0123\3\34\1\u0124"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u0125\4\34\1\u0126\14\34\2\0\1\34\2\0"+
    "\1\u0127\16\0\1\34\1\0\4\34\4\0\17\34\1\u0128"+
    "\1\u0129\1\34\1\u012a\1\u012b\1\34\1\u012c\4\34\2\0"+
    "\1\34\3\0\1\u012d\15\0\1\34\1\0\4\34\4\0"+
    "\6\34\1\u012e\23\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\24\34\1\u012f\5\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\5\34\1\u0130\12\34\1\u0131"+
    "\11\34\2\0\1\34\41\0\1\u0132\47\0\1\34\1\0"+
    "\4\34\4\0\30\34\1\u0133\1\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\10\34\1\u0134\21\34\2\0"+
    "\1\34\2\0\1\u0135\16\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\u0136\7\34\1\u0137\6\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\6\34\1\u0138\23\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\24\34\1\u0139"+
    "\5\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\1\u013a\31\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u013b\14\34\1\u013c\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\34\1\u013d\30\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\14\34"+
    "\1\u013e\1\u013f\14\34\2\0\1\34\41\0\1\u0140\47\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0141\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\14\34\1\u0142"+
    "\15\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\1\u0143\23\34\1\u0144\5\34\2\0\1\34\47\0\1\u0145"+
    "\41\0\1\34\1\0\4\34\4\0\6\34\1\u0146\10\34"+
    "\1\u0147\3\34\1\u0148\6\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\17\34\1\u0149\12\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u014a\3\34"+
    "\1\u014b\21\34\2\0\1\34\2\0\1\u014c\34\0\1\u014d"+
    "\3\0\1\u014c\26\0\1\u014c\16\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\u014e\5\34\1\u014f\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\21\34\1\u0150\10\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u0151\3\34\1\u0152\21\34\2\0\1\34\2\0\1\u0153"+
    "\16\0\1\34\1\0\4\34\4\0\23\34\1\u0154\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0155\10\34\2\0\1\34\56\0\1\u0156\32\0\1\34"+
    "\1\0\4\34\4\0\1\34\1\u0157\1\u0158\1\u0159\26\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\1\u015a"+
    "\31\34\2\0\1\34\31\0\1\u015b\74\0\1\u015c\3\0"+
    "\1\u015d\7\0\1\u015e\2\0\1\361\1\u015f\14\0\1\361"+
    "\33\0\1\u0160\113\0\1\u0161\47\0\1\u0135\26\0\1\u0135"+
    "\43\0\1\u0162\7\0\1\u0163\70\0\1\u0164\43\0\1\u0165"+
    "\73\0\1\u0166\14\0\1\u0167\47\0\1\u0168\102\0\1\u0169"+
    "\1\u016a\36\0\2\u016b\2\0\4\u016c\57\0\1\260\3\0"+
    "\1\u016d\123\0\1\u016e\57\0\1\u016f\60\0\1\u0170\61\0"+
    "\1\u0171\67\0\1\u0172\57\0\1\34\1\0\4\34\4\0"+
    "\21\34\1\u0173\10\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u0174\6\34\2\0\1\34\56\0"+
    "\1\u0175\32\0\1\34\1\0\4\34\4\0\10\34\1\u0176"+
    "\10\34\1\u0177\10\34\2\0\1\34\2\0\1\u0178\16\0"+
    "\1\34\1\0\4\34\4\0\16\34\1\u0179\13\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u017a"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\24\34\1\u017b\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\1\u017c\31\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u017d\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\u017e\15\34\1\u017f"+
    "\10\34\1\u0180\2\34\2\0\1\34\33\0\1\u0181\15\0"+
    "\1\u0182\10\0\1\u0183\26\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\u0184\16\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0185\25\34\2\0\1\34\37\0"+
    "\1\u0186\51\0\1\34\1\0\4\34\4\0\23\34\1\u0187"+
    "\6\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\15\34\1\u0188\3\34\1\u0189\10\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\u018a\7\34\2\0"+
    "\1\34\3\0\1\u018b\15\0\1\34\1\0\4\34\4\0"+
    "\17\34\1\u018c\12\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\3\34\1\u018d\16\34\1\u018e\1\u018f\6\34"+
    "\2\0\1\34\3\0\1\u0190\15\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u0191\21\34\2\0\1\34\2\0\1\u0192"+
    "\16\0\1\34\1\0\4\34\4\0\15\34\1\u0193\14\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\1\u0194"+
    "\3\34\1\u0195\25\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0196\15\34\1\u0197\3\34\1\u0198"+
    "\3\34\2\0\1\34\3\0\1\u0199\15\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u019a\27\34\2\0\1\34\35\0"+
    "\1\u019b\53\0\1\34\1\0\4\34\4\0\10\34\1\u019c"+
    "\21\34\2\0\1\34\2\0\1\u019d\16\0\1\34\1\0"+
    "\4\34\4\0\17\34\1\u019e\12\34\2\0\1\34\43\0"+
    "\1\u019d\26\0\1\u019d\16\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u019f\25\34\2\0\1\34\37\0\1\u01a0\51\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\u01a1\16\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\10\34\1\u01a2"+
    "\21\34\2\0\1\34\2\0\1\u01a3\16\0\1\34\1\0"+
    "\4\34\4\0\16\34\1\u01a4\13\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u01a5\6\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\16\34\1\u01a6"+
    "\13\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u01a7\25\34\2\0\1\34\56\0\1\u01a8\32\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\u01a9\16\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\22\34\1\u01aa"+
    "\7\34\2\0\1\34\3\0\1\u01ab\42\0\1\u01ac\42\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01ad\7\34\1\u01ae"+
    "\11\34\1\u01af\3\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\31\34\1\u01b0\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u01b1\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u01b2\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01b3\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u01b4\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\24\34\1\u01b5\5\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u01b6\25\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01b7\25\34\2\0\1\34\37\0\1\u01b8\51\0\1\34"+
    "\1\0\4\34\4\0\14\34\1\u01b9\4\34\1\u01ba\10\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01bb\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u01bc\6\34\2\0\1\34\56\0\1\u01bd"+
    "\32\0\1\34\1\0\4\34\4\0\25\34\1\u01be\4\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u01bf\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\6\34\1\u01c0\23\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u01c1\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u01c2\25\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\1\u01c3"+
    "\31\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\17\34\1\u01c4\12\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u01c5\6\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01c6\25\34\2\0"+
    "\1\34\56\0\1\u01c7\65\0\1\u01c8\52\0\1\u01c9\51\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\u01ca\7\34\2\0"+
    "\1\34\3\0\1\u01cb\15\0\1\34\1\0\4\34\4\0"+
    "\1\u01cc\6\34\1\u01cd\22\34\2\0\1\34\55\0\1\u01cb"+
    "\15\0\1\u01cb\15\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u01ce\21\34\2\0\1\34\2\0\1\u01cf\40\0\1\u01cf"+
    "\26\0\1\u01cf\16\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u01d0\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u01d1\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u01d2\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\14\34\1\u01d3\15\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u01d4\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u01d5\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\1\u01d6\31\34\2\0\1\34\56\0"+
    "\1\u01d7\32\0\1\34\1\0\4\34\4\0\4\34\1\u01d8"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u01d9\21\34\2\0\1\34\2\0\1\u01da\16\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01db\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\17\34\1\u01dc"+
    "\12\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\21\34\1\u01dd\10\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\12\34\1\u01de\17\34\2\0\1\34\4\0"+
    "\1\u01df\14\0\1\34\1\0\4\34\4\0\22\34\1\u01e0"+
    "\7\34\2\0\1\34\3\0\1\u01e1\15\0\1\34\1\0"+
    "\4\34\4\0\25\34\1\u01e2\4\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\u01e3\10\34\1\u01e4"+
    "\3\34\1\u01e5\3\34\1\u01e6\6\34\2\0\1\34\60\0"+
    "\1\u01e7\30\0\1\34\1\0\4\34\4\0\13\34\1\u01e8"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\u01e9\16\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\7\34\1\u01ea\22\34\2\0\1\34\42\0"+
    "\1\u01eb\46\0\1\34\1\0\4\34\4\0\13\34\1\u01ec"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\24\34\1\u01ed\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\22\34\1\u01ee\7\34\2\0\1\34\3\0"+
    "\1\u01ef\15\0\1\34\1\0\4\34\4\0\3\34\1\u01f0"+
    "\26\34\2\0\1\34\55\0\1\u01ef\15\0\1\u01ef\15\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\u01f1\16\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\24\34\1\u01f2"+
    "\5\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\16\34\1\u01f3\13\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\24\34\1\u01f4\5\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u01f5\25\34\2\0"+
    "\1\34\51\0\1\u01f6\37\0\1\34\1\0\4\34\4\0"+
    "\7\34\1\u01f7\22\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u01f8\6\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\24\34\1\u01f9\5\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\24\34\1\u01fa"+
    "\5\34\2\0\1\34\42\0\1\u01fb\46\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u01fc\25\34\2\0\1\34\37\0"+
    "\1\u01fd\51\0\1\34\1\0\4\34\4\0\4\34\1\u01fe"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\13\34\1\u01ff\16\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\15\34\1\u0200\14\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\21\34\1\u0201\10\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\2\34\1\u0202"+
    "\27\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\14\34\1\u0203\15\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0204\3\34\1\u0205\21\34\2\0"+
    "\1\34\2\0\1\u0206\16\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\u0207\17\34\1\u0208\3\34\1\u0209\3\34\2\0"+
    "\1\34\3\0\1\u020a\15\0\1\34\1\0\4\34\4\0"+
    "\1\34\1\u020b\30\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u020c\6\34\2\0\1\34\50\0"+
    "\1\u020d\40\0\1\34\1\0\4\34\4\0\15\34\1\u020e"+
    "\14\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u020f\25\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u0210\12\34\1\u0211\14\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u0212"+
    "\10\34\1\u0213\14\34\2\0\1\34\37\0\1\u0214\51\0"+
    "\1\34\1\0\4\34\4\0\24\34\1\u0215\5\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u0216"+
    "\10\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u0217\21\34\2\0\1\34\2\0\1\u0218\16\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0219\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u021a"+
    "\10\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\15\34\1\u021b\14\34\2\0\1\34\50\0\1\u021c\73\0"+
    "\1\u021d\34\0\1\34\1\0\4\34\4\0\24\34\1\u021e"+
    "\5\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u021f\11\34\1\u0220\7\34\2\0\1\34\2\0"+
    "\1\u0221\1\u0222\15\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u0223\14\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\u0224\16\34\2\0\1\34\46\0\1\u0225"+
    "\42\0\1\34\1\0\4\34\4\0\7\34\1\u0226\22\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\u0227\26\34\2\0\1\34\42\0\1\u0228\46\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u0229\14\34\2\0\1\34"+
    "\30\0\1\u022a\1\0\1\u022b\74\0\1\u022c\67\0\1\u022d"+
    "\107\0\1\u022e\47\0\1\u022f\77\0\1\u0230\4\0\1\u0231"+
    "\52\0\1\u0232\76\0\1\u0233\75\0\1\u0234\50\0\1\u0235"+
    "\101\0\1\u0236\57\0\1\u0237\3\0\1\u0206\26\0\1\u0206"+
    "\32\0\1\u0238\17\0\1\u020a\3\0\1\u0239\11\0\1\u020a"+
    "\30\0\1\u023a\111\0\1\u023b\34\0\4\u016c\117\0\1\u023c"+
    "\44\0\1\u023d\112\0\1\u023e\32\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u023f\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0240\10\34\2\0\1\34"+
    "\54\0\1\u0241\34\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u0242\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0243\25\34\2\0\1\34\56\0\1\u0244"+
    "\32\0\1\34\1\0\4\34\4\0\23\34\1\u0245\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u0246\14\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\14\34\1\u0247\15\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\30\34\1\u0248\1\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\10\34\1\u0249\21\34"+
    "\2\0\1\34\2\0\1\u024a\16\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u024b\14\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u024c\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\16\34\1\u024d\13\34"+
    "\2\0\1\34\50\0\1\u024e\73\0\1\u024f\64\0\1\u0250"+
    "\37\0\1\34\1\0\4\34\4\0\13\34\1\u0251\16\34"+
    "\2\0\1\34\46\0\1\u0252\42\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0253\14\34\1\u0254\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\6\34\1\u0255\23\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u0256\5\34\1\u0257\3\34\1\u0258\7\34\2\0\1\34"+
    "\2\0\1\u0259\1\u025a\15\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\u025b\7\34\2\0\1\34\3\0\1\u025c\51\0"+
    "\1\u025c\15\0\1\u025c\15\0\1\34\1\0\4\34\4\0"+
    "\1\u025d\31\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u025e\21\34\2\0\1\34\2\0\1\u025f"+
    "\16\0\1\34\1\0\4\34\4\0\23\34\1\u0260\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u0261\21\34\2\0\1\34\2\0\1\u0262\53\0\1\u0263"+
    "\32\0\1\34\1\0\4\34\4\0\4\34\1\u0264\25\34"+
    "\2\0\1\34\37\0\1\u0265\51\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u0266\6\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u0267\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\6\34\1\u0268\23\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u0269\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\16\34\1\u026a\13\34\2\0\1\34\56\0\1\u026b"+
    "\32\0\1\34\1\0\4\34\4\0\21\34\1\u026c\10\34"+
    "\2\0\1\34\54\0\1\u026d\34\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u026e\6\34\2\0\1\34\56\0\1\u026f"+
    "\32\0\1\34\1\0\4\34\4\0\16\34\1\u0270\13\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u0271\14\34\2\0\1\34\50\0\1\u0272\40\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0273\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\22\34\1\u0274\7\34"+
    "\2\0\1\34\3\0\1\u0275\15\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0276\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\24\34\1\u0277\5\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u0278\25\34"+
    "\2\0\1\34\37\0\1\u0279\107\0\1\u027a\31\0\1\34"+
    "\1\0\4\34\4\0\25\34\1\u027b\4\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\u027c\31\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\u027d\31\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\3\34"+
    "\1\u027e\26\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\27\34\1\u027f\2\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0280\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u0281\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0282\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0283\10\34\2\0\1\34\54\0\1\u0284"+
    "\34\0\1\34\1\0\4\34\4\0\1\u0285\31\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\13\34\1\u0286"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\17\34\1\u0287\12\34\2\0\1\34\52\0\1\u0288\36\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0289\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\23\34\1\u028a"+
    "\6\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\1\u028b\31\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u028c\5\34\1\u028d\3\34\1\u028e\7\34"+
    "\2\0\1\34\2\0\1\u028f\1\u0290\15\0\1\34\1\0"+
    "\4\34\4\0\13\34\1\u0291\16\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\3\34\1\u0292\26\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u0293"+
    "\10\34\2\0\1\34\36\0\1\u0294\64\0\1\u0295\77\0"+
    "\1\u028f\5\0\1\u0296\3\0\1\u0290\14\0\1\u028f\1\u0290"+
    "\15\0\1\34\1\0\4\34\4\0\1\u0297\31\34\2\0"+
    "\1\34\33\0\1\u0298\55\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\u0299\27\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\16\34\1\u029a\13\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\15\34\1\u029b\14\34\2\0"+
    "\1\34\50\0\1\u029c\40\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\u029d\7\34\2\0\1\34\3\0\1\u029e\15\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u029f\6\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\16\34\1\u02a0"+
    "\13\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\1\u02a1\31\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u02a2\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u02a3\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\13\34\1\u02a4\16\34"+
    "\2\0\1\34\54\0\1\u02a5\34\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u02a6\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u02a7\13\34\2\0\1\34"+
    "\51\0\1\u02a8\37\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u02a9\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\24\34\1\u02aa\5\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\13\34\1\u02ab\16\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\1\u02ac\31\34\2\0"+
    "\1\34\33\0\1\u02ad\55\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u02ae\25\34\2\0\1\34\37\0\1\u02af\51\0"+
    "\1\34\1\0\4\34\4\0\1\u02b0\31\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u02b1\25\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u02b2\13\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\u02b3\31\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u02b4\25\34\2\0\1\34\33\0"+
    "\1\u02b5\55\0\1\34\1\0\4\34\4\0\10\34\1\u02b6"+
    "\21\34\2\0\1\34\2\0\1\u02b7\16\0\1\34\1\0"+
    "\4\34\4\0\10\34\1\u02b8\21\34\2\0\1\34\2\0"+
    "\1\u02b9\16\0\1\34\1\0\4\34\4\0\4\34\1\u02ba"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u02bb\25\34\2\0\1\34\37\0\1\u02bc\51\0"+
    "\1\34\1\0\4\34\4\0\16\34\1\u02bd\13\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\u02be\27\34"+
    "\1\u02bf\1\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u02c0\21\34\2\0\1\34\2\0\1\u02c1"+
    "\16\0\1\34\1\0\4\34\4\0\24\34\1\u02c2\5\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u02c3\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u02c4\10\34\2\0\1\34\57\0\1\u02c5"+
    "\31\0\1\34\1\0\4\34\4\0\23\34\1\u02c6\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u02c7\21\34\2\0\1\34\2\0\1\u02c8\16\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u02c9\14\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\4\34\1\u02ca\25\34"+
    "\2\0\1\34\56\0\1\u02cb\32\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u02cc\14\34\2\0\1\34\50\0\1\u02cd"+
    "\40\0\1\34\1\0\4\34\4\0\2\34\1\u02ce\27\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u02cf\13\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\u02d0\31\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u02d1\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u02d2\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\u02d3\31\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\2\34"+
    "\1\u02d4\14\34\1\u02d5\12\34\2\0\1\34\35\0\1\u02d6"+
    "\14\0\1\u02d7\36\0\1\34\1\0\4\34\4\0\13\34"+
    "\1\u02d8\16\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u02d9\6\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u02da\13\34\2\0\1\34"+
    "\56\0\1\u02db\32\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u02dc\13\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\1\u02dd\31\34\2\0\1\34\33\0\1\u02de\55\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u02df\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\22\34\1\u02e0"+
    "\7\34\2\0\1\34\3\0\1\u02e1\15\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u02e2\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\1\u02e3\31\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\16\34\1\u02e4\13\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\13\34"+
    "\1\u02e5\16\34\2\0\1\34\46\0\1\u02e6\42\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u02e7\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\10\34\1\u02e8\21\34"+
    "\2\0\1\34\2\0\1\u02e9\16\0\1\34\1\0\4\34"+
    "\4\0\6\34\1\u02ea\23\34\2\0\1\34\41\0\1\u02eb"+
    "\71\0\1\u02e9\26\0\1\u02e9\16\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u02ec\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\5\34\1\u02ed\24\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\10\34\1\u02ee\21\34"+
    "\2\0\1\34\2\0\1\u02ef\35\0\1\u02f0\72\0\1\u02ef"+
    "\26\0\1\u02ef\16\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u02f1\25\34\2\0\1\34\37\0\1\u02f2\51\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u02f3\2\34\1\u02f4\3\34"+
    "\1\u02f5\2\34\1\u02f6\7\34\2\0\1\34\2\0\1\u02f7"+
    "\1\u02f8\15\0\1\34\1\0\4\34\4\0\6\34\1\u02f9"+
    "\23\34\2\0\1\34\62\0\1\u02fa\61\0\1\u02fb\71\0"+
    "\1\u02fc\65\0\1\u02fd\46\0\1\u02fe\71\0\1\u02ff\103\0"+
    "\1\u0300\53\0\1\u0301\71\0\1\u0302\63\0\1\u0303\102\0"+
    "\1\u0304\72\0\1\u0305\67\0\1\u0306\51\0\1\u0307\110\0"+
    "\1\u0308\70\0\1\u0309\15\0\1\u0309\36\0\1\u030a\46\0"+
    "\1\34\1\0\4\34\4\0\25\34\1\u030b\4\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\u030c\31\34"+
    "\2\0\1\34\33\0\1\u030d\55\0\1\34\1\0\4\34"+
    "\4\0\10\34\1\u030e\21\34\2\0\1\34\2\0\1\u030f"+
    "\16\0\1\34\1\0\4\34\4\0\22\34\1\u0310\7\34"+
    "\2\0\1\34\3\0\1\u0311\37\0\1\u030f\26\0\1\u030f"+
    "\16\0\1\34\1\0\4\34\4\0\1\u0312\31\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\3\34\1\u0313"+
    "\26\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u0314\25\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\1\34\1\u0315\30\34\2\0\1\34\34\0"+
    "\1\u0316\54\0\1\34\1\0\4\34\4\0\3\34\1\u0317"+
    "\26\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\21\34\1\u0318\10\34\2\0\1\34\36\0\1\u0319\105\0"+
    "\1\u031a\34\0\1\34\1\0\4\34\4\0\4\34\1\u031b"+
    "\25\34\2\0\1\34\37\0\1\u031c\51\0\1\34\1\0"+
    "\4\34\4\0\21\34\1\u031d\10\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u031e\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u031f"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\15\34\1\u0320\14\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\24\34\1\u0321\5\34\2\0\1\34\50\0"+
    "\1\u0322\40\0\1\34\1\0\4\34\4\0\21\34\1\u0323"+
    "\10\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\u0324\6\34\2\0\1\34\56\0\1\u0325\32\0"+
    "\1\34\1\0\4\34\4\0\1\u0326\31\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\15\34\1\u0327\14\34"+
    "\2\0\1\34\50\0\1\u0328\52\0\1\u0329\55\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u032a\7\34\2\0\1\34"+
    "\3\0\1\u032b\51\0\1\u032b\15\0\1\u032b\15\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u032c\15\34\1\u032d\7\34"+
    "\2\0\1\34\3\0\1\u032e\15\0\1\34\1\0\4\34"+
    "\4\0\30\34\1\u032f\1\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\1\u0330\31\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\21\34\1\u0331\10\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u0332"+
    "\10\34\2\0\1\34\54\0\1\u0333\34\0\1\34\1\0"+
    "\4\34\4\0\10\34\1\u0334\21\34\2\0\1\34\2\0"+
    "\1\u0335\40\0\1\u0335\26\0\1\u0335\16\0\1\34\1\0"+
    "\4\34\4\0\22\34\1\u0336\7\34\2\0\1\34\3\0"+
    "\1\u0337\51\0\1\u0337\15\0\1\u0337\15\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u0338\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0339\25\34\2\0"+
    "\1\34\37\0\1\u033a\51\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\u033b\6\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u033c\25\34\2\0\1\34\37\0"+
    "\1\u033d\51\0\1\34\1\0\4\34\4\0\15\34\1\u033e"+
    "\14\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\21\34\1\u033f\10\34\2\0\1\34\54\0\1\u0340\34\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0341\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\23\34\1\u0342"+
    "\6\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\21\34\1\u0343\10\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u0344\25\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\10\34\1\u0345\21\34\2\0"+
    "\1\34\2\0\1\u0346\16\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\u0347\6\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\17\34\1\u0348\12\34\2\0\1\34\56\0"+
    "\1\u0349\32\0\1\34\1\0\4\34\4\0\23\34\1\u034a"+
    "\6\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\16\34\1\u034b\13\34\2\0\1\34\51\0\1\u034c\37\0"+
    "\1\34\1\0\4\34\4\0\7\34\1\u034d\22\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u034e"+
    "\10\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\15\34\1\u034f\14\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\24\34\1\u0350\5\34\2\0\1\34\50\0"+
    "\1\u0351\40\0\1\34\1\0\4\34\4\0\10\34\1\u0352"+
    "\21\34\2\0\1\34\2\0\1\u0353\40\0\1\u0353\26\0"+
    "\1\u0353\51\0\1\u0354\72\0\1\u0355\31\0\1\34\1\0"+
    "\4\34\4\0\6\34\1\u0356\23\34\2\0\1\34\41\0"+
    "\1\u0357\47\0\1\34\1\0\4\34\4\0\13\34\1\u0358"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\u0359\26\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u035a\27\34\2\0\1\34\35\0"+
    "\1\u035b\53\0\1\34\1\0\4\34\4\0\17\34\1\u035c"+
    "\12\34\2\0\1\34\52\0\1\u035d\36\0\1\34\1\0"+
    "\4\34\4\0\7\34\1\u035e\22\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\u035f\16\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\13\34\1\u0360"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u0361\21\34\2\0\1\34\2\0\1\u0362\16\0"+
    "\1\34\1\0\4\34\4\0\1\u0363\31\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\24\34\1\u0364\5\34"+
    "\2\0\1\34\43\0\1\u0362\26\0\1\u0362\16\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u0365\21\34\2\0\1\34"+
    "\2\0\1\u0366\16\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u0367\14\34\2\0\1\34\50\0\1\u0368\40\0\1\34"+
    "\1\0\4\34\4\0\26\34\1\u0369\3\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u036a\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\1\u036b"+
    "\31\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\6\34\1\u036c\23\34\2\0\1\34\41\0\1\u036d\47\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u036e\6\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\3\34\1\u036f"+
    "\26\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\6\34\1\u0370\23\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\6\34\1\u0371\23\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\u0372\27\34\2\0"+
    "\1\34\56\0\1\u0373\32\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\u0374\27\34\2\0\1\34\35\0\1\u0375\53\0"+
    "\1\34\1\0\4\34\4\0\5\34\1\u0376\24\34\2\0"+
    "\1\34\40\0\1\u0377\50\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\u0378\26\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\14\34\1\u0379\15\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\u037a\27\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u037b"+
    "\10\34\2\0\1\34\54\0\1\u037c\34\0\1\34\1\0"+
    "\4\34\4\0\21\34\1\u037d\10\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\15\34\1\u037e\14\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\22\34\1\u037f"+
    "\7\34\2\0\1\34\3\0\1\u0380\50\0\1\u0381\34\0"+
    "\1\34\1\0\4\34\4\0\15\34\1\u0382\14\34\2\0"+
    "\1\34\50\0\1\u0383\40\0\1\34\1\0\4\34\4\0"+
    "\2\34\1\u0384\27\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\24\34\1\u0385\5\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u0386\6\34\2\0"+
    "\1\34\56\0\1\u0387\32\0\1\34\1\0\4\34\4\0"+
    "\23\34\1\u0388\6\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u0389\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\13\34\1\u038a\16\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u038b"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\14\34\1\u038c\15\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\23\34\1\u038d\6\34\2\0\1\34\56\0"+
    "\1\u038e\32\0\1\34\1\0\4\34\4\0\1\u038f\31\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0390\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u0391\10\34\2\0\1\34\54\0\1\u0392"+
    "\34\0\1\34\1\0\4\34\4\0\13\34\1\u0393\16\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\27\34"+
    "\1\u0394\2\34\2\0\1\34\46\0\1\u0395\42\0\1\34"+
    "\1\0\4\34\4\0\13\34\1\u0396\16\34\2\0\1\34"+
    "\46\0\1\u0397\42\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0398\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u0399\6\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\3\34\1\u039a\26\34\2\0\1\34"+
    "\36\0\1\u039b\52\0\1\34\1\0\4\34\4\0\30\34"+
    "\1\u039c\1\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\16\34\1\u039d\13\34\2\0\1\34\51\0\1\u039e"+
    "\101\0\1\u039f\25\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u03a0\14\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u03a1\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\16\34\1\u03a2\13\34\2\0\1\34"+
    "\50\0\1\u03a3\40\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u03a4\25\34\2\0\1\34\43\0\1\u0346\26\0\1\u0346"+
    "\47\0\1\u03a5\73\0\1\u03a6\67\0\1\u03a7\46\0\1\u03a8"+
    "\71\0\1\u03a9\77\0\1\u03aa\53\0\1\u03ab\110\0\1\u03ac"+
    "\61\0\1\u03ad\103\0\1\u03ae\50\0\1\u03af\26\0\1\u03af"+
    "\52\0\1\u03b0\15\0\1\u03b0\45\0\1\u03b1\37\0\1\34"+
    "\1\0\4\34\4\0\2\34\1\u03b2\27\34\2\0\1\34"+
    "\35\0\1\u03b3\53\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u03b4\13\34\2\0\1\34\51\0\1\u03b5\37\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u03b6\7\34\2\0\1\34"+
    "\3\0\1\u03b7\51\0\1\u03b7\15\0\1\u03b7\15\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u03b8\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\15\34\1\u03b9\14\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\24\34"+
    "\1\u03ba\5\34\2\0\1\34\57\0\1\u03bb\31\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u03bc\7\34\2\0\1\34"+
    "\3\0\1\u03bd\51\0\1\u03bd\15\0\1\u03bd\15\0\1\34"+
    "\1\0\4\34\4\0\22\34\1\u03be\7\34\2\0\1\34"+
    "\3\0\1\u03bf\15\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u03c0\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u03c1\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u03c2\21\34\2\0\1\34"+
    "\2\0\1\u03c3\40\0\1\u03c3\26\0\1\u03c3\16\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u03c4\14\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\24\34\1\u03c5\5\34"+
    "\2\0\1\34\57\0\1\u03c6\60\0\1\u03c7\40\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u03c8\10\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u03c9\6\34"+
    "\2\0\1\34\56\0\1\u03ca\32\0\1\34\1\0\4\34"+
    "\4\0\17\34\1\u03cb\12\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u03cc\6\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\3\34\1\u03cd\26\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\17\34"+
    "\1\u03ce\12\34\2\0\1\34\52\0\1\u03cf\36\0\1\34"+
    "\1\0\4\34\4\0\1\u03d0\31\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u03d1\25\34\2\0"+
    "\1\34\37\0\1\u03d2\51\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u03d3\25\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\1\u03d4\31\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u03d5\25\34\2\0\1\34"+
    "\37\0\1\u03d6\51\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u03d7\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\3\34\1\u03d8\26\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\3\34\1\u03d9\26\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u03da\6\34"+
    "\2\0\1\34\56\0\1\u03db\32\0\1\34\1\0\4\34"+
    "\4\0\21\34\1\u03dc\10\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u03dd\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\22\34\1\u03de\7\34"+
    "\2\0\1\34\3\0\1\u03df\51\0\1\u03df\15\0\1\u03df"+
    "\15\0\1\34\1\0\4\34\4\0\30\34\1\u03e0\1\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u03e1\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\6\34\1\u03e2\23\34\2\0\1\34\41\0\1\u03e3"+
    "\111\0\1\u03e4\62\0\1\u03e5\32\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u03e6\25\34\2\0\1\34\37\0\1\u03e7"+
    "\51\0\1\34\1\0\4\34\4\0\1\u03e8\31\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\13\34\1\u03e9"+
    "\16\34\2\0\1\34\46\0\1\u03ea\42\0\1\34\1\0"+
    "\4\34\4\0\1\u03eb\31\34\2\0\1\34\33\0\1\u03ec"+
    "\55\0\1\34\1\0\4\34\4\0\16\34\1\u03ed\13\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u03ee\13\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u03ef\14\34\2\0\1\34\50\0\1\u03f0"+
    "\40\0\1\34\1\0\4\34\4\0\3\34\1\u03f1\26\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u03f2\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\2\34\1\u03f3\27\34\2\0\1\34\35\0\1\u03f4"+
    "\53\0\1\34\1\0\4\34\4\0\22\34\1\u03f5\7\34"+
    "\2\0\1\34\3\0\1\u03f6\51\0\1\u03f6\15\0\1\u03f6"+
    "\15\0\1\34\1\0\4\34\4\0\10\34\1\u03f7\21\34"+
    "\2\0\1\34\2\0\1\u03f8\16\0\1\34\1\0\4\34"+
    "\4\0\30\34\1\u03f9\1\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u03fa\25\34\2\0\1\34"+
    "\37\0\1\u03fb\51\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u03fc\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\24\34\1\u03fd\5\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\1\u03fe\31\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u03ff\6\34\2\0"+
    "\1\34\37\0\1\u0400\51\0\1\34\1\0\4\34\4\0"+
    "\30\34\1\u0401\1\34\2\0\1\34\63\0\1\u0402\25\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0403\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u0404"+
    "\25\34\2\0\1\34\37\0\1\u0405\51\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u0406\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u0407\25\34\2\0"+
    "\1\34\37\0\1\u0408\65\0\1\u0409\53\0\1\34\1\0"+
    "\4\34\4\0\4\34\1\u040a\25\34\2\0\1\34\37\0"+
    "\1\u040b\51\0\1\34\1\0\4\34\4\0\1\u040c\2\34"+
    "\1\u040d\14\34\1\u040e\11\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u040f\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\10\34\1\u0410\21\34"+
    "\2\0\1\34\2\0\1\u0411\40\0\1\u0411\26\0\1\u0411"+
    "\16\0\1\34\1\0\4\34\4\0\1\u0412\31\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\13\34\1\u0413"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\u0414\7\34\2\0\1\34\3\0\1\u0415\15\0"+
    "\1\34\1\0\4\34\4\0\3\34\1\u0416\26\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\1\u0417\31\34"+
    "\2\0\1\34\33\0\1\u0418\55\0\1\34\1\0\4\34"+
    "\4\0\3\34\1\u0419\26\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u041a\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\15\34\1\u041b\14\34"+
    "\2\0\1\34\50\0\1\u041c\40\0\1\34\1\0\4\34"+
    "\4\0\3\34\1\u041d\26\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u041e\14\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\22\34\1\u041f\7\34"+
    "\2\0\1\34\3\0\1\u0420\32\0\1\u0421\105\0\1\u0422"+
    "\52\0\1\u0423\63\0\1\u0424\102\0\1\u0425\76\0\1\u0415"+
    "\15\0\1\u0415\32\0\1\u0426\65\0\1\u0427\71\0\1\u0428"+
    "\52\0\1\34\1\0\4\34\4\0\23\34\1\u0429\6\34"+
    "\2\0\1\34\56\0\1\u042a\32\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u042b\14\34\2\0\1\34\50\0\1\u042c"+
    "\40\0\1\34\1\0\4\34\4\0\4\34\1\u042d\25\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u042e\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u042f\6\34\2\0\1\34\56\0\1\u0430"+
    "\32\0\1\34\1\0\4\34\4\0\22\34\1\u0431\7\34"+
    "\2\0\1\34\3\0\1\u0432\51\0\1\u0432\15\0\1\u0432"+
    "\15\0\1\34\1\0\4\34\4\0\23\34\1\u0433\6\34"+
    "\2\0\1\34\56\0\1\u0434\32\0\1\34\1\0\4\34"+
    "\4\0\16\34\1\u0435\13\34\2\0\1\34\51\0\1\u0436"+
    "\37\0\1\34\1\0\4\34\4\0\23\34\1\u0437\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u0438\25\34\2\0\1\34\37\0\1\u0439\106\0\1\u043a"+
    "\32\0\1\34\1\0\4\34\4\0\21\34\1\u043b\10\34"+
    "\2\0\1\34\54\0\1\u043c\34\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u043d\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u043e\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u043f\6\34"+
    "\2\0\1\34\56\0\1\u0440\32\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\u0441\16\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\21\34\1\u0442\10\34\2\0\1\34"+
    "\54\0\1\u0443\34\0\1\34\1\0\4\34\4\0\27\34"+
    "\1\u0444\2\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\u0445\16\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u0446\25\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\10\34\1\u0447\21\34"+
    "\2\0\1\34\2\0\1\u0448\40\0\1\u0448\26\0\1\u0448"+
    "\16\0\1\34\1\0\4\34\4\0\22\34\1\u0449\7\34"+
    "\2\0\1\34\3\0\1\u044a\15\0\1\34\1\0\4\34"+
    "\4\0\1\u044b\31\34\2\0\1\34\33\0\1\u044c\55\0"+
    "\1\34\1\0\4\34\4\0\2\34\1\u044d\27\34\2\0"+
    "\1\34\35\0\1\u044e\53\0\1\34\1\0\4\34\4\0"+
    "\3\34\1\u044f\26\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\6\34\1\u0450\23\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\6\34\1\u0451\23\34\2\0"+
    "\1\34\41\0\1\u0452\47\0\1\34\1\0\4\34\4\0"+
    "\30\34\1\u0453\1\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\22\34\1\u0454\7\34\2\0\1\34\3\0"+
    "\1\u0455\51\0\1\u0455\15\0\1\u0455\15\0\1\34\1\0"+
    "\4\34\4\0\21\34\1\u0456\10\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u0457\6\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\4\34\1\u0458"+
    "\25\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\22\34\1\u0459\7\34\2\0\1\34\3\0\1\u045a\51\0"+
    "\1\u045a\15\0\1\u045a\15\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u045b\25\34\2\0\1\34\37\0\1\u045c\51\0"+
    "\1\34\1\0\4\34\4\0\3\34\1\u045d\26\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\21\34\1\u045e"+
    "\10\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\24\34\1\u045f\5\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\5\34\1\u0460\24\34\2\0\1\34\40\0"+
    "\1\u0461\50\0\1\34\1\0\4\34\4\0\13\34\1\u0462"+
    "\16\34\2\0\1\34\21\0\1\34\1\0\4\34\4\0"+
    "\10\34\1\u0463\21\34\2\0\1\34\2\0\1\u0464\16\0"+
    "\1\34\1\0\4\34\4\0\22\34\1\u0465\7\34\2\0"+
    "\1\34\3\0\1\u0466\51\0\1\u0466\15\0\1\u0466\15\0"+
    "\1\34\1\0\4\34\4\0\23\34\1\u0467\6\34\2\0"+
    "\1\34\56\0\1\u0468\32\0\1\34\1\0\4\34\4\0"+
    "\4\34\1\u0469\25\34\2\0\1\34\21\0\1\34\1\0"+
    "\4\34\4\0\2\34\1\u046a\27\34\2\0\1\34\21\0"+
    "\1\34\1\0\4\34\4\0\4\34\1\u046b\25\34\2\0"+
    "\1\34\21\0\1\34\1\0\4\34\4\0\6\34\1\u046c"+
    "\23\34\2\0\1\34\37\0\1\u046d\67\0\1\u046e\76\0"+
    "\1\u046f\64\0\1\u0464\26\0\1\u0464\54\0\1\u0470\31\0"+
    "\1\34\1\0\4\34\4\0\1\u0471\31\34\2\0\1\34"+
    "\33\0\1\u0472\55\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u0473\7\34\2\0\1\34\3\0\1\u0474\15\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u0475\25\34\2\0\1\34"+
    "\37\0\1\u0476\51\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u0477\10\34\2\0\1\34\54\0\1\u0478\34\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u0479\14\34\2\0\1\34"+
    "\50\0\1\u047a\40\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u047b\21\34\2\0\1\34\2\0\1\u047c\40\0\1\u047c"+
    "\26\0\1\u047c\16\0\1\34\1\0\4\34\4\0\10\34"+
    "\1\u047d\21\34\2\0\1\34\2\0\1\u047e\40\0\1\u047e"+
    "\26\0\1\u047e\16\0\1\34\1\0\4\34\4\0\23\34"+
    "\1\u047f\6\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u0480\6\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\23\34\1\u0481\6\34\2\0\1\34"+
    "\56\0\1\u0482\32\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u0483\7\34\2\0\1\34\3\0\1\u0484\51\0\1\u0484"+
    "\15\0\1\u0484\15\0\1\34\1\0\4\34\4\0\22\34"+
    "\1\u0485\7\34\2\0\1\34\3\0\1\u0486\51\0\1\u0486"+
    "\15\0\1\u0486\15\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u0487\25\34\2\0\1\34\37\0\1\u0488\51\0\1\34"+
    "\1\0\4\34\4\0\4\34\1\u0489\25\34\2\0\1\34"+
    "\37\0\1\u048a\51\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u048b\25\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u048c\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\3\34\1\u048d\26\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\3\34\1\u048e\26\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\16\34"+
    "\1\u048f\13\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u0490\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\10\34\1\u0491\21\34\2\0\1\34"+
    "\2\0\1\u0492\40\0\1\u0492\26\0\1\u0492\16\0\1\34"+
    "\1\0\4\34\4\0\15\34\1\u0493\14\34\2\0\1\34"+
    "\50\0\1\u0494\40\0\1\34\1\0\4\34\4\0\4\34"+
    "\1\u0495\25\34\2\0\1\34\37\0\1\u0496\51\0\1\34"+
    "\1\0\4\34\4\0\3\34\1\u0497\26\34\2\0\1\34"+
    "\21\0\1\34\1\0\4\34\4\0\23\34\1\u0498\6\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\27\34"+
    "\1\u0499\2\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\23\34\1\u049a\6\34\2\0\1\34\62\0\1\u049b"+
    "\63\0\1\u049c\67\0\1\u049d\32\0\1\34\1\0\4\34"+
    "\4\0\13\34\1\u049e\16\34\2\0\1\34\46\0\1\u049f"+
    "\42\0\1\34\1\0\4\34\4\0\16\34\1\u04a0\13\34"+
    "\2\0\1\34\51\0\1\u04a1\37\0\1\34\1\0\4\34"+
    "\4\0\15\34\1\u04a2\14\34\2\0\1\34\50\0\1\u04a3"+
    "\40\0\1\34\1\0\4\34\4\0\22\34\1\u04a4\7\34"+
    "\2\0\1\34\3\0\1\u04a5\51\0\1\u04a5\15\0\1\u04a5"+
    "\15\0\1\34\1\0\4\34\4\0\22\34\1\u04a6\7\34"+
    "\2\0\1\34\3\0\1\u04a7\51\0\1\u04a7\15\0\1\u04a7"+
    "\15\0\1\34\1\0\4\34\4\0\17\34\1\u04a8\12\34"+
    "\2\0\1\34\21\0\1\34\1\0\4\34\4\0\21\34"+
    "\1\u04a9\10\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\2\34\1\u04aa\27\34\2\0\1\34\35\0\1\u04ab"+
    "\53\0\1\34\1\0\4\34\4\0\4\34\1\u04ac\25\34"+
    "\2\0\1\34\37\0\1\u04ad\51\0\1\34\1\0\4\34"+
    "\4\0\4\34\1\u04ae\25\34\2\0\1\34\21\0\1\34"+
    "\1\0\4\34\4\0\7\34\1\u04af\22\34\2\0\1\34"+
    "\37\0\1\u04b0\51\0\1\34\1\0\4\34\4\0\15\34"+
    "\1\u04b1\14\34\2\0\1\34\50\0\1\u04b2\40\0\1\34"+
    "\1\0\4\34\4\0\6\34\1\u04b3\23\34\2\0\1\34"+
    "\41\0\1\u04b4\47\0\1\34\1\0\4\34\4\0\30\34"+
    "\1\u04b5\1\34\2\0\1\34\21\0\1\34\1\0\4\34"+
    "\4\0\3\34\1\u04b6\26\34\2\0\1\34\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[51240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\1\1\1\0\1\1\1\11"+
    "\5\1\1\0\33\1\1\0\1\1\1\11\2\0\2\1"+
    "\3\11\2\1\5\0\2\11\1\1\2\11\12\1\1\0"+
    "\14\1\1\0\21\1\1\0\3\1\1\0\23\1\1\0"+
    "\11\1\1\0\4\1\1\0\3\1\1\0\5\1\1\0"+
    "\2\1\1\11\1\1\5\11\14\0\2\1\3\0\17\1"+
    "\1\0\4\1\1\0\14\1\1\0\2\1\1\0\1\1"+
    "\1\0\6\1\1\0\2\1\1\0\12\1\1\0\3\1"+
    "\1\0\11\1\3\0\3\1\1\0\2\1\1\11\1\0"+
    "\7\1\1\0\11\1\1\11\2\1\1\0\3\1\1\0"+
    "\4\1\1\0\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\12\1\1\0\4\1\1\0\6\1\1\0\6\1\1\0"+
    "\2\1\1\0\5\1\5\0\1\11\1\0\1\1\10\0"+
    "\2\1\3\0\2\11\2\1\1\0\2\1\1\0\10\1"+
    "\3\0\7\1\1\0\4\1\1\0\1\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\2\1"+
    "\1\0\4\1\1\11\2\1\2\0\13\1\1\0\4\1"+
    "\1\0\11\1\3\0\1\1\1\0\3\1\1\0\7\1"+
    "\1\0\2\1\1\0\4\1\1\0\1\1\1\0\5\1"+
    "\1\0\3\1\1\11\3\1\1\0\6\1\1\0\4\1"+
    "\1\0\1\1\1\0\10\1\1\0\3\1\1\0\11\1"+
    "\1\11\3\1\1\0\3\1\1\0\4\1\2\0\2\1"+
    "\1\0\2\1\1\11\1\1\2\11\4\0\1\11\5\0"+
    "\1\11\10\0\2\1\1\0\2\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\11\1\0\1\1\1\0\6\1\1\0"+
    "\1\11\1\1\1\11\2\1\1\0\2\1\2\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\3\1\1\11\1\0\11\1\1\0"+
    "\3\1\1\0\6\1\1\0\1\11\3\1\3\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\6\1\1\0\2\1"+
    "\1\0\4\1\1\0\1\1\1\11\5\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\4\1\1\0\3\1"+
    "\1\0\2\1\1\0\2\1\1\11\1\1\1\0\10\1"+
    "\1\0\1\11\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\1\11\2\1\1\0\1\1\1\11\3\1\2\0"+
    "\1\1\1\11\4\1\1\0\1\11\1\1\1\11\1\0"+
    "\1\11\5\0\1\11\10\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\2\11\1\1\1\0"+
    "\5\1\1\11\2\1\1\0\2\1\2\0\1\1\1\11"+
    "\2\1\1\0\4\1\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\2\1\1\11\2\1\1\0\5\1\1\0"+
    "\2\1\1\11\2\1\1\0\4\1\1\11\1\1\3\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0"+
    "\3\1\1\0\1\1\1\0\4\1\1\0\5\1\1\0"+
    "\1\1\1\11\1\1\1\0\4\1\1\0\3\1\2\0"+
    "\1\1\1\0\3\1\1\0\6\1\1\11\3\1\1\11"+
    "\2\1\1\11\1\1\1\0\3\1\1\11\2\1\1\0"+
    "\1\11\3\1\1\0\1\1\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\2\11\1\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\3\1\1\11\4\1\1\11"+
    "\3\1\1\11\3\1\1\0\2\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\11\1\1"+
    "\1\11\1\1\1\0\2\1\1\11\4\1\1\11\1\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\0\1\1\1\11"+
    "\5\1\1\0\3\1\1\0\2\1\1\0\3\1\1\11"+
    "\3\1\1\11\2\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\2\11\1\1\1\11"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\2\1\1\0"+
    "\4\1\1\11\1\1\1\11\4\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\4\1\2\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\7\1\1\0\1\1\1\0\1\1\1\11\4\1\2\11"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 239: break;
          case 2:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 240: break;
          case 3:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 241: break;
          case 4:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 242: break;
          case 5:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 243: break;
          case 6:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 244: break;
          case 7:
            { return DOT;
            }
          // fall through
          case 245: break;
          case 8:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 246: break;
          case 9:
            { return NUMBER_INT;
            }
          // fall through
          case 247: break;
          case 10:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 248: break;
          case 11:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 249: break;
          case 12:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 250: break;
          case 13:
            { return IDENTIFIER;
            }
          // fall through
          case 251: break;
          case 14:
            { return OPERATOR_INTDIV;
            }
          // fall through
          case 252: break;
          case 15:
            { return OPERATOR_OR;
            }
          // fall through
          case 253: break;
          case 16:
            { return TILDE;
            }
          // fall through
          case 254: break;
          case 17:
            { return STRING;
            }
          // fall through
          case 255: break;
          case 18:
            { return SHEBANG;
            }
          // fall through
          case 256: break;
          case 19:
            { return OPERATOR_AND;
            }
          // fall through
          case 257: break;
          case 20:
            { return OPERATOR_POWER;
            }
          // fall through
          case 258: break;
          case 21:
            { return LINE_COMMENT;
            }
          // fall through
          case 259: break;
          case 22:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 260: break;
          case 23:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 261: break;
          case 24:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 262: break;
          case 25:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 263: break;
          case 26:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 264: break;
          case 27:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 265: break;
          case 28:
            { return SUBKEY_BY;
            }
          // fall through
          case 266: break;
          case 29:
            { return KEYWORD_DO;
            }
          // fall through
          case 267: break;
          case 30:
            { return KEYWORD_IF;
            }
          // fall through
          case 268: break;
          case 31:
            { return SUBKEY_ON;
            }
          // fall through
          case 269: break;
          case 32:
            { return SUBKEY_TO;
            }
          // fall through
          case 270: break;
          case 33:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 271: break;
          case 34:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 272: break;
          case 35:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 273: break;
          case 36:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 274: break;
          case 37:
            { return OPERATOR_XOR;
            }
          // fall through
          case 275: break;
          case 38:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 276: break;
          case 39:
            { return NUMBER_BINARY;
            }
          // fall through
          case 277: break;
          case 40:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 278: break;
          case 41:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 279: break;
          case 42:
            { return OPERATOR_STRICT_GREATERTHAN;
            }
          // fall through
          case 280: break;
          case 43:
            { return BUILTIN_ABS;
            }
          // fall through
          case 281: break;
          case 44:
            { return SUBDIRECTIVE_ALL;
            }
          // fall through
          case 282: break;
          case 45:
            { return CONDITION_ANY;
            }
          // fall through
          case 283: break;
          case 46:
            { return KEYWORD_ARG;
            }
          // fall through
          case 284: break;
          case 47:
            { return BUILTIN_B2X;
            }
          // fall through
          case 285: break;
          case 48:
            { return BUILTIN_C2D;
            }
          // fall through
          case 286: break;
          case 49:
            { return BUILTIN_C2X;
            }
          // fall through
          case 287: break;
          case 50:
            { return BUILTIN_D2C;
            }
          // fall through
          case 288: break;
          case 51:
            { return BUILTIN_D2X;
            }
          // fall through
          case 289: break;
          case 52:
            { return KEYWORD_END;
            }
          // fall through
          case 290: break;
          case 53:
            { return SUBKEY_FOR;
            }
          // fall through
          case 291: break;
          case 54:
            { return SUBDIRECTIVE_GET;
            }
          // fall through
          case 292: break;
          case 55:
            { return BUILTIN_MAX;
            }
          // fall through
          case 293: break;
          case 56:
            { return BUILTIN_MIN;
            }
          // fall through
          case 294: break;
          case 57:
            { return KEYWORD_NOP;
            }
          // fall through
          case 295: break;
          case 58:
            { return SUBKEY_OFF;
            }
          // fall through
          case 296: break;
          case 59:
            { return BUILTIN_POS;
            }
          // fall through
          case 297: break;
          case 60:
            { return KEYWORD_SAY;
            }
          // fall through
          case 298: break;
          case 61:
            { return SUBDIRECTIVE_SET;
            }
          // fall through
          case 299: break;
          case 62:
            { return KEYWORD_USE;
            }
          // fall through
          case 300: break;
          case 63:
            { return SUBKEY_VAR;
            }
          // fall through
          case 301: break;
          case 64:
            { return BUILTIN_X2B;
            }
          // fall through
          case 302: break;
          case 65:
            { return BUILTIN_X2C;
            }
          // fall through
          case 303: break;
          case 66:
            { return BUILTIN_X2D;
            }
          // fall through
          case 304: break;
          case 67:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 305: break;
          case 68:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 306: break;
          case 69:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 307: break;
          case 70:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 308: break;
          case 71:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 309: break;
          case 72:
            { return KEYWORD_CALL;
            }
          // fall through
          case 310: break;
          case 73:
            { return SUBKEY_CASE;
            }
          // fall through
          case 311: break;
          case 74:
            { return BUILTIN_DATE;
            }
          // fall through
          case 312: break;
          case 75:
            { return KEYWORD_DROP;
            }
          // fall through
          case 313: break;
          case 76:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 314: break;
          case 77:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 315: break;
          case 78:
            { return SUBKEY_FORM;
            }
          // fall through
          case 316: break;
          case 79:
            { return SUBKEY_FUZZ;
            }
          // fall through
          case 317: break;
          case 80:
            { return CONDITION_HALT;
            }
          // fall through
          case 318: break;
          case 81:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 319: break;
          case 82:
            { return BUILTIN_LEFT;
            }
          // fall through
          case 320: break;
          case 83:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 321: break;
          case 84:
            { return SUBKEY_NAME;
            }
          // fall through
          case 322: break;
          case 85:
            { return SUBKEY_OVER;
            }
          // fall through
          case 323: break;
          case 86:
            { return KEYWORD_PULL;
            }
          // fall through
          case 324: break;
          case 87:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 325: break;
          case 88:
            { return BUILTIN_SIGN;
            }
          // fall through
          case 326: break;
          case 89:
            { return SUBKEY_STEM;
            }
          // fall through
          case 327: break;
          case 90:
            { return KEYWORD_THEN;
            }
          // fall through
          case 328: break;
          case 91:
            { return BUILTIN_TIME;
            }
          // fall through
          case 329: break;
          case 92:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 330: break;
          case 93:
            { return CONDITION_USER;
            }
          // fall through
          case 331: break;
          case 94:
            { return KEYWORD_WHEN;
            }
          // fall through
          case 332: break;
          case 95:
            { return SUBKEY_WITH;
            }
          // fall through
          case 333: break;
          case 96:
            { return BUILTIN_WORD;
            }
          // fall through
          case 334: break;
          case 97:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 335: break;
          case 98:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 336: break;
          case 99:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 337: break;
          case 100:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 338: break;
          case 101:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 339: break;
          case 102:
            { return DIRECTIVE_CLASS;
            }
          // fall through
          case 340: break;
          case 103:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 341: break;
          case 104:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 342: break;
          case 105:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 343: break;
          case 106:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 344: break;
          case 107:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 345: break;
          case 108:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 346: break;
          case 109:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 347: break;
          case 110:
            { return BUILTIN_LINES;
            }
          // fall through
          case 348: break;
          case 111:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 349: break;
          case 112:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 350: break;
          case 113:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 351: break;
          case 114:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 352: break;
          case 115:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 353: break;
          case 116:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 354: break;
          case 117:
            { return BUILTIN_RIGHT;
            }
          // fall through
          case 355: break;
          case 118:
            { return BUILTIN_SPACE;
            }
          // fall through
          case 356: break;
          case 119:
            { return BUILTIN_STRIP;
            }
          // fall through
          case 357: break;
          case 120:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 358: break;
          case 121:
            { return BUILTIN_TRUNC;
            }
          // fall through
          case 359: break;
          case 122:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 360: break;
          case 123:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 361: break;
          case 124:
            { return SUBKEY_USING;
            }
          // fall through
          case 362: break;
          case 125:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 363: break;
          case 126:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 364: break;
          case 127:
            { return BUILTIN_WORDS;
            }
          // fall through
          case 365: break;
          case 128:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 366: break;
          case 129:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 367: break;
          case 130:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 368: break;
          case 131:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 369: break;
          case 132:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 370: break;
          case 133:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 371: break;
          case 134:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 372: break;
          case 135:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 373: break;
          case 136:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 374: break;
          case 137:
            { return SUBKEY_DIGITS;
            }
          // fall through
          case 375: break;
          case 138:
            { return KEYWORD_EXPOSE;
            }
          // fall through
          case 376: break;
          case 139:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 377: break;
          case 140:
            { return BUILTIN_INSERT;
            }
          // fall through
          case 378: break;
          case 141:
            { return BUILTIN_LENGTH;
            }
          // fall through
          case 379: break;
          case 142:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 380: break;
          case 143:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 381: break;
          case 144:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 382: break;
          case 145:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 383: break;
          case 146:
            { return SUBDIRECTIVE_PROLOG;
            }
          // fall through
          case 384: break;
          case 147:
            { return SUBDIRECTIVE_PUBLIC;
            }
          // fall through
          case 385: break;
          case 148:
            { return BUILTIN_QUEUED;
            }
          // fall through
          case 386: break;
          case 149:
            { return BUILTIN_RANDOM;
            }
          // fall through
          case 387: break;
          case 150:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 388: break;
          case 151:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 389: break;
          case 152:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 390: break;
          case 153:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 391: break;
          case 154:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 392: break;
          case 155:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 393: break;
          case 156:
            { return BUILTIN_SUBSTR;
            }
          // fall through
          case 394: break;
          case 157:
            { return BUILTIN_SYMBOL;
            }
          // fall through
          case 395: break;
          case 158:
            { return CONDITION_SYNTAX;
            }
          // fall through
          case 396: break;
          case 159:
            { return BUILTIN_USERID;
            }
          // fall through
          case 397: break;
          case 160:
            { return BUILTIN_VERIFY;
            }
          // fall through
          case 398: break;
          case 161:
            { return BUILTIN_XRANGE;
            }
          // fall through
          case 399: break;
          case 162:
            { return KEYWORD_CLASS;
            }
          // fall through
          case 400: break;
          case 163:
            { return KEYWORD_ADDRESS;
            }
          // fall through
          case 401: break;
          case 164:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 402: break;
          case 165:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 403: break;
          case 166:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 404: break;
          case 167:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 405: break;
          case 168:
            { return CONDITION_FAILURE;
            }
          // fall through
          case 406: break;
          case 169:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 407: break;
          case 170:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 408: break;
          case 171:
            { return SUBDIRECTIVE_GUARDED;
            }
          // fall through
          case 409: break;
          case 172:
            { return SUBDIRECTIVE_INHERIT;
            }
          // fall through
          case 410: break;
          case 173:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 411: break;
          case 174:
            { return BUILTIN_LASTPOS;
            }
          // fall through
          case 412: break;
          case 175:
            { return SUBDIRECTIVE_LIBRARY;
            }
          // fall through
          case 413: break;
          case 176:
            { return BUILTIN_LINEOUT;
            }
          // fall through
          case 414: break;
          case 177:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 415: break;
          case 178:
            { return CONDITION_NOVALUE;
            }
          // fall through
          case 416: break;
          case 179:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 417: break;
          case 180:
            { return DIRECTIVE_OPTIONS;
            }
          // fall through
          case 418: break;
          case 181:
            { return BUILTIN_OVERLAY;
            }
          // fall through
          case 419: break;
          case 182:
            { return SUBDIRECTIVE_PACKAGE;
            }
          // fall through
          case 420: break;
          case 183:
            { return SUBDIRECTIVE_PRIVATE;
            }
          // fall through
          case 421: break;
          case 184:
            { return BUILTIN_QUALIFY;
            }
          // fall through
          case 422: break;
          case 185:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 423: break;
          case 186:
            { return BUILTIN_REVERSE;
            }
          // fall through
          case 424: break;
          case 187:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 425: break;
          case 188:
            { return BUILTIN_RXQUEUE;
            }
          // fall through
          case 426: break;
          case 189:
            { return BUILTIN_SUBWORD;
            }
          // fall through
          case 427: break;
          case 190:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 428: break;
          case 191:
            { return BUILTIN_WORDPOS;
            }
          // fall through
          case 429: break;
          case 192:
            { return KEYWORD_METHOD;
            }
          // fall through
          case 430: break;
          case 193:
            { return SUBDIRECTIVE_ABSTRACT;
            }
          // fall through
          case 431: break;
          case 194:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 432: break;
          case 195:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 433: break;
          case 196:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 434: break;
          case 197:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 435: break;
          case 198:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 436: break;
          case 199:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 437: break;
          case 200:
            { return SUBDIRECTIVE_DELEGATE;
            }
          // fall through
          case 438: break;
          case 201:
            { return BUILTIN_ENDLOCAL;
            }
          // fall through
          case 439: break;
          case 202:
            { return SUBDIRECTIVE_EXTERNAL;
            }
          // fall through
          case 440: break;
          case 203:
            { return CONDITION_NOMETHOD;
            }
          // fall through
          case 441: break;
          case 204:
            { return SUBDIRECTIVE_NOPROLOG;
            }
          // fall through
          case 442: break;
          case 205:
            { return CONDITION_NOSTRING;
            }
          // fall through
          case 443: break;
          case 206:
            { return CONDITION_NOTREADY;
            }
          // fall through
          case 444: break;
          case 207:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 445: break;
          case 208:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 446: break;
          case 209:
            { return BUILTIN_SETLOCAL;
            }
          // fall through
          case 447: break;
          case 210:
            { return SUBDIRECTIVE_SUBCLASS;
            }
          // fall through
          case 448: break;
          case 211:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 449: break;
          case 212:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 450: break;
          case 213:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 451: break;
          case 214:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 452: break;
          case 215:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 453: break;
          case 216:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 454: break;
          case 217:
            { return SUBDIRECTIVE_METACLASS;
            }
          // fall through
          case 455: break;
          case 218:
            { return SUBDIRECTIVE_NAMESPACE;
            }
          // fall through
          case 456: break;
          case 219:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 457: break;
          case 220:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 458: break;
          case 221:
            { return CONDITION_PROPAGATE;
            }
          // fall through
          case 459: break;
          case 222:
            { return SUBDIRECTIVE_PROTECTED;
            }
          // fall through
          case 460: break;
          case 223:
            { return BUILTIN_RXFUNCADD;
            }
          // fall through
          case 461: break;
          case 224:
            { return BUILTIN_TRANSLATE;
            }
          // fall through
          case 462: break;
          case 225:
            { return SUBDIRECTIVE_UNGUARDED;
            }
          // fall through
          case 463: break;
          case 226:
            { return BUILTIN_WORDINDEX;
            }
          // fall through
          case 464: break;
          case 227:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 465: break;
          case 228:
            { return CONDITION_LOSTDIGITS;
            }
          // fall through
          case 466: break;
          case 229:
            { return SUBDIRECTIVE_MIXINCLASS;
            }
          // fall through
          case 467: break;
          case 230:
            { return BUILTIN_RXFUNCDROP;
            }
          // fall through
          case 468: break;
          case 231:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 469: break;
          case 232:
            { return BUILTIN_SOURCELINE;
            }
          // fall through
          case 470: break;
          case 233:
            { return BUILTIN_WORDLENGTH;
            }
          // fall through
          case 471: break;
          case 234:
            { return KEYWORD_ATTRIBUTE;
            }
          // fall through
          case 472: break;
          case 235:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 473: break;
          case 236:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 474: break;
          case 237:
            { return BUILTIN_RXFUNCQUERY;
            }
          // fall through
          case 475: break;
          case 238:
            { return SUBDIRECTIVE_UNPROTECTED;
            }
          // fall through
          case 476: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
