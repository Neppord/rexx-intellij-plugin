// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/rexx.flex

package com.github.neppord.rexxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.lang.invoke.StringConcatFactory;
import static com.github.neppord.rexxintellijplugin.RexxTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\0"+
    "\1\3\2\0\1\4\1\5\1\6\2\0\1\7\1\10"+
    "\1\0\1\11\1\0\1\12\2\0\1\13\11\0\1\14"+
    "\1\15\1\16\2\0\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\0"+
    "\1\51\2\0\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\0\1\52\263\0\2\27"+
    "\115\0\1\40\u01aa\0\1\30\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\26\0\1\13\1\0"+
    "\1\14\1\15\1\16\1\15\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\11\0\1\25\12\0\1\26\13\0\1\27"+
    "\15\0\1\30\31\0\1\31\13\0\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\0\1\42\1\0"+
    "\1\43\1\0\1\44\1\0\1\45\2\0\1\46\1\0"+
    "\1\47\1\50\11\0\1\51\1\52\6\0\1\53\7\0"+
    "\1\54\1\0\1\55\23\0\1\56\2\0\1\57\3\0"+
    "\1\60\5\0\1\61\6\0\1\62\22\0\1\63\2\0"+
    "\1\64\20\0\1\65\2\0\1\66\5\0\1\67\1\70"+
    "\1\71\1\0\1\72\1\73\1\74\14\0\1\75\1\76"+
    "\13\0\1\77\5\0\1\100\1\101\3\0\1\102\5\0"+
    "\1\103\1\0\1\104\1\0\1\105\5\0\1\106\4\0"+
    "\1\107\4\0\1\110\6\0\1\111\12\0\1\112\10\0"+
    "\1\113\1\114\20\0\1\115\2\0\1\116\7\0\1\117"+
    "\1\120\2\0\1\121\5\0\1\122\4\0\1\123\1\0"+
    "\1\124\1\125\1\0\1\126\1\127\7\0\1\130\2\0"+
    "\1\131\7\0\1\132\1\133\16\0\1\134\3\0\1\135"+
    "\3\0\1\136\1\137\1\0\1\140\3\0\1\141\1\0"+
    "\1\142\4\0\1\143\1\144\1\0\1\145\21\0\1\146"+
    "\7\0\1\147\1\150\2\0\1\151\4\0\1\152\10\0"+
    "\1\153\2\0\1\154\5\0\1\155\1\0\1\156\2\0"+
    "\1\157\1\160\1\0\1\161\1\162\2\0\1\163\3\0"+
    "\1\164\1\0\1\165\4\0\1\166\2\0\1\167\1\170"+
    "\1\0\1\171\1\172\1\0\1\173\5\0\1\174\4\0"+
    "\1\175\2\0\1\176\3\0\1\177\3\0\1\200\3\0"+
    "\1\201\3\0\1\202\1\0\1\203\4\0\1\204\4\0"+
    "\1\205\6\0\1\206\4\0\1\207\2\0\1\210\1\0"+
    "\1\211\1\212\3\0\1\213\5\0\1\214\1\0\1\215"+
    "\1\216\1\217\1\220\1\0\1\221\1\0\1\222\1\223"+
    "\3\0\1\224\1\225\4\0\1\226\2\0\1\227\5\0"+
    "\1\230\1\231\3\0\1\232\3\0\1\233\5\0\1\234"+
    "\1\235\1\236\1\237\1\240\1\0\1\241\1\242\1\243"+
    "\1\244\1\0\1\245\7\0\1\246\1\247\1\250\1\0"+
    "\1\251\1\252\1\253\3\0\1\254\1\255\2\0\1\256"+
    "\1\257\3\0\1\260\4\0\1\261\3\0\1\262\2\0"+
    "\1\263\1\264\1\0\1\265\2\0\1\266\2\0\1\267"+
    "\1\270\1\271\1\272\1\273\1\0\1\274\2\0\1\275"+
    "\5\0\1\276\1\277\1\300\1\301\4\0\1\302\1\303"+
    "\4\0\1\304\1\0\1\305\6\0\1\306\1\307\1\310"+
    "\1\311\2\0\1\312\1\313\1\0\1\314\1\0\1\315"+
    "\1\316\1\317\1\320\1\321\1\322\4\0\1\323\1\324"+
    "\1\0\1\325\1\0\1\326\2\0\1\327\1\330\1\331"+
    "\1\0\1\332\1\333\1\0\1\334\1\335\1\336\1\337"+
    "\1\340";

  private static int [] zzUnpackAction() {
    int [] result = new int[811];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\201"+
    "\0\201\0\201\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\126\0\201"+
    "\0\201\0\201\0\201\0\201\0\u05e1\0\201\0\201\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\201\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\201\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\201"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\201\0\u0d45\0\u0d70"+
    "\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020"+
    "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\201"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\201\0\u1351\0\201\0\201\0\201"+
    "\0\201\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\201\0\u1453"+
    "\0\201\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\201\0\u152a\0\201"+
    "\0\201\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\201\0\201\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\201\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e"+
    "\0\201\0\u1cb9\0\u1ce4\0\201\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\201\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\201\0\u1f94\0\u1fbf\0\u1fea"+
    "\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142"+
    "\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\201"+
    "\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7"+
    "\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f"+
    "\0\u254a\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\201\0\u264c"+
    "\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\201\0\201\0\201\0\u2723"+
    "\0\u274e\0\201\0\201\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825"+
    "\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\201"+
    "\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa"+
    "\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\201\0\u2b81\0\u2bac\0\u2bd7"+
    "\0\u2c02\0\u2c2d\0\201\0\201\0\u2c58\0\u2c83\0\u2cae\0\201"+
    "\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\201"+
    "\0\u2e06\0\201\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\201"+
    "\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\201\0\u2fb4\0\u2fdf\0\u300a"+
    "\0\u3035\0\201\0\u3060\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137"+
    "\0\u3162\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f"+
    "\0\u32ba\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7"+
    "\0\u3412\0\u343d\0\u3468\0\u3493\0\201\0\201\0\u34be\0\u34e9"+
    "\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0\0\u35eb\0\u3616\0\u3641"+
    "\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718\0\u3743\0\u376e\0\u3799"+
    "\0\u37c4\0\201\0\u37ef\0\u381a\0\u3845\0\u3870\0\u389b\0\u38c6"+
    "\0\u38f1\0\201\0\201\0\u391c\0\u3947\0\201\0\u3972\0\u399d"+
    "\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5"+
    "\0\201\0\u3b20\0\201\0\u3b4b\0\u3b76\0\201\0\201\0\u3ba1"+
    "\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78\0\u3ca3\0\201\0\u3cce"+
    "\0\u3cf9\0\201\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb"+
    "\0\u3e26\0\201\0\201\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd"+
    "\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055"+
    "\0\u4080\0\u40ab\0\u40d6\0\u4101\0\u412c\0\201\0\u4157\0\u4182"+
    "\0\u41ad\0\u41d8\0\201\0\u4203\0\201\0\u422e\0\u4259\0\u4284"+
    "\0\201\0\u42af\0\201\0\u42da\0\u4305\0\u4330\0\u435b\0\201"+
    "\0\201\0\u4386\0\201\0\u43b1\0\u43dc\0\u4407\0\u4432\0\u445d"+
    "\0\u4488\0\u44b3\0\u44de\0\u4509\0\u4534\0\u455f\0\u458a\0\u45b5"+
    "\0\u45e0\0\u460b\0\u4636\0\u4661\0\201\0\u468c\0\u46b7\0\u46e2"+
    "\0\u470d\0\u4738\0\u4763\0\u478e\0\u47b9\0\201\0\u47e4\0\u480f"+
    "\0\201\0\u483a\0\u4865\0\u4890\0\u48bb\0\201\0\u48e6\0\u4911"+
    "\0\u493c\0\u4967\0\u4992\0\u49bd\0\u49e8\0\u4a13\0\201\0\u4a3e"+
    "\0\u4a69\0\201\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40\0\201"+
    "\0\u4b6b\0\201\0\u4b96\0\u4bc1\0\201\0\201\0\u4bec\0\201"+
    "\0\201\0\u4c17\0\u4c42\0\201\0\u4c6d\0\u4c98\0\u4cc3\0\201"+
    "\0\u4cee\0\201\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a\0\201\0\u4dc5"+
    "\0\u4df0\0\201\0\201\0\u4e1b\0\201\0\201\0\u4e46\0\201"+
    "\0\u4e71\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d\0\201\0\u4f48\0\u4f73"+
    "\0\u4f9e\0\u4fc9\0\201\0\u4ff4\0\u501f\0\201\0\u504a\0\u5075"+
    "\0\u50a0\0\201\0\u50cb\0\u50f6\0\u5121\0\201\0\u514c\0\u5177"+
    "\0\u51a2\0\201\0\u51cd\0\u51f8\0\u5223\0\201\0\u524e\0\201"+
    "\0\u5279\0\u52a4\0\u52cf\0\u52fa\0\201\0\u5325\0\u5350\0\u537b"+
    "\0\u53a6\0\201\0\u53d1\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8"+
    "\0\201\0\u54d3\0\u54fe\0\u5529\0\u5554\0\201\0\u557f\0\u55aa"+
    "\0\201\0\u55d5\0\201\0\201\0\u5600\0\u562b\0\u5656\0\201"+
    "\0\u5681\0\u56ac\0\u56d7\0\u5702\0\u572d\0\201\0\u5758\0\201"+
    "\0\u5783\0\201\0\201\0\u57ae\0\201\0\u57d9\0\201\0\201"+
    "\0\u5804\0\u582f\0\u585a\0\201\0\201\0\u5885\0\u58b0\0\u58db"+
    "\0\u5906\0\201\0\u5931\0\u595c\0\201\0\u5987\0\u59b2\0\u59dd"+
    "\0\u5a08\0\u5a33\0\201\0\201\0\u5a5e\0\u5a89\0\u5ab4\0\201"+
    "\0\u5adf\0\u5b0a\0\u5b35\0\201\0\u5b60\0\u5b8b\0\u5bb6\0\u5be1"+
    "\0\u5c0c\0\201\0\201\0\201\0\201\0\201\0\u5c37\0\201"+
    "\0\201\0\201\0\201\0\u5c62\0\201\0\u5c8d\0\u5cb8\0\u5ce3"+
    "\0\u5d0e\0\u5d39\0\u5d64\0\u5d8f\0\201\0\201\0\201\0\u5dba"+
    "\0\201\0\201\0\201\0\u5de5\0\u5e10\0\u5e3b\0\201\0\201"+
    "\0\u5e66\0\u5e91\0\201\0\201\0\u5ebc\0\u5ee7\0\u5f12\0\201"+
    "\0\u5f3d\0\u5f68\0\u5f93\0\u5fbe\0\201\0\u5fe9\0\u6014\0\u603f"+
    "\0\201\0\u606a\0\u6095\0\201\0\201\0\u60c0\0\201\0\u60eb"+
    "\0\u6116\0\201\0\u6141\0\u616c\0\201\0\201\0\201\0\201"+
    "\0\201\0\u6197\0\201\0\u61c2\0\u61ed\0\201\0\u6218\0\u6243"+
    "\0\u626e\0\u6299\0\u62c4\0\201\0\201\0\201\0\201\0\u62ef"+
    "\0\u631a\0\u6345\0\u6370\0\201\0\201\0\u639b\0\u63c6\0\u63f1"+
    "\0\u641c\0\201\0\u6447\0\201\0\u6472\0\u649d\0\u64c8\0\u64f3"+
    "\0\u651e\0\u6549\0\201\0\201\0\201\0\201\0\u6574\0\u659f"+
    "\0\201\0\201\0\u65ca\0\201\0\u65f5\0\201\0\201\0\201"+
    "\0\201\0\201\0\201\0\u6620\0\u664b\0\u6676\0\u66a1\0\201"+
    "\0\201\0\u66cc\0\201\0\u66f7\0\201\0\u6722\0\u674d\0\201"+
    "\0\201\0\201\0\u6778\0\201\0\201\0\u67a3\0\201\0\201"+
    "\0\201\0\201\0\201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[811];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\2\0\1\44\1\45"+
    "\1\46\1\0\2\2\50\0\2\3\1\0\1\47\44\3"+
    "\1\0\2\3\60\0\1\50\45\0\6\6\1\51\44\6"+
    "\7\0\1\52\61\0\1\53\50\0\1\54\1\55\51\0"+
    "\1\56\1\57\55\0\1\60\1\0\1\61\6\0\1\62"+
    "\1\0\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\24\0\1\67\13\0\1\70\16\0\1\71\17\0\1\72"+
    "\3\0\1\73\3\0\1\74\2\0\1\75\2\0\1\76"+
    "\2\0\1\77\31\0\1\100\3\0\1\101\3\0\1\102"+
    "\3\0\1\103\4\0\1\104\2\0\1\105\44\0\1\106"+
    "\1\0\1\107\3\0\1\110\5\0\1\111\24\0\1\112"+
    "\14\0\1\113\5\0\1\114\33\0\1\115\16\0\1\116"+
    "\27\0\1\117\57\0\1\120\6\0\1\121\5\0\1\122"+
    "\30\0\1\123\3\0\1\124\3\0\1\125\4\0\1\126"+
    "\35\0\1\127\3\0\1\130\3\0\1\131\42\0\1\132"+
    "\14\0\1\133\5\0\1\134\34\0\1\135\6\0\1\136"+
    "\1\0\1\137\3\0\1\140\1\141\1\142\26\0\1\143"+
    "\14\0\1\144\2\0\1\145\2\0\1\146\52\0\1\147"+
    "\27\0\1\150\3\0\1\151\3\0\1\152\4\0\1\153"+
    "\10\0\1\154\24\0\1\155\1\0\1\156\1\0\1\157"+
    "\3\0\1\160\4\0\1\161\1\162\3\0\1\163\1\164"+
    "\3\0\1\165\32\0\1\166\1\167\4\0\1\170\2\0"+
    "\1\171\46\0\1\172\1\0\1\173\2\0\1\174\31\0"+
    "\1\175\3\0\1\176\55\0\1\177\1\200\4\0\1\201"+
    "\31\0\1\202\23\0\1\203\27\0\1\204\1\205\1\206"+
    "\31\0\1\207\53\0\1\210\53\0\1\211\14\0\1\212"+
    "\1\0\1\213\54\0\1\214\17\0\1\215\34\0\1\216"+
    "\61\0\1\217\54\0\1\220\12\0\1\221\41\0\1\222"+
    "\42\0\1\223\11\0\1\224\54\0\1\225\56\0\1\226"+
    "\46\0\1\227\33\0\1\230\22\0\1\231\36\0\1\232"+
    "\6\0\1\233\45\0\1\234\36\0\1\235\52\0\1\236"+
    "\65\0\1\237\1\240\1\0\1\241\4\0\1\242\31\0"+
    "\1\243\23\0\1\244\46\0\1\245\42\0\1\246\6\0"+
    "\1\247\37\0\1\250\61\0\1\251\56\0\1\252\34\0"+
    "\1\253\2\0\1\254\64\0\1\255\42\0\1\256\5\0"+
    "\1\257\3\0\1\260\40\0\1\261\1\0\1\262\60\0"+
    "\1\263\62\0\1\264\44\0\1\265\30\0\1\266\64\0"+
    "\1\267\43\0\1\270\3\0\1\271\6\0\1\272\2\0"+
    "\1\273\1\274\34\0\1\275\47\0\1\276\17\0\1\277"+
    "\31\0\1\300\4\0\1\301\6\0\1\302\37\0\1\303"+
    "\12\0\1\304\40\0\1\305\12\0\1\306\3\0\1\307"+
    "\3\0\1\310\53\0\1\311\45\0\1\312\1\313\44\0"+
    "\1\314\11\0\1\315\37\0\1\316\52\0\1\317\2\0"+
    "\1\320\1\0\1\321\1\322\1\323\1\0\1\324\41\0"+
    "\1\325\44\0\1\326\67\0\1\327\37\0\1\330\65\0"+
    "\1\331\34\0\1\332\50\0\1\333\15\0\1\334\53\0"+
    "\1\335\41\0\1\336\4\0\1\337\36\0\1\340\10\0"+
    "\1\341\6\0\1\342\31\0\1\343\3\0\1\344\56\0"+
    "\1\345\3\0\1\346\54\0\1\347\1\350\1\0\1\351"+
    "\1\352\1\0\1\353\34\0\1\354\67\0\1\355\34\0"+
    "\1\356\11\0\1\357\62\0\1\360\33\0\1\361\54\0"+
    "\1\362\7\0\1\363\36\0\1\364\67\0\1\365\27\0"+
    "\1\366\56\0\1\367\13\0\1\370\33\0\1\371\64\0"+
    "\1\372\1\373\42\0\1\374\61\0\1\375\37\0\1\376"+
    "\22\0\1\377\35\0\1\u0100\7\0\1\u0101\3\0\1\u0102"+
    "\46\0\1\u0103\40\0\1\u0104\3\0\1\u0105\54\0\1\u0106"+
    "\5\0\1\u0107\52\0\1\u0108\36\0\1\u0109\3\0\1\u010a"+
    "\64\0\1\u010b\50\0\1\u010c\33\0\1\u010d\1\u010e\1\u010f"+
    "\47\0\1\u0110\50\0\1\u0111\52\0\1\u0112\52\0\1\u0113"+
    "\74\0\1\u0114\54\0\1\u0115\40\0\1\u0116\7\0\1\u0117"+
    "\47\0\1\u0118\41\0\1\u0119\71\0\1\u011a\27\0\1\u011b"+
    "\72\0\1\u011c\32\0\1\u011d\14\0\1\u011e\10\0\1\u011f"+
    "\36\0\1\u0120\44\0\1\u0121\70\0\1\u0122\44\0\1\u0123"+
    "\3\0\1\u0124\53\0\1\u0125\47\0\1\u0126\37\0\1\u0127"+
    "\15\0\1\u0128\1\u0129\40\0\1\u012a\56\0\1\u012b\36\0"+
    "\1\u012c\3\0\1\u012d\52\0\1\u012e\14\0\1\u012f\3\0"+
    "\1\u0130\27\0\1\u0131\60\0\1\u0132\60\0\1\u0133\40\0"+
    "\1\u0134\60\0\1\u0135\50\0\1\u0136\57\0\1\u0137\57\0"+
    "\1\u0138\45\0\1\u0139\41\0\1\u013a\60\0\1\u013b\61\0"+
    "\1\u013c\35\0\1\u013d\6\0\1\u013e\11\0\1\u013f\55\0"+
    "\1\u0140\42\0\1\u0141\54\0\1\u0142\34\0\1\u0143\52\0"+
    "\1\u0144\71\0\1\u0145\33\0\1\u0146\52\0\1\u0147\61\0"+
    "\1\u0148\4\0\1\u0149\36\0\1\u014a\70\0\1\u014b\54\0"+
    "\1\u014c\50\0\1\u014d\36\0\1\u014e\64\0\1\u014f\36\0"+
    "\1\u0150\46\0\1\u0151\70\0\1\u0152\56\0\1\u0153\34\0"+
    "\1\u0154\67\0\1\u0155\31\0\1\u0156\6\0\1\u0157\53\0"+
    "\1\u0158\46\0\1\u0159\52\0\1\u015a\66\0\1\u015b\45\0"+
    "\1\u015c\61\0\1\u015d\50\0\1\u015e\32\0\1\u015f\56\0"+
    "\1\u0160\56\0\1\u0161\46\0\1\u0162\64\0\1\u0163\54\0"+
    "\1\u0164\43\0\1\u0165\62\0\1\u0166\55\0\1\u0167\30\0"+
    "\1\u0168\7\0\1\u0169\3\0\1\u016a\3\0\1\u016b\42\0"+
    "\1\u016c\52\0\1\u016d\47\0\1\u016e\55\0\1\u016f\63\0"+
    "\1\u0170\50\0\1\u0171\34\0\1\u0172\61\0\1\u0173\63\0"+
    "\1\u0174\44\0\1\u0175\60\0\1\u0176\33\0\1\u0177\55\0"+
    "\1\u0178\65\0\1\u0179\53\0\1\u017a\52\0\1\u017b\33\0"+
    "\1\u017c\52\0\1\u017d\60\0\1\u017e\54\0\1\u017f\56\0"+
    "\1\u0180\34\0\1\u0181\63\0\1\u0182\43\0\1\u0183\3\0"+
    "\1\u0184\44\0\1\u0185\16\0\1\u0186\3\0\1\u0187\26\0"+
    "\1\u0188\73\0\1\u0189\44\0\1\u018a\42\0\1\u018b\50\0"+
    "\1\u018c\11\0\1\u018d\42\0\1\u018e\7\0\1\u018f\61\0"+
    "\1\u0190\47\0\1\u0191\42\0\1\u0192\46\0\1\u0193\66\0"+
    "\1\u0194\46\0\1\u0195\61\0\1\u0196\37\0\1\u0197\10\0"+
    "\1\u0198\45\0\1\u0199\50\0\1\u019a\47\0\1\u019b\46\0"+
    "\1\u019c\63\0\1\u019d\33\0\1\u019e\1\0\1\u019f\57\0"+
    "\1\u01a0\66\0\1\u01a1\54\0\1\u01a2\34\0\1\u01a3\70\0"+
    "\1\u01a4\44\0\1\u01a5\51\0\1\u01a6\66\0\1\u01a7\33\0"+
    "\1\u01a8\56\0\1\u01a9\56\0\1\u01aa\47\0\1\u01ab\47\0"+
    "\1\u01ac\44\0\1\u01ad\13\0\1\u01ae\40\0\1\u01af\54\0"+
    "\1\u01b0\4\0\1\u01b1\3\0\1\u01b2\52\0\1\u01b3\31\0"+
    "\1\u01b4\62\0\1\u01b5\64\0\1\u01b6\40\0\1\u01b7\46\0"+
    "\1\u01b8\70\0\1\u01b9\52\0\1\u01ba\36\0\1\u01bb\66\0"+
    "\1\u01bc\45\0\1\u01bd\55\0\1\u01be\54\0\1\u01bf\45\0"+
    "\1\u01c0\51\0\1\u01c1\56\0\1\u01c2\53\0\1\u01c3\51\0"+
    "\1\u01c4\55\0\1\u01c5\33\0\1\u01c6\72\0\1\u01c7\26\0"+
    "\1\u01c8\52\0\1\u01c9\55\0\1\u01ca\75\0\1\u01cb\44\0"+
    "\1\u01cc\54\0\1\u01cd\50\0\1\u01ce\52\0\1\u01cf\32\0"+
    "\1\u01d0\64\0\1\u01d1\56\0\1\u01d2\40\0\1\u01d3\70\0"+
    "\1\u01d4\30\0\1\u01d5\62\0\1\u01d6\4\0\1\u01d7\3\0"+
    "\1\u01d8\43\0\1\u01d9\43\0\1\u01da\67\0\1\u01db\32\0"+
    "\1\u01dc\54\0\1\u01dd\65\0\1\u01de\51\0\1\u01df\57\0"+
    "\1\u01e0\53\0\1\u01e1\45\0\1\u01e2\35\0\1\u01e3\72\0"+
    "\1\u01e4\36\0\1\u01e5\60\0\1\u01e6\60\0\1\u01e7\47\0"+
    "\1\u01e8\55\0\1\u01e9\55\0\1\u01ea\41\0\1\u01eb\40\0"+
    "\1\u01ec\56\0\1\u01ed\46\0\1\u01ee\56\0\1\u01ef\63\0"+
    "\1\u01f0\35\0\1\u01f1\56\0\1\u01f2\56\0\1\u01f3\52\0"+
    "\1\u01f4\46\0\1\u01f5\52\0\1\u01f6\63\0\1\u01f7\35\0"+
    "\1\u01f8\26\0\1\u01f9\33\0\1\u01fa\65\0\1\u01fb\47\0"+
    "\1\u01fc\52\0\1\u01fd\54\0\1\u01fe\40\0\1\u01ff\56\0"+
    "\1\u0200\42\0\1\u0201\62\0\1\u0202\40\0\1\u0203\65\0"+
    "\1\u0204\35\0\1\u0205\54\0\1\u0206\54\0\1\u0207\46\0"+
    "\1\u0208\54\0\1\u0209\13\0\1\u020a\46\0\1\u020b\62\0"+
    "\1\u020c\45\0\1\u020d\52\0\1\u020e\35\0\1\u020f\56\0"+
    "\1\u0210\67\0\1\u0211\33\0\1\u0212\50\0\1\u0213\67\0"+
    "\1\u0214\47\0\1\u0215\60\0\1\u0216\42\0\1\u0217\50\0"+
    "\1\u0218\50\0\1\u0219\53\0\1\u021a\55\0\1\u021b\46\0"+
    "\1\u021c\56\0\1\u021d\1\0\1\u021e\3\0\1\u021f\2\0"+
    "\1\u0220\37\0\1\u0221\70\0\1\u0222\26\0\1\u0223\62\0"+
    "\1\u0224\63\0\1\u0225\31\0\1\u0226\55\0\1\u0227\53\0"+
    "\1\u0228\47\0\1\u0229\54\0\1\u022a\67\0\1\u022b\36\0"+
    "\1\u022c\66\0\1\u022d\36\0\1\u022e\52\0\1\u022f\62\0"+
    "\1\u0230\61\0\1\u0231\47\0\1\u0232\54\0\1\u0233\30\0"+
    "\1\u0234\66\0\1\u0235\57\0\1\u0236\35\0\1\u0237\14\0"+
    "\1\u0238\60\0\1\u0239\23\0\1\u023a\72\0\1\u023b\52\0"+
    "\1\u023c\42\0\1\u023d\63\0\1\u023e\33\0\1\u023f\54\0"+
    "\1\u0240\70\0\1\u0241\34\0\1\u0242\62\0\1\u0243\56\0"+
    "\1\u0244\36\0\1\u0245\70\0\1\u0246\50\0\1\u0247\36\0"+
    "\1\u0248\56\0\1\u0249\64\0\1\u024a\46\0\1\u024b\56\0"+
    "\1\u024c\45\0\1\u024d\44\0\1\u024e\63\0\1\u024f\46\0"+
    "\1\u0250\61\0\1\u0251\37\0\1\u0252\50\0\1\u0253\56\0"+
    "\1\u0254\43\0\1\u0255\51\0\1\u0256\66\0\1\u0257\43\0"+
    "\1\u0258\55\0\1\u0259\52\0\1\u025a\50\0\1\u025b\42\0"+
    "\1\u025c\75\0\1\u025d\37\0\1\u025e\56\0\1\u025f\63\0"+
    "\1\u0260\47\0\1\u0261\30\0\1\u0262\60\0\1\u0263\66\0"+
    "\1\u0264\33\0\1\u0265\55\0\1\u0266\52\0\1\u0267\46\0"+
    "\1\u0268\52\0\1\u0269\55\0\1\u026a\50\0\1\u026b\62\0"+
    "\1\u026c\41\0\1\u026d\70\0\1\u026e\52\0\1\u026f\46\0"+
    "\1\u0270\57\0\1\u0271\45\0\1\u0272\40\0\1\u0273\73\0"+
    "\1\u0274\51\0\1\u0275\52\0\1\u0276\32\0\1\u0277\62\0"+
    "\1\u0278\44\0\1\u0279\61\0\1\u027a\61\0\1\u027b\30\0"+
    "\1\u027c\72\0\1\u027d\52\0\1\u027e\44\0\1\u027f\66\0"+
    "\1\u0280\36\0\1\u0281\60\0\1\u0282\54\0\1\u0283\33\0"+
    "\1\u0284\76\0\1\u0285\40\0\1\u0286\51\0\1\u0287\42\0"+
    "\1\u0288\63\0\1\u0289\41\0\1\u028a\50\0\1\u028b\65\0"+
    "\1\u028c\56\0\1\u028d\53\0\1\u028e\44\0\1\u028f\61\0"+
    "\1\u0290\50\0\1\u0291\52\0\1\u0292\53\0\1\u0293\34\0"+
    "\1\u0294\56\0\1\u0295\56\0\1\u0296\61\0\1\u0297\47\0"+
    "\1\u0298\54\0\1\u0299\46\0\1\u029a\56\0\1\u029b\33\0"+
    "\1\u029c\65\0\1\u029d\34\0\1\u029e\56\0\1\u029f\52\0"+
    "\1\u02a0\46\0\1\u02a1\56\0\1\u02a2\66\0\1\u02a3\35\0"+
    "\1\u02a4\52\0\1\u02a5\71\0\1\u02a6\50\0\1\u02a7\36\0"+
    "\1\u02a8\67\0\1\u02a9\60\0\1\u02aa\45\0\1\u02ab\36\0"+
    "\1\u02ac\50\0\1\u02ad\46\0\1\u02ae\64\0\1\u02af\40\0"+
    "\1\u02b0\67\0\1\u02b1\52\0\1\u02b2\51\0\1\u02b3\41\0"+
    "\1\u02b4\53\0\1\u02b5\50\0\1\u02b6\71\0\1\u02b7\41\0"+
    "\1\u02b8\71\0\1\u02b9\27\0\1\u02ba\52\0\1\u02bb\71\0"+
    "\1\u02bc\27\0\1\u02bd\74\0\1\u02be\57\0\1\u02bf\27\0"+
    "\1\u02c0\52\0\1\u02c1\50\0\1\u02c2\54\0\1\u02c3\52\0"+
    "\1\u02c4\46\0\1\u02c5\2\0\1\u02c6\13\0\1\u02c7\37\0"+
    "\1\u02c8\56\0\1\u02c9\42\0\1\u02ca\64\0\1\u02cb\61\0"+
    "\1\u02cc\34\0\1\u02cd\47\0\1\u02ce\55\0\1\u02cf\53\0"+
    "\1\u02d0\62\0\1\u02d1\41\0\1\u02d2\63\0\1\u02d3\57\0"+
    "\1\u02d4\53\0\1\u02d5\44\0\1\u02d6\42\0\1\u02d7\70\0"+
    "\1\u02d8\52\0\1\u02d9\51\0\1\u02da\53\0\1\u02db\45\0"+
    "\1\u02dc\57\0\1\u02dd\34\0\1\u02de\66\0\1\u02df\36\0"+
    "\1\u02e0\52\0\1\u02e1\70\0\1\u02e2\42\0\1\u02e3\60\0"+
    "\1\u02e4\60\0\1\u02e5\36\0\1\u02e6\44\0\1\u02e7\56\0"+
    "\1\u02e8\63\0\1\u02e9\31\0\1\u02ea\54\0\1\u02eb\53\0"+
    "\1\u02ec\55\0\1\u02ed\52\0\1\u02ee\73\0\1\u02ef\44\0"+
    "\1\u02f0\51\0\1\u02f1\54\0\1\u02f2\34\0\1\u02f3\67\0"+
    "\1\u02f4\35\0\1\u02f5\51\0\1\u02f6\67\0\1\u02f7\55\0"+
    "\1\u02f8\34\0\1\u02f9\57\0\1\u02fa\50\0\1\u02fb\63\0"+
    "\1\u02fc\53\0\1\u02fd\34\0\1\u02fe\50\0\1\u02ff\54\0"+
    "\1\u0300\54\0\1\u0301\44\0\1\u0302\73\0\1\u0303\35\0"+
    "\1\u0304\66\0\1\u0305\46\0\1\u0306\46\0\1\u0307\52\0"+
    "\1\u0308\64\0\1\u0309\52\0\1\u030a\52\0\1\u030b\51\0"+
    "\1\u030c\52\0\1\u030d\35\0\1\u030e\52\0\1\u030f\52\0"+
    "\1\u0310\52\0\1\u0311\51\0\1\u0312\52\0\1\u0313\64\0"+
    "\1\u0314\41\0\1\u0315\56\0\1\u0316\56\0\1\u0317\42\0"+
    "\1\u0318\51\0\1\u0319\71\0\1\u031a\56\0\1\u031b\46\0"+
    "\1\u031c\42\0\1\u031d\55\0\1\u031e\51\0\1\u031f\57\0"+
    "\1\u0320\52\0\1\u0321\47\0\1\u0322\54\0\1\u0323\34\0"+
    "\1\u0324\54\0\1\u0325\52\0\1\u0326\55\0\1\u0327\57\0"+
    "\1\u0328\44\0\1\u0329\73\0\1\u032a\26\0\1\u032b\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26574];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\1\1\1\0\1\1\3\11"+
    "\3\1\26\0\1\1\1\0\2\1\5\11\1\1\2\11"+
    "\11\0\1\11\12\0\1\11\13\0\1\11\15\0\1\11"+
    "\31\0\1\11\13\0\1\11\1\1\4\11\2\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\1\1\2\0"+
    "\1\11\1\0\2\11\11\0\2\11\6\0\1\1\7\0"+
    "\1\1\1\0\1\11\23\0\1\11\2\0\1\11\3\0"+
    "\1\1\5\0\1\11\6\0\1\11\22\0\1\11\2\0"+
    "\1\1\20\0\1\1\2\0\1\11\5\0\3\11\1\0"+
    "\1\1\2\11\14\0\1\11\1\1\13\0\1\11\5\0"+
    "\2\11\3\0\1\11\5\0\1\1\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\4\0\1\11\4\0\1\11\6\0"+
    "\1\1\12\0\1\1\10\0\2\11\20\0\1\1\2\0"+
    "\1\11\7\0\2\11\2\0\1\11\5\0\1\1\4\0"+
    "\1\11\1\0\1\11\1\1\1\0\2\11\7\0\1\11"+
    "\2\0\1\11\7\0\2\11\16\0\1\1\3\0\1\11"+
    "\3\0\1\1\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\21\0\1\11\7\0"+
    "\1\1\1\11\2\0\1\11\4\0\1\11\10\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\2\11\2\0\1\11\3\0\1\11\1\0\1\11"+
    "\4\0\1\11\2\0\2\11\1\0\2\11\1\0\1\11"+
    "\5\0\1\11\4\0\1\11\2\0\1\11\3\0\1\11"+
    "\3\0\1\11\3\0\1\11\3\0\1\11\1\0\1\11"+
    "\4\0\1\11\4\0\1\11\6\0\1\11\4\0\1\11"+
    "\2\0\1\11\1\0\2\11\3\0\1\11\5\0\1\11"+
    "\1\0\1\11\1\1\2\11\1\0\1\11\1\0\2\11"+
    "\3\0\2\11\4\0\1\11\2\0\1\11\5\0\2\11"+
    "\3\0\1\11\3\0\1\11\5\0\5\11\1\0\4\11"+
    "\1\0\1\11\7\0\3\11\1\0\3\11\3\0\2\11"+
    "\2\0\2\11\3\0\1\11\4\0\1\11\3\0\1\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\5\11"+
    "\1\0\1\11\2\0\1\11\5\0\4\11\4\0\2\11"+
    "\4\0\1\11\1\0\1\11\6\0\4\11\2\0\2\11"+
    "\1\0\1\11\1\0\6\11\4\0\2\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\0\2\11\1\0\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[811];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 225: break;
          case 2:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 226: break;
          case 3:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 227: break;
          case 4:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 228: break;
          case 5:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 229: break;
          case 6:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 230: break;
          case 7:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 231: break;
          case 8:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 232: break;
          case 9:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 233: break;
          case 10:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 234: break;
          case 11:
            { return OPERATOR_INTDIV;
            }
          // fall through
          case 235: break;
          case 12:
            { return OPERATOR_OR;
            }
          // fall through
          case 236: break;
          case 13:
            { return STRING;
            }
          // fall through
          case 237: break;
          case 14:
            { return OPERATOR_AND;
            }
          // fall through
          case 238: break;
          case 15:
            { return OPERATOR_POWER;
            }
          // fall through
          case 239: break;
          case 16:
            { return OPERATOR_LESSTHAN_GREATERTHAN;
            }
          // fall through
          case 240: break;
          case 17:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 241: break;
          case 18:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 242: break;
          case 19:
            { return OPERATOR_GREATERTHAN_LESSTHAN;
            }
          // fall through
          case 243: break;
          case 20:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 244: break;
          case 21:
            { return SUBKEY_BY;
            }
          // fall through
          case 245: break;
          case 22:
            { return KEYWORD_DO;
            }
          // fall through
          case 246: break;
          case 23:
            { return KEYWORD_IF;
            }
          // fall through
          case 247: break;
          case 24:
            { return SUBKEY_ON;
            }
          // fall through
          case 248: break;
          case 25:
            { return SUBKEY_TO;
            }
          // fall through
          case 249: break;
          case 26:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 250: break;
          case 27:
            { return OPERATOR_BACKSLASH_EQUAL;
            }
          // fall through
          case 251: break;
          case 28:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 252: break;
          case 29:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 253: break;
          case 30:
            { return OPERATOR_XOR;
            }
          // fall through
          case 254: break;
          case 31:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 255: break;
          case 32:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 256: break;
          case 33:
            { return OPERATOR_STRICT_GREATERTHAN;
            }
          // fall through
          case 257: break;
          case 34:
            { return BUILTIN_ABS;
            }
          // fall through
          case 258: break;
          case 35:
            { return SUBDIRECTIVE_ALL;
            }
          // fall through
          case 259: break;
          case 36:
            { return CONDITION_ANY;
            }
          // fall through
          case 260: break;
          case 37:
            { return KEYWORD_ARG;
            }
          // fall through
          case 261: break;
          case 38:
            { return BUILTIN_B2X;
            }
          // fall through
          case 262: break;
          case 39:
            { return BUILTIN_C2D;
            }
          // fall through
          case 263: break;
          case 40:
            { return BUILTIN_C2X;
            }
          // fall through
          case 264: break;
          case 41:
            { return BUILTIN_D2C;
            }
          // fall through
          case 265: break;
          case 42:
            { return BUILTIN_D2X;
            }
          // fall through
          case 266: break;
          case 43:
            { return KEYWORD_END;
            }
          // fall through
          case 267: break;
          case 44:
            { return SUBKEY_FOR;
            }
          // fall through
          case 268: break;
          case 45:
            { return SUBDIRECTIVE_GET;
            }
          // fall through
          case 269: break;
          case 46:
            { return BUILTIN_MAX;
            }
          // fall through
          case 270: break;
          case 47:
            { return BUILTIN_MIN;
            }
          // fall through
          case 271: break;
          case 48:
            { return KEYWORD_NOP;
            }
          // fall through
          case 272: break;
          case 49:
            { return SUBKEY_OFF;
            }
          // fall through
          case 273: break;
          case 50:
            { return BUILTIN_POS;
            }
          // fall through
          case 274: break;
          case 51:
            { return KEYWORD_SAY;
            }
          // fall through
          case 275: break;
          case 52:
            { return SUBDIRECTIVE_SET;
            }
          // fall through
          case 276: break;
          case 53:
            { return KEYWORD_USE;
            }
          // fall through
          case 277: break;
          case 54:
            { return SUBKEY_VAR;
            }
          // fall through
          case 278: break;
          case 55:
            { return BUILTIN_X2B;
            }
          // fall through
          case 279: break;
          case 56:
            { return BUILTIN_X2C;
            }
          // fall through
          case 280: break;
          case 57:
            { return BUILTIN_X2D;
            }
          // fall through
          case 281: break;
          case 58:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 282: break;
          case 59:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 283: break;
          case 60:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 284: break;
          case 61:
            { return KEYWORD_CALL;
            }
          // fall through
          case 285: break;
          case 62:
            { return SUBKEY_CASE;
            }
          // fall through
          case 286: break;
          case 63:
            { return BUILTIN_DATE;
            }
          // fall through
          case 287: break;
          case 64:
            { return KEYWORD_DROP;
            }
          // fall through
          case 288: break;
          case 65:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 289: break;
          case 66:
            { return KEYWORD_EXIT;
            }
          // fall through
          case 290: break;
          case 67:
            { return SUBKEY_FORM;
            }
          // fall through
          case 291: break;
          case 68:
            { return SUBKEY_FUZZ;
            }
          // fall through
          case 292: break;
          case 69:
            { return CONDITION_HALT;
            }
          // fall through
          case 293: break;
          case 70:
            { return SUBKEY_ITEM;
            }
          // fall through
          case 294: break;
          case 71:
            { return BUILTIN_LEFT;
            }
          // fall through
          case 295: break;
          case 72:
            { return KEYWORD_LOOP;
            }
          // fall through
          case 296: break;
          case 73:
            { return SUBKEY_NAME;
            }
          // fall through
          case 297: break;
          case 74:
            { return SUBKEY_OVER;
            }
          // fall through
          case 298: break;
          case 75:
            { return KEYWORD_PULL;
            }
          // fall through
          case 299: break;
          case 76:
            { return KEYWORD_PUSH;
            }
          // fall through
          case 300: break;
          case 77:
            { return BUILTIN_SIGN;
            }
          // fall through
          case 301: break;
          case 78:
            { return SUBKEY_STEM;
            }
          // fall through
          case 302: break;
          case 79:
            { return KEYWORD_THEN;
            }
          // fall through
          case 303: break;
          case 80:
            { return BUILTIN_TIME;
            }
          // fall through
          case 304: break;
          case 81:
            { return SUBKEY_TRUE;
            }
          // fall through
          case 305: break;
          case 82:
            { return CONDITION_USER;
            }
          // fall through
          case 306: break;
          case 83:
            { return KEYWORD_WHEN;
            }
          // fall through
          case 307: break;
          case 84:
            { return SUBKEY_WITH;
            }
          // fall through
          case 308: break;
          case 85:
            { return BUILTIN_WORD;
            }
          // fall through
          case 309: break;
          case 86:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 310: break;
          case 87:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 311: break;
          case 88:
            { return SUBKEY_ARRAY;
            }
          // fall through
          case 312: break;
          case 89:
            { return BUILTIN_BITOR;
            }
          // fall through
          case 313: break;
          case 90:
            { return BUILTIN_CHARS;
            }
          // fall through
          case 314: break;
          case 91:
            { return DIRECTIVE_CLASS;
            }
          // fall through
          case 315: break;
          case 92:
            { return SUBKEY_ERROR;
            }
          // fall through
          case 316: break;
          case 93:
            { return SUBKEY_FALSE;
            }
          // fall through
          case 317: break;
          case 94:
            { return KEYWORD_GUARD;
            }
          // fall through
          case 318: break;
          case 95:
            { return SUBKEY_INDEX;
            }
          // fall through
          case 319: break;
          case 96:
            { return SUBKEY_INPUT;
            }
          // fall through
          case 320: break;
          case 97:
            { return SUBKEY_LABEL;
            }
          // fall through
          case 321: break;
          case 98:
            { return KEYWORD_LEAVE;
            }
          // fall through
          case 322: break;
          case 99:
            { return BUILTIN_LINES;
            }
          // fall through
          case 323: break;
          case 100:
            { return SUBKEY_LOCAL;
            }
          // fall through
          case 324: break;
          case 101:
            { return SUBKEY_LOWER;
            }
          // fall through
          case 325: break;
          case 102:
            { return KEYWORD_PARSE;
            }
          // fall through
          case 326: break;
          case 103:
            { return KEYWORD_QUEUE;
            }
          // fall through
          case 327: break;
          case 104:
            { return KEYWORD_RAISE;
            }
          // fall through
          case 328: break;
          case 105:
            { return KEYWORD_REPLY;
            }
          // fall through
          case 329: break;
          case 106:
            { return BUILTIN_RIGHT;
            }
          // fall through
          case 330: break;
          case 107:
            { return BUILTIN_SPACE;
            }
          // fall through
          case 331: break;
          case 108:
            { return BUILTIN_STRIP;
            }
          // fall through
          case 332: break;
          case 109:
            { return KEYWORD_TRACE;
            }
          // fall through
          case 333: break;
          case 110:
            { return BUILTIN_TRUNC;
            }
          // fall through
          case 334: break;
          case 111:
            { return SUBKEY_UNTIL;
            }
          // fall through
          case 335: break;
          case 112:
            { return SUBKEY_UPPER;
            }
          // fall through
          case 336: break;
          case 113:
            { return SUBKEY_USING;
            }
          // fall through
          case 337: break;
          case 114:
            { return SUBKEY_VALUE;
            }
          // fall through
          case 338: break;
          case 115:
            { return SUBKEY_WHILE;
            }
          // fall through
          case 339: break;
          case 116:
            { return BUILTIN_WORDS;
            }
          // fall through
          case 340: break;
          case 117:
            { return BUILTIN_ABBREV;
            }
          // fall through
          case 341: break;
          case 118:
            { return SUBKEY_APPEND;
            }
          // fall through
          case 342: break;
          case 119:
            { return BUILTIN_BITAND;
            }
          // fall through
          case 343: break;
          case 120:
            { return BUILTIN_BITXOR;
            }
          // fall through
          case 344: break;
          case 121:
            { return BUILTIN_CENTER;
            }
          // fall through
          case 345: break;
          case 122:
            { return BUILTIN_CENTRE;
            }
          // fall through
          case 346: break;
          case 123:
            { return BUILTIN_CHARIN;
            }
          // fall through
          case 347: break;
          case 124:
            { return BUILTIN_COPIES;
            }
          // fall through
          case 348: break;
          case 125:
            { return BUILTIN_DELSTR;
            }
          // fall through
          case 349: break;
          case 126:
            { return SUBKEY_DIGITS;
            }
          // fall through
          case 350: break;
          case 127:
            { return KEYWORD_EXPOSE;
            }
          // fall through
          case 351: break;
          case 128:
            { return BUILTIN_FORMAT;
            }
          // fall through
          case 352: break;
          case 129:
            { return BUILTIN_INSERT;
            }
          // fall through
          case 353: break;
          case 130:
            { return BUILTIN_LENGTH;
            }
          // fall through
          case 354: break;
          case 131:
            { return SUBKEY_LINEIN;
            }
          // fall through
          case 355: break;
          case 132:
            { return DIRECTIVE_METHOD;
            }
          // fall through
          case 356: break;
          case 133:
            { return SUBKEY_NORMAL;
            }
          // fall through
          case 357: break;
          case 134:
            { return SUBKEY_OUTPUT;
            }
          // fall through
          case 358: break;
          case 135:
            { return SUBDIRECTIVE_PROLOG;
            }
          // fall through
          case 359: break;
          case 136:
            { return SUBDIRECTIVE_PUBLIC;
            }
          // fall through
          case 360: break;
          case 137:
            { return BUILTIN_QUEUED;
            }
          // fall through
          case 361: break;
          case 138:
            { return BUILTIN_RANDOM;
            }
          // fall through
          case 362: break;
          case 139:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 363: break;
          case 140:
            { return KEYWORD_SELECT;
            }
          // fall through
          case 364: break;
          case 141:
            { return KEYWORD_SIGNAL;
            }
          // fall through
          case 365: break;
          case 142:
            { return SUBKEY_SOURCE;
            }
          // fall through
          case 366: break;
          case 143:
            { return SUBKEY_STREAM;
            }
          // fall through
          case 367: break;
          case 144:
            { return SUBKEY_STRICT;
            }
          // fall through
          case 368: break;
          case 145:
            { return BUILTIN_SUBSTR;
            }
          // fall through
          case 369: break;
          case 146:
            { return BUILTIN_SYMBOL;
            }
          // fall through
          case 370: break;
          case 147:
            { return CONDITION_SYNTAX;
            }
          // fall through
          case 371: break;
          case 148:
            { return BUILTIN_USERID;
            }
          // fall through
          case 372: break;
          case 149:
            { return BUILTIN_VERIFY;
            }
          // fall through
          case 373: break;
          case 150:
            { return BUILTIN_XRANGE;
            }
          // fall through
          case 374: break;
          case 151:
            { return KEYWORD_ADDRESS;
            }
          // fall through
          case 375: break;
          case 152:
            { return BUILTIN_CHAROUT;
            }
          // fall through
          case 376: break;
          case 153:
            { return BUILTIN_COMPARE;
            }
          // fall through
          case 377: break;
          case 154:
            { return SUBKEY_COUNTER;
            }
          // fall through
          case 378: break;
          case 155:
            { return BUILTIN_DELWORD;
            }
          // fall through
          case 379: break;
          case 156:
            { return CONDITION_FAILURE;
            }
          // fall through
          case 380: break;
          case 157:
            { return SUBKEY_FOREVER;
            }
          // fall through
          case 381: break;
          case 158:
            { return KEYWORD_FORWARD;
            }
          // fall through
          case 382: break;
          case 159:
            { return SUBDIRECTIVE_GUARDED;
            }
          // fall through
          case 383: break;
          case 160:
            { return SUBDIRECTIVE_INHERIT;
            }
          // fall through
          case 384: break;
          case 161:
            { return KEYWORD_ITERATE;
            }
          // fall through
          case 385: break;
          case 162:
            { return BUILTIN_LASTPOS;
            }
          // fall through
          case 386: break;
          case 163:
            { return SUBDIRECTIVE_LIBRARY;
            }
          // fall through
          case 387: break;
          case 164:
            { return BUILTIN_LINEOUT;
            }
          // fall through
          case 388: break;
          case 165:
            { return SUBKEY_MESSAGE;
            }
          // fall through
          case 389: break;
          case 166:
            { return CONDITION_NOVALUE;
            }
          // fall through
          case 390: break;
          case 167:
            { return KEYWORD_NUMERIC;
            }
          // fall through
          case 391: break;
          case 168:
            { return DIRECTIVE_OPTIONS;
            }
          // fall through
          case 392: break;
          case 169:
            { return BUILTIN_OVERLAY;
            }
          // fall through
          case 393: break;
          case 170:
            { return SUBDIRECTIVE_PACKAGE;
            }
          // fall through
          case 394: break;
          case 171:
            { return SUBDIRECTIVE_PRIVATE;
            }
          // fall through
          case 395: break;
          case 172:
            { return BUILTIN_QUALIFY;
            }
          // fall through
          case 396: break;
          case 173:
            { return SUBKEY_REPLACE;
            }
          // fall through
          case 397: break;
          case 174:
            { return BUILTIN_REVERSE;
            }
          // fall through
          case 398: break;
          case 175:
            { return DIRECTIVE_ROUTINE;
            }
          // fall through
          case 399: break;
          case 176:
            { return BUILTIN_RXQUEUE;
            }
          // fall through
          case 400: break;
          case 177:
            { return BUILTIN_SUBWORD;
            }
          // fall through
          case 401: break;
          case 178:
            { return SUBKEY_VERSION;
            }
          // fall through
          case 402: break;
          case 179:
            { return BUILTIN_WORDPOS;
            }
          // fall through
          case 403: break;
          case 180:
            { return SUBDIRECTIVE_ABSTRACT;
            }
          // fall through
          case 404: break;
          case 181:
            { return DIRECTIVE_ANNOTATE;
            }
          // fall through
          case 405: break;
          case 182:
            { return SUBKEY_CASELESS;
            }
          // fall through
          case 406: break;
          case 183:
            { return DIRECTIVE_CONSTANT;
            }
          // fall through
          case 407: break;
          case 184:
            { return SUBKEY_CONTINUE;
            }
          // fall through
          case 408: break;
          case 185:
            { return BUILTIN_COUNTSTR;
            }
          // fall through
          case 409: break;
          case 186:
            { return BUILTIN_DATATYPE;
            }
          // fall through
          case 410: break;
          case 187:
            { return SUBDIRECTIVE_DELEGATE;
            }
          // fall through
          case 411: break;
          case 188:
            { return BUILTIN_ENDLOCAL;
            }
          // fall through
          case 412: break;
          case 189:
            { return SUBDIRECTIVE_EXTERNAL;
            }
          // fall through
          case 413: break;
          case 190:
            { return CONDITION_NOMETHOD;
            }
          // fall through
          case 414: break;
          case 191:
            { return SUBDIRECTIVE_NOPROLOG;
            }
          // fall through
          case 415: break;
          case 192:
            { return CONDITION_NOSTRING;
            }
          // fall through
          case 416: break;
          case 193:
            { return CONDITION_NOTREADY;
            }
          // fall through
          case 417: break;
          case 194:
            { return DIRECTIVE_REQUIRES;
            }
          // fall through
          case 418: break;
          case 195:
            { return DIRECTIVE_RESOURCE;
            }
          // fall through
          case 419: break;
          case 196:
            { return BUILTIN_SETLOCAL;
            }
          // fall through
          case 420: break;
          case 197:
            { return SUBDIRECTIVE_SUBCLASS;
            }
          // fall through
          case 421: break;
          case 198:
            { return SUBKEY_ARGUMENTS;
            }
          // fall through
          case 422: break;
          case 199:
            { return DIRECTIVE_ATTRIBUTE;
            }
          // fall through
          case 423: break;
          case 200:
            { return BUILTIN_CHANGESTR;
            }
          // fall through
          case 424: break;
          case 201:
            { return BUILTIN_CONDITION;
            }
          // fall through
          case 425: break;
          case 202:
            { return BUILTIN_ERRORTEXT;
            }
          // fall through
          case 426: break;
          case 203:
            { return KEYWORD_INTERPRET;
            }
          // fall through
          case 427: break;
          case 204:
            { return SUBDIRECTIVE_METACLASS;
            }
          // fall through
          case 428: break;
          case 205:
            { return SUBDIRECTIVE_NAMESPACE;
            }
          // fall through
          case 429: break;
          case 206:
            { return KEYWORD_OTHERWISE;
            }
          // fall through
          case 430: break;
          case 207:
            { return KEYWORD_PROCEDURE;
            }
          // fall through
          case 431: break;
          case 208:
            { return CONDITION_PROPAGATE;
            }
          // fall through
          case 432: break;
          case 209:
            { return SUBDIRECTIVE_PROTECTED;
            }
          // fall through
          case 433: break;
          case 210:
            { return BUILTIN_RXFUNCADD;
            }
          // fall through
          case 434: break;
          case 211:
            { return BUILTIN_TRANSLATE;
            }
          // fall through
          case 435: break;
          case 212:
            { return SUBDIRECTIVE_UNGUARDED;
            }
          // fall through
          case 436: break;
          case 213:
            { return BUILTIN_WORDINDEX;
            }
          // fall through
          case 437: break;
          case 214:
            { return SUBKEY_ADDITIONAL;
            }
          // fall through
          case 438: break;
          case 215:
            { return CONDITION_LOSTDIGITS;
            }
          // fall through
          case 439: break;
          case 216:
            { return SUBDIRECTIVE_MIXINCLASS;
            }
          // fall through
          case 440: break;
          case 217:
            { return BUILTIN_RXFUNCDROP;
            }
          // fall through
          case 441: break;
          case 218:
            { return SUBKEY_SCIENTIFIC;
            }
          // fall through
          case 442: break;
          case 219:
            { return BUILTIN_SOURCELINE;
            }
          // fall through
          case 443: break;
          case 220:
            { return BUILTIN_WORDLENGTH;
            }
          // fall through
          case 444: break;
          case 221:
            { return SUBKEY_DESCRIPTION;
            }
          // fall through
          case 445: break;
          case 222:
            { return SUBKEY_ENGINEERING;
            }
          // fall through
          case 446: break;
          case 223:
            { return BUILTIN_RXFUNCQUERY;
            }
          // fall through
          case 447: break;
          case 224:
            { return SUBDIRECTIVE_UNPROTECTED;
            }
          // fall through
          case 448: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
