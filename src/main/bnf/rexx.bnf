{
    parserClass="com.github.neppord.rexxintellijplugin.gen.RexxParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Rexx"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.neppord.rexxintellijplugin.gen.psi"
    psiImplPackage="com.github.neppord.rexxintellijplugin.gen.impl"
    elementTypeHolderClass="com.github.neppord.rexxintellijplugin.gen.RexxTokens"
    elementTypeClass="com.github.neppord.rexxintellijplugin.RexxElementType"
    tokenTypeClass="com.github.neppord.rexxintellijplugin.RexxTokenType"
    tokens=[
        // MAJOR TOKEN TYPES
        // TOKEN_NULL
        //     TOKEN_BLANK
        //     TOKEN_SYMBOL
        //     TOKEN_LITERAL
        //     TOKEN_OPERATOR
        //     TOKEN_EOC
        //     TOKEN_COMMA
        //     TOKEN_PREFIX
        TOKEN_LEFT="("
        TOKEN_RIGHT=")"
        //     TOKEN_POINT
        //     TOKEN_COLON
        //     TOKEN_TILDE
        //     TOKEN_DTILDE
        //     TOKEN_SQLEFT
        //     TOKEN_SQRIGHT
        //     TOKEN_DCOLON
        //     TOKEN_CONTINUE
        //     TOKEN_ASSIGNMENT

        // OPERATORS
        OPERATOR_PLUS="regexp:[+]"
        OPERATOR_SUBTRACT="regexp:-"
        OPERATOR_MULTIPLY="regexp:[*]"
        OPERATOR_DIVIDE="regexp:/"
        //OPERATOR_INTDIV="regexp:\\\\"
        OPERATOR_REMAINDER="regexp:%"
        OPERATOR_POWER="regexp:[*][*]"
        OPERATOR_CONCATENATE="regexp:[|][|]"
        OPERATOR_AND="regexp:&&"

        // Bitwise
        OPERATOR_BITWISE_AND="regexp:&"
        OPERATOR_OR="regexp:[|]"
        OPERATOR_XOR="regexp:\^\^"

        OPERATOR_EQUAL="regexp:="
        OPERATOR_BACKSLASH_EQUAL="regexp:\\="
        OPERATOR_GREATERTHAN="regexp:>"
        OPERATOR_BACKSLASH_GREATERTHAN="regexp:\\>"
        OPERATOR_LESSTHAN="regexp:<"
        OPERATOR_BACKSLASH_LESSTHAN="regexp:\\<"
        OPERATOR_GREATERTHAN_EQUAL="regexp:>="
        OPERATOR_LESSTHAN_EQUAL="regexp:=<"

        OPERATOR_STRICT_EQUAL="regexp:=="
        OPERATOR_STRICT_BACKSLASH_EQUAL="regexp:\\=="
        // OPERATOR_STRICT_GREATERTHAN="regexp:==>"
        OPERATOR_STRICT_BACKSLASH_GREATERTHAN="regexp:\\==>"
        OPERATOR_STRICT_LESSTHAN="regexp:==<"
        OPERATOR_STRICT_BACKSLASH_LESSTHAN="regexp:\\==<"
        OPERATOR_STRICT_GREATERTHAN_EQUAL="regexp:==>"
        OPERATOR_STRICT_LESSTHAN_EQUAL="regexp:==<="
        OPERATOR_LESSTHAN_GREATERTHAN="regexp:<>"
        OPERATOR_GREATERTHAN_LESSTHAN="regexp:><"

        OPERATOR_BACKSLASH="regexp:\\\\"

        // KEYWORD_ADDRESS="regexp:ADDRESS"
        KEYWORD_ARG="regexp:ARG"
        KEYWORD_VAR="regexp:VAR"
        KEYWORD_VALUE="regexp:VALUE"
        KEYWORD_WITH="regexp:WITH"
        KEYWORD_CALL="regexp:CALL"
        KEYWORD_DO="regexp:DO"
        KEYWORD_DROP="regexp:DROP"
        KEYWORD_ELSE="regexp:ELSE"
        KEYWORD_END="regexp:END"
        // KEYWORD_EXIT="regexp:EXIT"
        // KEYWORD_EXPOSE="regexp:EXPOSE"
        KEYWORD_FORWARD="regexp:FORWARD"
        KEYWORD_GUARD="regexp:GUARD"
        KEYWORD_IF="regexp:IF"
        KEYWORD_INTERPRET="regexp:INTERPRET"
        KEYWORD_ITERATE="regexp:ITERATE"
        KEYWORD_LEAVE="regexp:LEAVE"
        KEYWORD_LOOP="regexp:LOOP"
        KEYWORD_NOP="regexp:NOP"
        KEYWORD_NUMERIC="regexp:NUMERIC"
        KEYWORD_OPTIONS="regexp:OPTIONS"
        KEYWORD_OTHERWISE="regexp:OTHERWISE"
        KEYWORD_PARSE="regexp:PARSE"
        KEYWORD_PROCEDURE="regexp:PROCEDURE"
        //KEYWORD_PULL="regexp:PULL"
        KEYWORD_PUSH="regexp:PUSH"
        KEYWORD_QUEUE="regexp:QUEUE"
        KEYWORD_RAISE="regexp:RAISE"
        KEYWORD_REPLY="regexp:REPLY"
        // KEYWORD_RETURN="regexp:RETURN"
        KEYWORD_SAY="regexp:SAY"
        KEYWORD_SELECT="regexp:SELECT"
        KEYWORD_SIGNAL="regexp:SIGNAL"
        //KEYWORD_THEN="regexp:THEN"
        KEYWORD_TRACE="regexp:TRACE"
        KEYWORD_USE="regexp:USE"
        //KEYWORD_WHEN="regexp:WHEN"


        // Comments
        SHEBANG="regexp:[#][!][^\n]*"
        LINE_COMMENT="regexp:--[^\n]*"
        MULTILINE_COMMENT="regexp:[/][*]([^*]+|[*]+[^/*])*[*]+[/]"

        // complex

        STRING="regexp:\"[^\"\n]*\"|'[^'\n]*'"
        IDENTIFIER="regexp:[a-zA-Z][a-zA-Z0-9._]*"


        // Numbers
        NUMBER_BINARY="regexp:0b[01]+"
        NUMBER_INT="regexp:[0-9]+"
        NUMBER_DECIMAL="regexp:[0-9]*[.]?[0-9]+"
        NUMBER_SCIENTIFIC="regexp:[0-9]*[.][0-9]+([eE][+-]?[0-9]+)"
        NUMBER_HEXADECIMAL="regexp:0[xX][0-9a-fA-F]+"

        // OO

        KEYWORD_CLASS="regexp:::class"
        KEYWORD_ATTRIBUTE="regexp:::attribute"
        KEYWORD_METHOD="regexp:::method"
        DOT="regexp:[.]"
        TILDE="regexp:[~]"
    ]
}


rexx_file ::= instruction*

private instruction ::=  assignment | say_instruction | parse_arg_instruction| parse_value_instruction
parse_arg_instruction ::= KEYWORD_PARSE KEYWORD_ARG parse_target*
parse_var_instruction ::= KEYWORD_PARSE KEYWORD_VAR parse_target*
parse_value_instruction ::= KEYWORD_PARSE KEYWORD_VALUE expression* KEYWORD_WITH parse_target*
private parse_target
    ::= name_declaration
    | stringLiteral
    | integerConstant
    | remainder // | range | offset

remainder ::= DOT

assignment ::= name_declaration OPERATOR_EQUAL expression

name_declaration ::= IDENTIFIER {
   mixin="com.github.neppord.rexxintellijplugin.instructions.NameDeclaration"
}

say_instruction ::= KEYWORD_SAY expression*
expression ::= concatenation
concatenation ::= addition (OPERATOR_CONCATENATE addition)*
addition ::= subtraction_ (OPERATOR_PLUS subtraction_)*
private subtraction_ ::= multiplication (subtraction)*
left subtraction ::= OPERATOR_SUBTRACT multiplication
multiplication ::= division_ (OPERATOR_MULTIPLY division_)*
private division_ ::= expressionTerm division*
left division ::= OPERATOR_DIVIDE expressionTerm

expressionTerm
    ::= stringLiteral
    | numericConstant
    | variable
    | parentheticalExpression
    | functionCall

functionCall ::= variable TOKEN_LEFT expression? TOKEN_RIGHT
parentheticalExpression ::= TOKEN_LEFT expression TOKEN_RIGHT
stringLiteral ::= STRING
numericConstant ::= integerConstant | decimalConstant | scientificConstant
integerConstant ::= NUMBER_INT
decimalConstant ::= NUMBER_DECIMAL
scientificConstant ::= NUMBER_SCIENTIFIC
variable ::= IDENTIFIER {
    mixin="com.github.neppord.rexxintellijplugin.expressions.Variable"
}

